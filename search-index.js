var searchIndex = JSON.parse('{\
"massa_api":{"doc":"","t":[3,8,3,3,8,3,10,12,12,10,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,11,11,12,10,11,11,11,11,12,10,10,10,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11],"n":["API","Endpoints","Private","Public","RpcServer","StopHandle","add_staking_private_keys","api_settings","api_settings","ban","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compensation_millis","consensus_command_sender","consensus_command_sender","consensus_config","consensus_config","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","execute_read_only_request","execution_command_sender","from","from","from","from","get_addresses","get_block","get_cliques","get_endorsements","get_filtered_sc_output_event","get_graph_interval","get_operations","get_stakers","get_staking_addresses","get_status","init","init","init","init","into","into","into","into","network_command_sender","network_command_sender","network_settings","new","new","node_id","node_sign_message","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pool_command_sender","remove_staking_addresses","send_operations","serve","serve","serve","stop","stop_node","stop_node_channel","to_delegate","to_delegate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unban","version","vzip","vzip","vzip","vzip"],"q":["massa_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","Add a vec of new private keys for the node to use to stake.","","","Bans given IP address. No confirmation to expect.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Execute code in read-only mode.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get addresses.","Get information on a block given its hash.","Get cliques.","Get endorsements (not yet implemented).","Get events optionnally filtered by:","Get the block graph within the specified time interval. …","Returns operations information associated to a given list …","Returns the active stakers and their active roll counts …","Return hashset of staking addresses.","Summary of the current state: time, last final blocks …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Sign message with node’s key. Returns the public key …","","","","","","Remove a vec of addresses used to stake. No confirmation …","Adds operations to pool. Returns operations that were ok …","","","","","Gracefully stop the node.","","Create an <code>IoDelegate</code>, wiring rpc calls to the trait …","Create an <code>IoDelegate</code>, wiring rpc calls to the trait …","","","","","","","","","","","","","Unbans given IP address. No confirmation to expect.","","","","",""],"i":[0,0,0,0,0,0,1,2,3,1,2,3,4,5,2,3,4,5,2,2,3,2,3,2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,1,2,2,3,4,5,1,1,1,1,1,1,1,1,1,1,2,3,4,5,2,3,4,5,2,3,2,4,4,2,1,2,3,4,5,2,1,1,6,4,4,5,1,3,1,1,2,3,4,5,2,3,4,5,2,3,4,5,1,2,2,3,4,5],"f":[null,null,null,null,null,null,[[["",0],["vec",3,[["privatekey",3]]]],["boxfuture",6,[["result",4,[["apierror",4]]]]]],null,null,[[["",0],["vec",3,[["ipaddr",4]]]],["boxfuture",6,[["result",4,[["apierror",4]]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["readonlyexecution",3]],["boxfuture",6,[["result",4,[["executereadonlyresponse",3],["apierror",4]]]]]],null,[[]],[[]],[[]],[[]],[[["",0],["vec",3,[["address",3]]]],["boxfuture",6,[["result",4,[["vec",3,[["addressinfo",3]]],["apierror",4]]]]]],[[["",0],["blockid",3]],["boxfuture",6,[["result",4,[["blockinfo",3],["apierror",4]]]]]],[[["",0]],["boxfuture",6,[["result",4,[["vec",3,[["clique",3]]],["apierror",4]]]]]],[[["",0],["vec",3,[["endorsementid",3]]]],["boxfuture",6,[["result",4,[["vec",3,[["endorsementinfo",3]]],["apierror",4]]]]]],[[["",0],["eventfilter",3]],["boxfuture",6,[["result",4,[["vec",3,[["scoutputevent",3]]],["apierror",4]]]]]],[[["",0],["timeinterval",3]],["boxfuture",6,[["result",4,[["vec",3,[["blocksummary",3]]],["apierror",4]]]]]],[[["",0],["vec",3,[["operationid",3]]]],["boxfuture",6,[["result",4,[["vec",3,[["operationinfo",3]]],["apierror",4]]]]]],[[["",0]],["boxfuture",6,[["result",4,[["map",6,[["address",3],["u64",0]]],["apierror",4]]]]]],[[["",0]],["boxfuture",6,[["result",4,[["set",6,[["address",3]]],["apierror",4]]]]]],[[["",0]],["boxfuture",6,[["result",4,[["nodestatus",3],["apierror",4]]]]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],null,null,null,[[["consensuscommandsender",3],["executioncommandsender",3],["apisettings",3],["consensusconfig",3],["poolcommandsender",3],["networksettings",3],["version",3],["networkcommandsender",3],["i64",0],["nodeid",3]]],[[["consensuscommandsender",3],["networkcommandsender",3],["executioncommandsender",3],["apisettings",3],["consensusconfig",3]]],null,[[["",0],["vec",3,[["u8",0]]]],["boxfuture",6,[["result",4,[["pubkeysig",3],["apierror",4]]]]]],[[]],[[]],[[]],[[]],null,[[["",0],["vec",3,[["address",3]]]],["boxfuture",6,[["result",4,[["apierror",4]]]]]],[[["",0],["vec",3,[["operation",3]]]],["boxfuture",6,[["result",4,[["vec",3,[["operationid",3]]],["apierror",4]]]]]],[[["socketaddr",4]],["stophandle",3]],[[["socketaddr",4]],["stophandle",3]],[[["socketaddr",4]],["stophandle",3]],[[]],[[["",0]],["boxfuture",6,[["result",4,[["apierror",4]]]]]],null,[[],["iodelegate",3,[["metadata",8]]]],[[],["iodelegate",3,[["metadata",8]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["vec",3,[["ipaddr",4]]]],["boxfuture",6,[["result",4,[["apierror",4]]]]]],null,[[]],[[]],[[]],[[]]],"p":[[8,"Endpoints"],[3,"Public"],[3,"Private"],[3,"API"],[3,"StopHandle"],[8,"RpcServer"]]},\
"massa_bootstrap":{"doc":"","t":[3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,0,12,11,11,11,5,12,11,11,11,11,12,11,11,12,0,5,11,11,11,11,11,11,11,11,11,6,3,3,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,12,11,11,12,11,11,12,11,11,11,11,11,12,11,11,11,11,12,12,12,12,11,12,12,11,11,11,11,11,12],"n":["BootstrapManager","GlobalBootstrapState","borrow","borrow","borrow_mut","borrow_mut","compensation_millis","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","establisher","execution","fmt","from","from","get_state","graph","init","init","into","into","peers","pointer_metadata","pointer_metadata","pos","settings","start_bootstrap_server","stop","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Connector","DefaultConnector","DefaultEstablisher","DefaultListener","Duplex","Establisher","Listener","accept","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connect","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","from","from","from","get_connector","get_listener","init","init","init","into","into","into","new","pointer_metadata","pointer_metadata","pointer_metadata","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","BootstrapSettings","bind","bootstrap_list","borrow","borrow_mut","cache_duration","clone","clone_into","connect_timeout","deref","deref_mut","deserialize","deserialize","drop","enable_clock_synchronization","fmt","from","init","into","ip_list_max_size","max_ping","max_simultaneous_bootstraps","per_ip_min_interval","pointer_metadata","read_timeout","retry_delay","to_owned","try_from","try_into","type_id","vzip","write_timeout"],"q":["massa_bootstrap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_bootstrap::establisher","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_bootstrap::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","a collection of the bootstrap state snapshots of all …","","","","","timestamp correction in milliseconds","","","","","","","","","","","state of the execution state","","Returns the argument unchanged.","Returns the argument unchanged.","Gets the state from a bootstrap server needs to be …","state of the consensus graph","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","list of network peers","","","state of the proof of stake state (distributions, seeds…)","","","","","","","","","","","","","Initiates a connection with given timeout in millis","Establishes a connection","The listener we are using","","","","Accepts a new incoming connection from this listener.","","","","","","","Tries to connect to address","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the connector with associated timeout","Gets the associated listener","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an Establisher.","","","","","","","","","","","","","","","","","Port to listen if we choose to allow other nodes to use us …","Ip address of our bootstrap nodes and their public key.","","","Cache duration","","","connection timeout","","","","","","Enable clock synchronization","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Max size of the IP list","Max ping delay.","Max simultaneous bootstraps","Minimum interval between two bootstrap attempts from a …","","readout timeout","Time we wait before retrying a bootstrap","","","","","","write timeout"],"i":[0,0,1,2,1,2,2,2,1,2,1,2,1,2,1,2,0,2,2,1,2,0,2,1,2,1,2,2,1,2,2,0,0,1,1,2,1,2,1,2,1,2,0,0,0,0,0,0,0,3,3,4,5,3,4,5,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,5,5,3,4,5,3,4,5,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[],["globalbootstrapstate",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["usize",0]]],[[["usize",0]]],null,null,[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["bootstrapsettings",3],["establisher",6],["version",3],["massatime",3],["option",4,[["massatime",3]]]]],null,[[],["usize",0]],[[],["usize",0]],[[]],[[]],null,[[]],[[]],null,null,[[["consensuscommandsender",3],["networkcommandsender",3],["executioncommandsender",3],["bootstrapsettings",3],["establisher",6],["privatekey",3],["i64",0],["version",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["socketaddr",4]]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0],["massatime",3]]],[[["",0],["socketaddr",4]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["bootstrapsettings",3]],[[["",0],["",0]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["usize",0]]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],null,null,null,null,[[]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null],"p":[[3,"BootstrapManager"],[3,"GlobalBootstrapState"],[3,"DefaultListener"],[3,"DefaultConnector"],[3,"DefaultEstablisher"],[3,"BootstrapSettings"]]},\
"massa_client":{"doc":"","t":[3,3,11,11,11,11,11,0,12,11,12,11,11,11,11,11,12,12,5,12,11,12,12,0,0,11,0,11,11,11,11,11,11,0,11,11,12,12,4,3,3,3,12,12,13,11,11,11,11,11,11,11,11,13,14,11,11,11,11,11,13,11,11,11,11,11,11,11,11,11,11,13,13,11,13,5,11,13,11,13,11,5,11,13,12,11,11,11,11,11,11,11,12,11,11,11,13,13,13,13,13,11,5,11,12,12,13,14,11,13,5,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,11,11,11,11,13,13,13,13,13,13,13,3,3,8,11,11,11,11,11,11,11,11,11,11,12,11,11,14,12,12,10,11,5,11,11,11,11,11,11,11,11,11,11,11,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["Args","JsonError","borrow","borrow","borrow_mut","borrow_mut","clap","cmds","command","erased_serialize","error","from","from","from_clap","into","into","ip","json","main","parameters","parse_args","private_port","public_port","repl","rpc","serialize","settings","try_from","try_from","try_into","try_into","type_id","type_id","utils","vzip","vzip","wallet","0","Command","CommandIter","ExtendedWallet","ExtendedWalletEntry","address_info","back_idx","ban","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buy_rolls","client_warning","clone","clone_into","eq","erased_serialize","erased_serialize","exit","fmt","fmt","fmt","fmt","from","from","from","from","from_str","get","get_addresses","get_block","get_detailed_message","get_endorsements","get_file_as_byte_vec","get_message","get_operations","get_serializations","get_status","get_str","help","help","help","idx","into","into","into","into","into_iter","iter","len","marker","new","next","next_back","node_add_staking_private_keys","node_get_staking_addresses","node_remove_staking_addresses","node_stop","node_testnet_rewards_program_ownership_proof","nth","parse_vec","pretty_print","private_key","public_key","read_only_smart_contract","rpc_error","run","sell_rolls","send_operation","send_smart_contract","send_transaction","serialize","serialize","size_hint","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unban","vzip","vzip","vzip","vzip","wallet_add_private_keys","wallet_generate_private_key","wallet_info","wallet_remove_addresses","wallet_sign","when_episode_ends","when_moon","CommandCompletion","CommandHistory","Output","borrow","borrow","borrow_mut","borrow_mut","default","default","from","from","get","get_saved_history","history","into","into","massa_fancy_ascii_art_logo","max","options","pretty_print","read","run","stdout_json","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write","write_to_saved_history","0","Client","RpcClient","_get_cliques","_get_graph_interval","_get_stakers","add_staking_private_keys","ban","borrow","borrow","borrow_mut","borrow_mut","call_method","execute_read_only_request","from","from","from","from_url","get_addresses","get_block","get_endorsements","get_operations","get_staking_addresses","get_status","into","into","new","node_sign_message","private","public","remove_staking_addresses","send_operations","stop_node","try_from","try_from","try_into","try_into","type_id","type_id","unban","vzip","vzip","DefaultNode","SETTINGS","Settings","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default_node","deref","deserialize","deserialize","fmt","fmt","from","from","from","history","history_file_path","into","into","into","ip","private_port","public_port","timeout","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","longest_common_prefix"],"q":["massa_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_client::cmds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_client::repl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_client::rpc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_client::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_client::utils"],"d":["","","","","","","","","Command that client would execute (non-interactive mode)","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Address to listen on.","Enable a mode where input/output are serialized as JSON","","Optional command parameter (as a JSON parsable string)","","Port to listen on (Massa private API).","Port to listen on (Massa public API).","","","","Build here the default client settings from the config …","","","","","","","Utilities","","","Path of wallet file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Simple completion implementation based on substring","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Get the block graph within the specified time interval. …","Returns the active stakers and their roll counts for the …","Add a vec of new private keys for the node to use to stake.","Bans given node id No confirmation to expect.","","","","","Typed wrapper to API calls based on the method given by …","execute read only bytecode","Returns the argument unchanged.","","Returns the argument unchanged.","Default constructor","","Get information on a block given its BlockId","","Returns operations information associated to a given list …","Return hashset of staking addresses.","summary of the current state: time, last final blocks …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Sign message with node’s key. Returns the public key …","","","Remove a vec of addresses used to stake. No confirmation …","Adds operations to pool. Returns operations that were ok …","Gracefully stop the node.","","","","","","","Unbans given ip addr No confirmation to expect.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Longest Common Prefix"],"i":[0,0,1,2,1,2,1,0,1,2,2,1,2,1,1,2,1,1,0,1,1,1,1,0,0,2,0,1,2,1,2,1,2,0,1,2,1,3,0,0,0,0,4,5,6,6,5,4,3,6,5,4,3,6,0,5,5,6,4,3,6,6,6,4,3,6,5,4,3,6,5,6,6,6,6,0,6,6,6,6,6,0,6,6,5,6,5,4,3,5,6,5,5,3,5,5,6,6,6,6,6,5,0,3,4,4,6,0,6,6,0,6,6,4,3,5,5,6,4,3,6,5,4,3,6,5,4,3,6,5,4,3,6,6,5,4,3,6,6,6,6,6,6,6,0,0,0,7,8,7,8,7,8,7,8,8,7,7,7,8,0,7,8,9,7,0,9,7,8,7,8,7,8,7,8,7,7,10,0,0,10,10,10,10,10,11,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,11,10,11,10,11,11,10,10,10,11,10,11,10,11,10,10,11,10,0,0,0,12,12,13,14,12,13,14,13,14,13,14,13,12,13,14,13,14,12,13,14,13,13,12,13,14,14,14,14,13,13,14,12,13,14,12,13,14,12,13,14,12,13,14,0],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["app",3]],null,null,[[["",0],["serializer",8]],["result",4,[["ok",3],["error",3]]]],null,[[]],[[]],[[["argmatches",3]]],[[]],[[]],null,null,[[],["result",6]],null,[[],["result",4]],null,null,null,null,[[["",0]],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["",0]],["commanditer",3]],[[["",0],["",0]]],[[["",0],["command",4]],["bool",0]],[[["",0],["serializer",8]],["result",4,[["ok",3],["error",3]]]],[[["",0],["serializer",8]],["result",4,[["ok",3],["error",3]]]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4,[["command",4]]]],[[["",0],["usize",0]],["option",4,[["command",4]]]],null,null,[[["",0]],["option",4,[["str",0]]]],null,[[["path",3]]],[[["",0]],["option",4,[["str",0]]]],null,[[["",0]]],null,[[["",0],["str",0]],["option",4,[["str",0]]]],[[]],[[["",0]]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["commanditer",3]],[[["",0]],["usize",0]],null,[[["wallet",3]],["result",6]],[[["",0]],["option",4]],[[["",0]],["option",4]],null,null,null,null,null,[[["",0],["usize",0]],["option",4]],[[],["result",6,[["vec",3,[["fromstr",8]]]]]],[[["",0]]],null,null,null,null,[[["",0],["client",3],["wallet",3],["bool",0]]],null,[[["client",3],["wallet",3],["operationtype",4],["amount",3],["address",3],["bool",0]]],null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[["",0],["str",0]],["option",4,[["string",3]]]],[[],["result",4,[["vecdeque",3,[["string",3]]],["error",3]]]],null,[[]],[[]],null,null,null,[[["",0]]],[[["",0],["usize",0]],["option",4,[["string",3]]]],[[["client",3],["wallet",3]]],[[["",0]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[["",0],["",0]]],[[["str",0]]],null,null,null,[[["",0]]],[[["",0],["timeinterval",3]]],[[["",0]]],[[["",0],["vec",3,[["privatekey",3]]]]],[[["",0],["vec",3,[["ipaddr",4]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["str",0],["str",0],["serialize",8]]],[[["",0],["readonlyexecution",3]]],[[]],[[["rpcchannel",3]]],[[]],[[["str",0]]],[[["",0],["vec",3,[["address",3]]]]],[[["",0],["blockid",3]]],[[["",0],["vec",3,[["endorsementid",3]]]]],[[["",0],["vec",3,[["operationid",3]]]]],[[["",0]]],[[["",0]]],[[]],[[]],[[["ipaddr",4],["u16",0],["u16",0]]],[[["",0],["vec",3,[["u8",0]]]]],null,null,[[["",0],["vec",3,[["address",3]]]]],[[["",0],["vec",3,[["operation",3]]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["vec",3,[["ipaddr",4]]]]],[[]],[[]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["settings",3]],[[["",0]],["defaultnode",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["",0]],["settings",3]],[[],["result",4]],[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],null,null,null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[["vec",3,[["str",0]]]],["str",0]]],"p":[[3,"Args"],[3,"JsonError"],[3,"ExtendedWallet"],[3,"ExtendedWalletEntry"],[3,"CommandIter"],[4,"Command"],[3,"CommandHistory"],[3,"CommandCompletion"],[8,"Output"],[3,"RpcClient"],[3,"Client"],[3,"SETTINGS"],[3,"Settings"],[3,"DefaultNode"]]},\
"massa_consensus_exports":{"doc":"","t":[12,12,3,3,3,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,4,6,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,12,12,12,12,11,11,12,12,11,11,11,11,11,11,12,12,12,12,11,11,11,11,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5],"n":["0","0","ConsensusCommandSender","ConsensusEventReceiver","ConsensusManager","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","commands","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drain","drop","drop","drop","error","events","from","from","from","get_active_block","get_active_stakers","get_addresses_info","get_block_graph_status","get_block_ids_by_creator","get_block_status","get_bootstrap_state","get_cliques","get_endorsements_by_address","get_endorsements_by_id","get_operations","get_operations_involving_address","get_selection_draws","get_stakers_production_stats","get_staking_addresses","get_stats","init","init","init","into","into","into","join_handle","manager_tx","pointer_metadata","pointer_metadata","pointer_metadata","register_staking_private_keys","remove_staking_addresses","settings","stop","to_owned","tools","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","wait_event","ConsensusCommand","ConsensusManagementCommand","GetActiveBlock","GetActiveStakers","GetAddressesInfo","GetBlockGraphStatus","GetBlockIdsByCreator","GetBlockStatus","GetBootstrapState","GetCliques","GetEndorsementsByAddress","GetEndorsementsById","GetOperations","GetRecentOperations","GetSelectionDraws","GetStakersProductionStats","GetStakingAddressses","GetStats","RegisterStakingPrivateKeys","RemoveStakingAddresses","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","init","init","into","into","pointer_metadata","pointer_metadata","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","0","0","0","0","address","address","address","addresses","addrs","block_id","block_id","end","endorsements","operation_ids","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","slot_end","slot_start","start","BlockCreationError","ChannelError","ConfigError","ConsensusError","ConsensusResult","ContainerInconsistency","ControllerEventError","ExecutionError","GraphError","IOError","InternalError","JoinError","ModelsError","PoolError","ProofOfStakeError","ProtocolError","ReceiveChannelError","SendChannelError","SerdeError","SlotOverflowError","TimeError","TokioSendError","TransactionError","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","into","into","pointer_metadata","pointer_metadata","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","ConsensusEvent","NeedSync","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","fmt","from","init","into","pointer_metadata","to_owned","try_from","try_into","type_id","vzip","ConsensusChannels","ConsensusConfig","ConsensusSettings","ConsensusWorkerChannels","block_db_prune_interval","block_db_prune_interval","block_reward","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","controller_command_rx","controller_event_tx","controller_manager_rx","delta_f0","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","disable_block_creation","disable_block_creation","drop","drop","drop","drop","end_timestamp","endorsement_count","execution_command_sender","execution_command_sender","execution_event_receiver","execution_event_receiver","fmt","fmt","force_keep_final_periods","force_keep_final_periods","from","from","from","from","from","from","future_block_processing_max_periods","future_block_processing_max_periods","genesis_key","genesis_timestamp","init","init","init","init","initial_draw_seed","initial_ledger_path","initial_ledger_path","initial_rolls_path","initial_rolls_path","into","into","into","into","ledger_cache_capacity","ledger_cache_capacity","ledger_flush_interval","ledger_flush_interval","ledger_path","ledger_path","ledger_reset_at_startup","ledger_reset_at_startup","max_block_size","max_dependency_blocks","max_dependency_blocks","max_discarded_blocks","max_discarded_blocks","max_future_processing_blocks","max_future_processing_blocks","max_gas_per_block","max_item_return_count","max_item_return_count","max_operations_fill_attempts","max_operations_fill_attempts","max_operations_per_block","max_send_wait","max_send_wait","operation_batch_size","operation_batch_size","operation_validity_periods","periods_per_cycle","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pool_command_sender","pool_command_sender","pos_draw_cached_cycles","pos_draw_cached_cycles","pos_lock_cycles","pos_lookback_cycles","pos_miss_rate_deactivation_threshold","protocol_command_sender","protocol_command_sender","protocol_event_receiver","protocol_event_receiver","roll_price","serialize","staking_keys_path","staking_keys_path","stats_timespan","stats_timespan","t0","thread_count","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","generate_default_roll_counts_file","generate_ledger_file","generate_roll_counts_file","generate_staking_keys_file"],"q":["massa_consensus_exports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_consensus_exports::commands","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_consensus_exports::commands::ConsensusCommand","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_consensus_exports::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_consensus_exports::error::ConsensusError","","","","","","","","","","","","","","","","","massa_consensus_exports::error::InternalError","massa_consensus_exports::events","","","","","","","","","","","","","","","","","","","","massa_consensus_exports::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_consensus_exports::tools","","",""],"d":["","","","","","","","","","","","","","Contains definitions of commands used by the controller","","","","","","","","","","drains remaining events and returns them in a VecDeque …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the whole block corresponding to given hash.","","Gets the candidate and final ledger data of a list of …","Gets all the aviable information on the block graph …","","Gets the whole block and its status corresponding to given …","","Gets all cliques.","","","","Returns hashmap: Operation id -&gt; if it is final","Gets (slot, public_key) were the staker with public_key …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Definition &amp; Implementation of the consensus settings","","","","","","","","","","","","","","","","","Commands that can be proccessed by consensus.","Events that are emitted by consensus.","Returns through a channel full block with specified hash.","","Returns info for a set of addresses (rolls and balance)","Returns through a channel current blockgraph without block …","","Returns through a channel full block and status with …","Returns the bootstrap state","","","","","","Returns through a channel the list of slots with the …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","block creation error {0}","channel error: {0}","config error: {0}","","Consensus","there was an inconsistency between containers {0}","failed retrieving consensus controller event","execution error: {0}","Graph error: {0}","io error {0}","","Join error {0}","models error: {0}","pool error : {0}","Proof of stake error: {0}","Protocol error {0}","Receive  channel error : {0}","Send  channel error : {0}","serde error","slot overflow","Time error {0}","error sending consensus event: {0}","transaction error {0}","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Events that are emitted by consensus.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Public channels associated to the consensus module. …","Consensus full configuration (static + user defined)","Consensus configuration Assumes thread_count &gt;= 1, …","Communication async channels for the consensus worker …","","","Reward for the creation of a block","","","","","","","","","","","","","Channel receiving consensus commands.","Channel sending out consensus events.","Channel receiving consensus management commands.","Threshold for fitness.","","","","","","","","","","","","","","If we want to generate blocks. Parameter that shouldn’t …","If we want to generate blocks. Parameter that shouldn’t …","","","","","TESTNET: time when the blockclique is ended.","","Execution command sender.","","Associated execution event listener.","","","","","force keep at least this number of final periods in RAM …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","If a block  is future_block_processing_max_periods periods …","If a block  is future_block_processing_max_periods periods …","Private_key to sign genesis blocks.","Time in millis when the blockclique started.","","","","","","","Inital file path that describe the ledger to merge in …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Cache capacity allowed to the ledger","","","path to ledger db","path to ledger db after initialization (merge with …","","","Maximum block size in bytes","Maximum number of blocks allowed in …","Maximum number of blocks allowed in …","Maximum number of blocks allowed in discarded blocks.","Maximum number of blocks allowed in discarded blocks.","Maximum number of blocks allowed in FutureIncomingBlocks.","Maximum number of blocks allowed in FutureIncomingBlocks.","","","","Maximum tries to fill a block with operations","Maximum tries to fill a block with operations","Maximum number of operations per block","","max event send wait","","","Maximum operation validity period count","cycle duration in periods","","","","","Associated Pool command sender.","","","number of cached draw cycles for PoS","PoS lock cycles: when some rolls are released, we only …","PoS lookback cycles: when drawing for cycle N, we use the …","number of cycle misses (strictly) above which stakers are …","Associated protocol command sender.","","Associated protocol event listener.","","Price of a roll inside the network","","Staking private keys","Staking private keys","","stats timespan","Time between the periods in the same thread.","Number of threads","","","","","","","","","","","","","","","","","","","generate a default named temporary JSON initial rolls file,","generate a named temporary JSON ledger file","generate a named temporary JSON initial rolls file",""],"i":[1,2,0,0,0,1,3,2,1,3,2,2,2,0,1,3,2,1,3,2,1,3,2,1,1,3,2,0,0,1,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,3,2,1,3,2,3,3,1,3,2,2,2,0,3,2,0,1,3,2,1,3,2,1,3,2,1,3,2,1,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,4,5,5,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,5,4,5,4,5,4,5,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,18,19,20,16,13,22,17,14,15,21,23,23,20,24,24,24,0,0,24,24,24,24,24,0,24,24,24,24,24,24,24,24,24,24,24,25,25,24,25,24,25,24,25,24,25,24,25,24,25,25,24,24,25,24,24,24,24,24,24,24,24,24,24,24,24,24,25,24,25,24,25,24,24,25,24,25,24,25,24,25,24,25,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,45,46,46,47,48,45,46,47,48,45,46,45,46,45,46,47,47,47,46,47,48,45,46,47,48,45,46,47,48,45,45,46,45,46,47,48,45,46,46,46,47,48,47,48,45,46,45,46,47,48,45,46,46,46,45,46,46,46,47,48,45,46,46,45,46,45,46,47,48,45,46,45,46,45,46,45,46,45,46,46,45,46,45,46,45,46,46,45,46,45,46,46,45,46,45,46,46,46,47,48,45,46,47,48,45,46,46,46,46,47,48,47,48,46,45,45,46,45,46,46,46,45,46,47,48,45,46,47,48,45,46,47,48,45,46,47,48,45,46,0,0,0,0],"f":[null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["consensuscommandsender",3]],[[["",0],["",0]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,null,[[]],[[]],[[]],[[["",0],["blockid",3]]],[[["",0]]],[[["",0],["set",6,[["address",3]]]]],[[["",0],["option",4,[["slot",3]]],["option",4,[["slot",3]]]]],[[["",0],["address",3]]],[[["",0],["blockid",3]]],[[["",0]]],[[["",0]]],[[["",0],["address",3]]],[[["",0],["set",6,[["endorsementid",3]]]]],[[["",0],["set",6,[["operationid",3]]]]],[[["",0],["address",3]]],[[["",0],["slot",3],["slot",3]]],[[["",0],["set",6,[["address",3]]]]],[[["",0]]],[[["",0]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[["",0],["vec",3,[["privatekey",3]]]]],[[["",0],["set",6,[["address",3]]]]],null,[[["consensuseventreceiver",3]]],[[["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[["",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["consensusmanagementcommand",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["senderror",3,[["consensusevent",4]]]]],[[["executionerror",4]]],[[["joinerror",3]]],[[["protocolerror",4]]],[[["timeerror",4]]],[[["proofofstakeerror",4]]],[[]],[[["grapherror",4]]],[[["box",3,[["protocolerror",4]]]]],[[["error",3]]],[[["error",3]]],[[["poolerror",4]]],[[["modelserror",4]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["consensusevent",4]],[[["",0],["",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["usize",0]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["consensussettings",3]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],null,null,[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,null,null,null,null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,null,[[]],[[]],[[]],[[["consensussettings",3]]],[[["consensussettings",3]]],[[]],null,null,null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[["vec",3,[["privatekey",3]]]],["namedtempfile",3]],[[["hashmap",3]],["namedtempfile",3]],[[["rollcounts",3]],["namedtempfile",3]],[[],["namedtempfile",3]]],"p":[[3,"ConsensusEventReceiver"],[3,"ConsensusCommandSender"],[3,"ConsensusManager"],[4,"ConsensusCommand"],[4,"ConsensusManagementCommand"],[13,"GetBootstrapState"],[13,"GetStats"],[13,"GetActiveStakers"],[13,"RegisterStakingPrivateKeys"],[13,"RemoveStakingAddresses"],[13,"GetStakingAddressses"],[13,"GetCliques"],[13,"GetRecentOperations"],[13,"GetBlockIdsByCreator"],[13,"GetEndorsementsByAddress"],[13,"GetAddressesInfo"],[13,"GetStakersProductionStats"],[13,"GetActiveBlock"],[13,"GetBlockStatus"],[13,"GetSelectionDraws"],[13,"GetEndorsementsById"],[13,"GetOperations"],[13,"GetBlockGraphStatus"],[4,"ConsensusError"],[4,"InternalError"],[13,"ExecutionError"],[13,"ModelsError"],[13,"ConfigError"],[13,"ProtocolError"],[13,"JoinError"],[13,"TimeError"],[13,"ContainerInconsistency"],[13,"SendChannelError"],[13,"ReceiveChannelError"],[13,"PoolError"],[13,"IOError"],[13,"SerdeError"],[13,"BlockCreationError"],[13,"TokioSendError"],[13,"ChannelError"],[13,"GraphError"],[13,"ProofOfStakeError"],[13,"TransactionError"],[4,"ConsensusEvent"],[3,"ConsensusSettings"],[3,"ConsensusConfig"],[3,"ConsensusWorkerChannels"],[3,"ConsensusChannels"]]},\
"massa_consensus_worker":{"doc":"Endorsements","t":[5],"n":["start_consensus_controller"],"q":["massa_consensus_worker"],"d":["Creates a new consensus controller."],"i":[0],"f":[[[["consensusconfig",3],["consensuschannels",3],["option",4,[["exportproofofstake",3]]],["option",4,[["bootstrapablegraph",3]]],["i64",0]]]],"p":[]},\
"massa_execution":{"doc":"","t":[12,12,12,13,3,13,13,4,3,3,4,4,3,4,3,3,3,13,13,13,13,13,13,3,3,13,13,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,5,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["0","0","0","BlockCliqueChanged","BootstrapExecutionState","ChannelError","ExecuteReadOnlyRequest","ExecutionCommand","ExecutionCommandSender","ExecutionConfigs","ExecutionError","ExecutionEvent","ExecutionEventReceiver","ExecutionManagementCommand","ExecutionManager","ExecutionSettings","ExecutionWorker","FileError","GetBootstrapState","GetSCELedgerForAddresses","GetSCOutputEvents","JoinError","ModelsError","SCELedger","SCELedgerEntry","TimeError","TransferToConsensus","apply_changes","apply_entry_update","balance","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clock_compensation","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drain","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","execute_read_only_request","final_ledger","final_slot","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_balances_map","from_bytes_compact","from_bytes_compact","from_bytes_compact","genesis_timestamp","get_bootstrap_state","get_filtered_sc_output_event","get_sce_ledger_for_addresses","init","init","init","init","init","init","init","init","init","init","init","init","init","initial_sce_ledger_path","into","into","into","into","into","into","into","into","into","into","into","into","into","max_final_events","new","opt_module","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","reset_to_final","run_loop","serialize","serialize","serialize","serialize","serialize","settings","source","start_controller","stop","t0","thread_count","to_bytes_compact","to_bytes_compact","to_bytes_compact","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_blockclique","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","address","addresses","blockclique","bytecode","emitter_address","end","finalized_blocks","max_gas","original_caller_address","original_operation_id","response_tx","response_tx","result_sender","simulated_gas_price","start","0","0","0","0"],"q":["massa_executionmassa_execution::ExecutionCommand","","","","","","","","","","","","","","","","massa_execution::ExecutionError","","",""],"d":["","","","The clique has changed, contains the blocks of the new …","","Channel error","Execute bytecode in read-only mode","Commands sent to the <code>execution</code> component.","A sender of execution commands.","","Errors of the execution component.","","A receiver of execution events.","Management commands sent to the <code>execution</code> component.","A sender of execution management commands.","Execution setting parsed with .toml in …","","File error","Get a snapshot of the current state for bootstrap","","Get events optionnally filtered by:","Join error","crypto error: {0}","SCE ledger","an entry in the SCE ledger","time error: {0}","A coin transfer from the SCE ledger to the CSS ledger.","applies ledger changes to ledger","applies an entry update to self","","","","","","","","","","","","","","","","","","","","","","","","","","","","clock compensation in milliseconds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","drains remaining events and returns them in a VecDeque …","","","","","","","","","","","","","","Execute code in read-only mode.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","creates an SCELedger from a hashmap of balances","","","","Genesis timestmap","","Get events optionnally filtered by:","","","","","","","","","","","","","","","Initial SCE ledger file","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","maximum number of SC output events kept in cache","","","","","","","","","","","","","","","","asks the VM to reset to its final state","","","","","","","Execution settings","","Creates a new execution controller.","","period duration","Thread count","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","notify of a blockclique change","","","","","","","","","","","","","","","The address, or a default random one if none is provided, …","","","The code to execute.","","","","Maximum gas spend in execution.","","","","","The channel used to send the result of execution.","The simulated price of gas for the read-only execution.","","","","",""],"i":[1,2,3,4,0,5,4,0,0,0,0,0,0,0,0,0,0,5,4,4,4,5,5,0,0,5,6,3,7,7,1,8,6,9,10,2,5,11,7,3,12,13,4,1,8,6,9,10,2,5,11,7,3,12,13,4,13,2,11,7,3,12,13,2,11,7,3,12,13,7,7,3,12,13,1,8,6,9,10,2,5,11,7,3,12,13,4,1,8,6,9,10,2,5,11,7,3,12,13,4,1,8,6,9,10,2,5,11,11,7,7,3,3,12,12,13,13,4,1,1,8,6,9,10,2,5,11,7,3,12,13,4,2,11,11,5,5,11,7,3,12,13,4,1,8,6,9,10,2,5,5,5,11,7,3,12,13,4,3,11,7,3,13,2,2,2,1,8,6,9,10,2,5,11,7,3,12,13,4,12,1,8,6,9,10,2,5,11,7,3,12,13,4,12,10,7,1,8,6,9,10,2,5,11,7,3,12,13,4,10,10,11,7,3,12,13,13,5,0,8,13,13,11,7,3,2,11,7,3,12,13,5,1,8,6,9,10,2,5,11,7,3,12,13,4,1,8,6,9,10,2,5,11,7,3,12,13,4,1,8,6,9,10,2,5,11,7,3,12,13,4,2,1,8,6,9,10,2,5,11,7,3,12,13,4,14,15,16,17,15,18,18,17,15,18,18,18,16,15,15,18,19,20,21,22],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["sceledgerchanges",3]]],[[["",0],["sceledgerentryupdate",3]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["executioncommandsender",3]],[[["",0]],["bootstrapexecutionstate",3]],[[["",0]],["sceledgerentry",3]],[[["",0]],["sceledger",3]],[[["",0]],["executionsettings",3]],[[["",0]],["executionconfigs",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["sceledgerentry",3]],[[],["sceledger",3]],[[],["executionsettings",3]],[[]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["u64",0],["amount",3],["vec",3,[["u8",0]]],["option",4,[["address",3]]]]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["modelserror",4]]],[[["timeerror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["map",6,[["address",3],["amount",3]]]]],[[],["result",4,[["modelserror",4]]]],[[],["result",4,[["modelserror",4]]]],[[],["result",4,[["modelserror",4]]]],null,[[["",0]]],[[["",0],["option",4,[["slot",3]]],["option",4,[["slot",3]]],["option",4,[["address",3]]],["option",4,[["address",3]]],["option",4,[["operationid",3]]]]],[[["vec",3,[["address",3]]]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["executionconfigs",3],["unboundedsender",3,[["executionevent",4]]],["receiver",3,[["executioncommand",4]]],["receiver",3,[["executionmanagementcommand",4]]],["option",4,[["bootstrapexecutionstate",3]]]],["result",4,[["executionworker",3],["executionerror",4]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[["",0]],["option",4,[["error",8]]]],[[["executionconfigs",3],["option",4,[["bootstrapexecutionstate",3]]]]],[[]],null,null,[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["map",6,[["blockid",3],["block",3]]],["map",6,[["blockid",3],["block",3]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"ExecutionEventReceiver"],[3,"ExecutionCommandSender"],[3,"SCELedger"],[4,"ExecutionCommand"],[4,"ExecutionError"],[4,"ExecutionEvent"],[3,"SCELedgerEntry"],[3,"ExecutionManager"],[4,"ExecutionManagementCommand"],[3,"ExecutionWorker"],[3,"BootstrapExecutionState"],[3,"ExecutionSettings"],[3,"ExecutionConfigs"],[13,"GetBootstrapState"],[13,"ExecuteReadOnlyRequest"],[13,"GetSCELedgerForAddresses"],[13,"BlockCliqueChanged"],[13,"GetSCOutputEvents"],[13,"ChannelError"],[13,"ModelsError"],[13,"TimeError"],[13,"FileError"]]},\
"massa_graph":{"doc":"","t":[13,13,3,3,3,3,4,13,4,3,13,13,13,13,13,3,13,4,13,13,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,0,0,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,13,13,13,4,6,13,13,4,13,4,13,13,6,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,12,12,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,12,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,12,12,11,11,12,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11],"n":["Active","Active","BlockGraph","BlockGraphExport","BlockStateAccumulator","BootstrapableGraph","DiscardReason","Discarded","ExportBlockStatus","ExportCompiledBlock","Final","Final","Final","Incoming","Invalid","LedgerDataExport","Stale","Status","WaitingForDependencies","WaitingForSlot","active_blocks","active_blocks","best_parents","best_parents","block_state_accumulator_init","block_state_sync_rolls","block_state_try_apply","block_state_try_apply_op","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","candidate_data","children","clone","clone","clone","clone","clone","clone","clone","clone","clone_all_final_blocks","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compute_max_cliques","create_genesis_block","cycle_roll_updates","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","discarded_blocks","drop","drop","drop","drop","drop","drop","drop","drop","drop","endorsers_addresses","eq","eq","equivalent","equivalent","error","export_active_block","export_bootstrap_graph","extract_from","final_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes_compact","genesis_blocks","get_active_block","get_attack_attempts","get_best_parents","get_block_ids_by_creator","get_block_wishlist","get_blockclique","get_blocks_to_propagate","get_clique_count","get_cliques","get_endorsement_by_address","get_endorsement_by_id","get_export_block_status","get_genesis_block_ids","get_latest_final_blocks_periods","get_ledger_at_parents","get_ledger_data_export","get_new_final_blocks","get_new_stale_blocks","get_operations","get_operations_involving_address","get_roll_data_at_parent","gi_head","gi_head","gi_head","header","incoming_block","incoming_header","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","is_final","latest_final_blocks_periods","latest_final_blocks_periods","ledger","ledger","ledger_changes","ledger_thread_subset","loaded_ledger_addrs","loaded_roll_addrs","max_cliques","max_cliques","ne","new","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prune","roll_counts","roll_updates","same_thread_parent_creator","same_thread_parent_cycle","serialize","serialize","serialize","serialize","serialize","serialize","settings","slot_tick","to_bytes_compact","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","AmountOverflowError","ContainerInconsistency","ExecutionError","FitnessOverflow","GenesisCreationError","GraphError","GraphResult","IOError","IOError","InternalError","InvalidLedgerChange","LedgerError","LedgerError","LedgerInconsistency","LedgerResult","MissingBlock","ModelsError","ModelsError","PosCycleUnavailable","ProofOfStakeError","SerdeError","SerdeError","SledError","SledTransactionError","TransactionError","TransactionError","TryFromSliceError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","into","into","into","pointer_metadata","pointer_metadata","pointer_metadata","source","source","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","ExportActiveBlock","block","block_ledger_changes","borrow","borrow_mut","children","clone","clone_into","dependencies","deref","deref_mut","deserialize","deserialize","drop","fmt","from","from","from_bytes_compact","init","into","is_final","parents","pointer_metadata","production_events","roll_updates","serialize","to_bytes_compact","to_owned","try_from","try_into","type_id","vzip","0","Ledger","LedgerSubset","OperationLedgerInterface","apply_change","apply_changes","apply_final_changes","borrow","borrow","borrow_mut","borrow_mut","chain","clear","clone","clone_into","clone_subset","contains","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","fmt","from","from","from_bytes_compact","from_export","get_data","get_final_balance","get_final_data","get_final_ledger_subset","get_involved_addresses","get_latest_final_periods","get_ledger_changes","init","init","into","into","new","pointer_metadata","pointer_metadata","read_genesis_ledger","read_whole","serialize","sync_from","to_bytes_compact","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","GraphConfig","LedgerConfig","block_reward","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","delta_f0","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","endorsement_count","fmt","fmt","force_keep_final_periods","from","from","from","future_block_processing_max_periods","genesis_key","init","init","initial_ledger_path","initial_ledger_path","into","into","ledger_cache_capacity","ledger_cache_capacity","ledger_flush_interval","ledger_flush_interval","ledger_path","ledger_path","max_dependency_blocks","max_discarded_blocks","max_future_processing_blocks","max_item_return_count","operation_validity_periods","periods_per_cycle","pointer_metadata","pointer_metadata","roll_price","serialize","serialize","thread_count","thread_count","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["massa_graphmassa_graph::DiscardReason","massa_graph::ExportBlockStatus","","","massa_graph::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_graph::error::GraphError","","","","","","","","","","","massa_graph::error::InternalError","massa_graph::error::LedgerError","","","","","","","massa_graph::export_active_block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_graph::ledger","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_graph::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Aggregated changes made during a block’s execution","","","","Block status in the graph that can be exported.","The block version that can be exported. Note that the …","Block has enough fitness.","","","","Block is invalid, either structurally, or because of some …","","Block is incompatible with a final block.","","","","Map of active blocks, were blocks are in their exported …","Map of active blocks, were blocks are in their exported …","Best parents hashe in each thread.","Best parents hashe in each thread.","initializes a block state accumulator from a block header","loads missing block state rolls if available","try to apply ledger/roll changes to a block state …","Try to apply an operation in the context of the block","","","","","","","","","","","","","","","","","","","Candidate data","For (i, set) in children, set contains the headers’ …","","","","","","","","","Clones all stored final blocks, not only the still-useful …","","","","","","","","","Computes max cliques of compatible blocks","Creates genesis block in given thread.","Roll updates that happened during current cycle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Finite cache of discarded blocks, in exported version.","","","","","","","","","","Addresses of that block endorsers","","","","","","","","Conversion from blockgraph.","Final data","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Genesis blocks.","Gets whole compiled block corresponding to given hash, if …","Get the hashes of objects that were attack attempts. Must …","Gets best parents.","Returns the list of block IDs created by a given address, …","get the current block wishlist","","Get the headers to be propagated. Must be called by the …","","Gets the list of cliques.","","","","","Gets latest final blocks (hash, period) for each thread.","Compute ledger subset after given parents for given …","gets Ledger data export for given Addressees","Get the ids of blocks that became final. Must be called by …","Get the ids of blocks that became stale. Must be called by …","Retrieves operations from operation Ids","","for algo see pos.md if addrs_opt is Some(addrs), restrict …","Incompatibility graph: maps a block id to the block ids it …","Head of the incompatibility graph.","Head of the incompatibility graph.","Header of the corresponding block.","A new block has come","A new header has come !","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Active or final","Latest final period and block hash in each thread.","Latest final period and block hash in each thread.","","Ledger at last final blocks","Cumulative changes made during that block execution","Subset of the ledger. Contains only data in the thread of …","Addresses impacted by ledger updates","Addresses impacted by roll updates","List of maximal cliques of compatible blocks.","List of maximal cliques of compatible blocks.","","Creates a new block_graph.","","","","","","","","","","prune and return final blocks, return discarded final …","Current roll counts for these addresses","Roll updates that happened during that block execution","Address of the parent in the same thread","Cycle of the parent in the same thread","","","","","","","","signal new slot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","amount overflow","there was an inconsistency between containers {0}","execution error: {0}","fitness overflow","Could not create genesis block {0}","","Result used in the graph","io error {0}","io error {0}","","invalid ledger change: {0}","","Ledger error {0}","ledger inconsistency error {0}","Result used in the ledger","missing block","models error: {0}","models error: {0}","Proof of stake cycle unavailable {0}","Proof of Stake error {0}","serde error","serde error","sled error: {0}","sled error {0}","transaction error {0}","transaction error {0}","try from slice error {0}","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Exportable version of ActiveBlock Fields that can be …","The block itself, as it was created","Changes caused by this block","","","one HashMap&lt;Block id, period&gt; per thread (blocks that need …","","","dependencies required for validity check","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","ie has its fitness reached the given threshold","one (block id, period) per thread ( if not genesis )","","list of (period, address, did_create) for all …","Address -&gt; RollUpdate","","","","","","","","","Here we map an address to its balance. When a balance …","","Ledger specific method on operations","Applies given change to that ledger subset note: a failure …","apply ledger changes note: a failure may still leave the …","Atomically apply a batch of changes to the ledger. All …","","","","","Applies thread changes change to that ledger subset note: …","To empty the db.","","","clone subset","If subset contains given address","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","If there is something in the ledger file, it is overwritten","Get the data for given address","Returns the final balance of an address. 0 if the address …","Returns the final ledger data of a list of unique …","Gets ledger at latest final blocks for query_addrs","List involved addresses","returns the final periods.","Retrieve and aggregate ledger specific changes in the …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","if no latest_final_periods in file, they are initialized …","","","Read the initial ledger.","Used for bootstrap. Note: this cannot be done …","","merge another ledger subset into self, overwriting …","Example","","","","","","","","","","","","","","","","","","","","","","Threshold for fitness.","","","","","","","","","","","","","","force keep at least this number of final periods in RAM …","Returns the argument unchanged.","","Returns the argument unchanged.","If a block  is future_block_processing_max_periods periods …","Private_key to sign genesis blocks.","","","path to ledger db","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","path to ledger db","path to ledger db (todo: static thing?)","Maximum number of blocks allowed in …","Maximum number of blocks allowed in discarded blocks.","Maximum number of blocks allowed in FutureIncomingBlocks.","","Maximum operation validity period count","cycle duration in periods","","","","","","Number of threads","Number of threads","","","","","","","","","",""],"i":[1,2,0,0,0,0,0,1,0,0,3,1,2,1,3,0,3,0,1,1,4,5,4,5,6,6,6,6,6,4,7,3,1,8,2,5,9,6,4,7,3,1,8,2,5,9,9,8,4,7,3,1,8,2,5,9,6,4,7,3,1,8,2,5,9,6,0,7,9,6,4,7,3,1,8,2,5,9,6,4,7,3,1,8,2,5,9,6,4,4,7,3,3,1,1,8,8,2,2,5,9,9,5,6,4,7,3,1,8,2,5,9,7,3,2,3,2,0,0,6,5,9,4,7,3,1,8,2,5,9,6,4,7,3,1,8,2,5,9,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,5,8,6,6,6,4,7,3,1,8,2,5,9,6,4,7,3,1,8,2,5,9,8,4,5,0,4,7,7,7,7,4,5,3,6,6,4,7,3,1,8,2,5,9,6,7,7,7,7,4,3,1,8,2,9,0,6,4,4,7,3,1,8,2,5,9,6,4,7,3,1,8,2,5,9,6,4,7,3,1,8,2,5,9,6,4,7,3,1,8,2,5,9,6,4,7,3,1,8,2,5,9,10,11,12,13,14,15,15,15,15,0,0,15,14,0,15,0,15,14,0,15,15,14,15,15,15,14,14,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,15,16,16,14,14,15,15,15,15,15,15,15,16,14,14,14,14,14,14,14,15,16,14,15,16,14,15,16,14,15,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,0,0,0,37,37,38,38,37,38,37,37,38,37,37,37,37,37,38,37,38,37,38,37,37,38,37,37,38,37,37,38,37,38,38,38,37,38,39,38,37,38,37,38,38,37,0,38,37,37,37,37,38,37,37,38,37,38,37,38,37,0,0,40,41,40,41,40,41,40,41,40,40,41,40,41,40,41,41,40,40,41,40,40,41,40,40,41,41,40,40,40,41,40,41,40,41,40,41,40,41,40,41,40,40,40,40,40,40,40,41,40,40,41,40,41,40,41,40,41,40,41,40,41,40,41,40],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["blockheader",3],["proofofstake",3]],["result",6,[["blockstateaccumulator",3]]]],[[["",0],["blockstateaccumulator",3],["blockheader",3],["proofofstake",3],["set",6]],["result",6]],[[["",0],["blockstateaccumulator",3],["blockheader",3],["option",4,[["ledgerchanges",3]]],["option",4,[["rollupdates",3]]],["proofofstake",3]],["result",6]],[[["",0],["blockstateaccumulator",3],["blockheader",3],["operation",3],["proofofstake",3]],["result",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["",0]],["bootstrapablegraph",3]],[[["",0]],["blockstateaccumulator",3]],[[["",0]],["discardreason",4]],[[["",0]],["exportblockstatus",4]],[[["",0]],["exportcompiledblock",3]],[[["",0]],["status",4]],[[["",0]],["blockgraphexport",3]],[[["",0]],["ledgerdataexport",3]],[[["",0]],["map",6,[["blockid",3],["block",3]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["vec",3,[["set",6,[["blockid",3]]]]]],[[["graphconfig",3],["u8",0]],["result",6]],null,[[],["ledgerdataexport",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[],["result",4]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[],["result",4]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],null,[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,[[["",0],["discardreason",4]],["bool",0]],[[["",0],["status",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],null,null,[[["",0]],["result",6,[["bootstrapablegraph",3]]]],[[["blockgraph",3],["option",4,[["slot",3]]],["option",4,[["slot",3]]]]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["modelserror",4]]]],null,[[["",0],["blockid",3]],["option",4,[["activeblock",3]]]],[[["",0]],["vec",3,[["blockid",3]]]],[[["",0]],["vec",3]],[[["",0],["address",3]],["map",6,[["blockid",3],["status",4]]]],[[["",0]],["result",6,[["set",6,[["blockid",3]]]]]],[[["",0]],["set",6,[["blockid",3]]]],[[["",0]],["map",6,[["blockid",3]]]],[[["",0]],["usize",0]],[[["",0]],["vec",3,[["clique",3]]]],[[["",0],["address",3]],["result",6,[["map",6,[["endorsementid",3],["endorsement",3]]]]]],[[["",0],["set",6,[["endorsementid",3]]]],["result",6,[["map",6,[["endorsementid",3],["endorsementinfo",3]]]]]],[[["",0],["blockid",3]],["option",4,[["exportblockstatus",4]]]],[[["",0]],["vec",3]],[[["",0]],["vec",3]],[[["",0],["set",6]],["result",6,[["ledgersubset",3]]]],[[["",0],["set",6]],["result",6,[["ledgerdataexport",3]]]],[[["",0]],["set",6,[["blockid",3]]]],[[["",0]],["map",6,[["blockid",3]]]],[[["",0],["set",6]],["map",6,[["operationid",3],["operationsearchresult",3]]]],[[["",0],["address",3]],["result",6,[["map",6,[["operationid",3],["operationsearchresult",3]]]]]],[[["",0],["blockid",3],["option",4,[["set",6]]],["proofofstake",3]],["result",6]],null,null,null,null,[[["",0],["blockid",3],["block",3],["map",6,[["operationid",3]]],["map",6,[["endorsementid",3],["u32",0]]],["proofofstake",3],["option",4,[["slot",3]]]],["result",6]],[[["",0],["blockid",3],["blockheader",3],["proofofstake",3],["option",4,[["slot",3]]]],["result",6]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["",0],["discardreason",4]],["bool",0]],[[["graphconfig",3],["option",4,[["bootstrapablegraph",3]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["result",6,[["map",6,[["blockid",3],["activeblock",3]]]]]],null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[["",0],["proofofstake",3],["option",4,[["slot",3]]]],["result",6]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["executionerror",4]]],[[["ledgererror",4]]],[[["proofofstakeerror",4]]],[[]],[[["error",3]]],[[["error",3]]],[[["modelserror",4]]],[[]],[[["tryfromsliceerror",3]]],[[["modelserror",4]]],[[["transactionerror",4,[["internalerror",4]]]]],[[["error",3]]],[[["error",3]]],[[]],[[["error",4]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["exportactiveblock",3]],[[["",0],["",0]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["activeblock",3]]],[[],["result",6,[["modelserror",4]]]],[[],["usize",0]],[[]],null,null,[[]],null,null,[[["",0]],["result",4]],[[["",0]],["result",6,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,[[["",0],["address",3],["ledgerchange",3]],["result",6]],[[["",0],["ledgerchanges",3]],["result",6]],[[["",0],["u8",0],["ledgerchanges",3],["u64",0]],["result",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["ledgerchanges",3]],["result",6]],[[["",0]],["result",6]],[[["",0]],["ledgersubset",3]],[[["",0],["",0]]],[[["",0],["set",6]]],[[["",0],["address",3]],["bool",0]],[[],["ledgersubset",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0],["",0]],["result",4,[["with",3]]]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["result",6,[["modelserror",4]]]],[[["ledgersubset",3],["vec",3,[["u64",0]]],["ledgerconfig",3]],["result",6,[["ledger",3]]]],[[["",0],["address",3]],["ledgerdata",3]],[[["",0],["address",3]],["result",6,[["amount",3]]]],[[["",0],["set",6,[["address",3]]]],["result",6,[["ledgersubset",3]]]],[[["",0],["set",6]],["result",6,[["ledgersubset",3]]]],[[["",0]],["set",6,[["address",3]]]],[[["",0]],["result",6,[["vec",3,[["u64",0]]]]]],[[["",0],["address",3],["vec",3,[["address",3]]],["address",3],["amount",3],["u32",0]],["result",6,[["ledgerchanges",3]]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[["ledgerconfig",3],["option",4,[["ledgersubset",3]]]],["result",6,[["ledger",3]]]],[[]],[[]],[[["ledgerconfig",3]]],[[["",0]],["result",6,[["ledgersubset",3]]]],[[["",0]],["result",4]],[[["",0],["set",6],["ledgersubset",3]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["ledger",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["ledgerconfig",3]],[[["",0]],["graphconfig",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["usize",0]]],[[["usize",0]]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,[[]],[[["graphconfig",3]]],[[]],null,null,[[],["usize",0]],[[],["usize",0]],null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,[[["",0]],["result",4]],[[["",0]],["result",4]],null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]]],"p":[[4,"ExportBlockStatus"],[4,"Status"],[4,"DiscardReason"],[3,"BootstrapableGraph"],[3,"BlockGraphExport"],[3,"BlockGraph"],[3,"BlockStateAccumulator"],[3,"ExportCompiledBlock"],[3,"LedgerDataExport"],[13,"Invalid"],[13,"Active"],[13,"Final"],[13,"Discarded"],[4,"LedgerError"],[4,"GraphError"],[4,"InternalError"],[13,"ExecutionError"],[13,"ModelsError"],[13,"GenesisCreationError"],[13,"ContainerInconsistency"],[13,"InvalidLedgerChange"],[13,"IOError"],[13,"SerdeError"],[13,"ProofOfStakeError"],[13,"PosCycleUnavailable"],[13,"LedgerError"],[13,"TransactionError"],[13,"TransactionError"],[13,"LedgerInconsistency"],[13,"SledError"],[13,"SledTransactionError"],[13,"ModelsError"],[13,"TryFromSliceError"],[13,"IOError"],[13,"SerdeError"],[3,"ExportActiveBlock"],[3,"LedgerSubset"],[3,"Ledger"],[8,"OperationLedgerInterface"],[3,"GraphConfig"],[3,"LedgerConfig"]]},\
"massa_hash":{"doc":"","t":[13,17,4,13,13,11,11,11,11,11,11,0,11,11,11,11,11,11,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["EngineError","HASH_SIZE_BYTES","MassaHashError","ParsingError","WrongPrefix","borrow","borrow_mut","fmt","fmt","from","from","hash","into","source","to_string","try_from","try_into","type_id","0","0","0","1","Hash","borrow","borrow_mut","clone","clone_into","cmp","compute_from","deserialize","eq","fmt","fmt","from","from_bs58_check","from_bytes","from_str","hash","into","into_bytes","ne","partial_cmp","serialize","to_bs58_check","to_bytes","to_owned","to_string","try_from","try_into","type_id"],"q":["massa_hash","","","","","","","","","","","","","","","","","","massa_hash::MassaHashError","","","","massa_hash::hash","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["error forwarded by engine: {0}","","","parsing error : {0}","Wrong prefix for hash: expected {0}, got {1}","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Compute a hash from data.","::serde::Deserialize trait for Hash if the deserializer is …","","","","Returns the argument unchanged.","Deserialize using bs58 encoding with checksum.","Deserialize a Hash as bytes.","","","Calls <code>U::from(self)</code>.","Convert into bytes.","","","::serde::Serialize trait for Hash if the serializer is …","Serialize a Hash using bs58 encoding with checksum.","Serialize a Hash as bytes.","","","","",""],"i":[1,0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,2,3,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["error",4]]],[[]],null,[[]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["hash",3]],[[["",0],["",0]]],[[["",0],["hash",3]],["ordering",4]],[[]],[[["deserializer",8]],["result",4,[["hash",3]]]],[[["",0],["hash",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["str",0]],["result",4,[["hash",3],["massahasherror",4]]]],[[],["result",4,[["hash",3],["massahasherror",4]]]],[[["str",0]],["result",4]],[[["",0],["",0]]],[[]],[[]],[[["",0],["hash",3]],["bool",0]],[[["",0],["hash",3]],["option",4,[["ordering",4]]]],[[["",0],["serializer",8]],["result",4]],[[["",0]],["string",3]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[4,"MassaHashError"],[13,"ParsingError"],[13,"EngineError"],[13,"WrongPrefix"],[3,"Hash"]]},\
"massa_logging":{"doc":"","t":[14],"n":["massa_trace"],"q":["massa_logging"],"d":[""],"i":[0],"f":[null],"p":[]},\
"massa_models":{"doc":"","t":[12,3,3,3,3,3,8,8,8,3,3,3,18,18,3,8,8,8,3,0,0,11,0,0,5,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,0,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,10,12,11,11,5,11,11,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,0,0,12,12,12,0,12,11,11,12,12,12,0,12,0,12,11,11,11,11,11,11,11,11,11,12,12,0,12,12,0,12,12,12,0,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,3,12,12,12,12,11,11,12,11,11,12,12,12,11,12,11,11,11,11,12,12,12,12,12,11,11,11,11,11,12,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,12,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,13,13,13,13,13,3,4,4,13,3,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,17,17,17,17,17,17,3,17,17,17,3,17,3,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,17,17,17,3,12,11,11,5,11,11,0,11,0,12,11,12,11,11,11,12,11,12,12,12,12,12,12,11,12,12,11,11,11,11,11,17,17,17,17,17,17,17,17,17,3,17,3,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,17,17,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,3,17,17,17,17,17,17,17,17,3,17,17,17,3,3,17,17,17,17,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,17,17,17,17,17,17,17,3,17,17,3,17,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,4,6,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,3,13,4,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,3,3,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,3,3,3,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,8,3,6,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,3,3,3,12,12,11,11,11,11,11,11,12,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5],"n":["0","Block","BlockHeader","BlockHeaderContent","BlockId","CompactConfig","DeserializeCompact","DeserializeMinBEInt","DeserializeVarInt","Endorsement","EndorsementContent","EndorsementId","MIN_BE_INT_BASE_SIZE","MIN_BE_INT_BASE_SIZE","SerializationContext","SerializeCompact","SerializeMinBEInt","SerializeVarInt","Version","active_block","address","addresses_to_endorsements","amount","api","array_from_slice","be_bytes_min_length","block_reward","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_count","check_signature","clique","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","composite","compute_block_id","compute_endorsement_id","compute_hash","compute_hash","const_default","constants","contains_operation","content","content","creator","default","delta_f0","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","end_timestamp","endorsed_block","endorsement_count","endorsements","eq","eq","eq","error","execution","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_be_bytes_min","from_bs58_check","from_bs58_check","from_bytes","from_bytes","from_bytes_compact","from_bytes_compact","from_bytes_compact","from_bytes_compact","from_bytes_compact","from_bytes_compact","from_bytes_compact","from_str","from_str","from_str","from_varint_bytes","from_varint_bytes_bounded","genesis_timestamp","get_first_bit","get_roll_involved_addresses","get_serialization_context","hash","hash","header","index","init_serialization_context","into","into","into","into","into","into","into","into","into","into_bytes","into_bytes","involved_addresses","is_compatible","ledger_models","max_advertise_length","max_ask_blocks_per_message","max_block_size","max_block_size","max_bootstrap_blocks","max_bootstrap_children","max_bootstrap_cliques","max_bootstrap_deps","max_bootstrap_message_size","max_bootstrap_pos_cycles","max_bootstrap_pos_entries","max_endorsements_per_message","max_message_size","max_operations_per_block","max_operations_per_message","ne","ne","ne","new_signed","new_signed","node","operation","operation_merkle_root","operation_validity_periods","operations","output_event","parents","partial_cmp","partial_cmp","periods_per_cycle","pos_lock_cycles","pos_lookback_cycles","prehash","roll_price","rolls","sender_public_key","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","signature","slot","slot","slot","stats","t0","thread_count","thread_count","timeslots","to_be_bytes_min","to_bytes","to_bytes","to_bytes_compact","to_bytes_compact","to_bytes_compact","to_bytes_compact","to_bytes_compact","to_bytes_compact","to_bytes_compact","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_varint_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u8_from_slice","verify_signature","verify_signature","verify_slot_hash_signature","with_serialization_context","ActiveBlock","addresses_to_endorsements","addresses_to_operations","block","block_ledger_changes","borrow","borrow_mut","children","clone","clone_into","creator_address","dependencies","descendants","deserialize","endorsement_ids","fitness","fmt","from","into","is_final","operation_set","parents","production_events","roll_updates","serialize","to_owned","try_from","try_into","type_id","0","Address","AddressCycleProductionStats","AddressState","Addresses","addrs","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cycle","deserialize","deserialize","deserialize","deserialize","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bs58_check","from_bytes","from_public_key","from_str","get_thread","hash","into","into","into","into","into_bytes","is_final","ledger_info","ne","nok_count","ok_count","partial_cmp","production_stats","rolls","serialize","serialize","serialize","serialize","to_bs58_check","to_bytes","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Amount","borrow","borrow_mut","checked_add","checked_div_u64","checked_mul_u64","checked_sub","clone","clone_into","cmp","default","deserialize","eq","fmt","fmt","from","from_bytes_compact","from_raw","from_str","into","is_zero","ne","partial_cmp","saturating_add","saturating_mul_u64","saturating_sub","serialize","to_bytes_compact","to_owned","to_raw","to_string","try_from","try_into","type_id","zero","APISettings","AddressInfo","BlockInfo","BlockInfoContent","BlockSummary","CompactAddressInfo","EndorsementInfo","EventFilter","IndexedSlot","LedgerInfo","NodeStatus","OperationInfo","ReadOnlyExecution","RollsInfo","SCELedgerInfo","TimeInterval","active_rolls","address","address","address","balance","balance","bind_private","bind_public","block","block_draws","blocks_created","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytecode","candidate_ledger_info","candidate_rolls","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compact","config","connected_nodes","consensus_stats","content","creator","current_cycle","current_time","datastore","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","draw_lookahead_period_count","emitter_address","end","end","endorsement","endorsement_draws","eq","extend","final_ledger_info","final_rolls","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","id","id","id","id","in_blocks","in_blocks","in_pool","in_pool","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","involved_in_endorsements","involved_in_operations","is_final","is_final","is_final","is_final","is_in_blockclique","is_in_blockclique","is_stale","is_stale","last_slot","ledger_info","locked_balance","max_arguments","max_gas","module","ne","network_stats","next_slot","node_id","node_ip","operation","original_caller_address","original_operation_id","parents","pool_stats","production_stats","rolls","rolls","sce_balance","sce_ledger_info","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","simulated_gas_price","slot","slot","start","start","thread","thread","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","Clique","block_ids","borrow","borrow_mut","clone","clone_into","deserialize","fitness","fmt","from","from_bytes_compact","into","is_blockclique","serialize","to_bytes_compact","to_owned","try_from","try_into","type_id","Active","Discarded","Discarded","InBlock","Incoming","OperationSearchResult","OperationSearchResultBlockStatus","OperationSearchResultStatus","Pending","PubkeySig","StakersCycleProductionStats","Stored","WaitingForDependencies","WaitingForSlot","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cycle","deserialize","deserialize","deserialize","deserialize","deserialize","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","in_blocks","in_pool","into","into","into","into","into","is_final","ok_nok_counts","op","public_key","serialize","serialize","serialize","serialize","serialize","signature","status","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","ADDRESS_SIZE_BYTES","AMOUNT_DECIMAL_FACTOR","BLOCK_ID_SIZE_BYTES","BLOCK_REWARD","BOOTSTRAP_RANDOMNESS_SIZE_BYTES","CHANNEL_SIZE","CompactConfig","DELTA_F0","ENDORSEMENT_COUNT","ENDORSEMENT_ID_SIZE_BYTES","END_TIMESTAMP","EVENT_ID_SIZE_BYTES","GENESIS_KEY","GENESIS_TIMESTAMP","HANDSHAKE_RANDOMNESS_SIZE_BYTES","INITIAL_DRAW_SEED","IP_LIST_MAX_SIZE","MAX_ADVERTISE_LENGTH","MAX_ASK_BLOCKS_PER_MESSAGE","MAX_BLOCK_SIZE","MAX_BOOTSTRAP_BLOCKS","MAX_BOOTSTRAP_CHILDREN","MAX_BOOTSTRAP_CLIQUES","MAX_BOOTSTRAP_DEPS","MAX_BOOTSTRAP_MESSAGE_SIZE","MAX_BOOTSTRAP_POS_CYCLES","MAX_BOOTSTRAP_POS_ENTRIES","MAX_DUPLEX_BUFFER_SIZE","MAX_ENDORSEMENTS_PER_MESSAGE","MAX_GAS_PER_BLOCK","MAX_MESSAGE_SIZE","MAX_OPERATIONS_PER_BLOCK","MAX_OPERATIONS_PER_MESSAGE","NODE_SEND_CHANNEL_SIZE","OPERATION_ID_SIZE_BYTES","OPERATION_VALIDITY_PERIODS","PERIODS_PER_CYCLE","POS_LOCK_CYCLES","POS_LOOKBACK_CYCLES","POS_MISS_RATE_DEACTIVATION_THRESHOLD","ROLL_PRICE","SLOT_KEY_SIZE","T0","THREAD_COUNT","VERSION","block_reward","borrow","borrow_mut","build_massa_settings","clone","clone_into","default","default","default_testing","delta_f0","deserialize","end_timestamp","fmt","fmt","from","genesis_timestamp","into","max_block_size","operation_validity_periods","periods_per_cycle","pos_lock_cycles","pos_lookback_cycles","roll_price","serialize","t0","thread_count","to_owned","to_string","try_from","try_into","type_id","ADDRESS_SIZE_BYTES","AMOUNT_DECIMAL_FACTOR","BLOCK_ID_SIZE_BYTES","BLOCK_REWARD","BOOTSTRAP_RANDOMNESS_SIZE_BYTES","CHANNEL_SIZE","DELTA_F0","ENDORSEMENT_COUNT","ENDORSEMENT_ID_SIZE_BYTES","END_TIMESTAMP","EVENT_ID_SIZE_BYTES","GENESIS_KEY","GENESIS_TIMESTAMP","HANDSHAKE_RANDOMNESS_SIZE_BYTES","INITIAL_DRAW_SEED","IP_LIST_MAX_SIZE","MAX_ADVERTISE_LENGTH","MAX_ASK_BLOCKS_PER_MESSAGE","MAX_BLOCK_SIZE","MAX_BOOTSTRAP_BLOCKS","MAX_BOOTSTRAP_CHILDREN","MAX_BOOTSTRAP_CLIQUES","MAX_BOOTSTRAP_DEPS","MAX_BOOTSTRAP_MESSAGE_SIZE","MAX_BOOTSTRAP_POS_CYCLES","MAX_BOOTSTRAP_POS_ENTRIES","MAX_DUPLEX_BUFFER_SIZE","MAX_ENDORSEMENTS_PER_MESSAGE","MAX_GAS_PER_BLOCK","MAX_MESSAGE_SIZE","MAX_OPERATIONS_PER_BLOCK","MAX_OPERATIONS_PER_MESSAGE","NODE_SEND_CHANNEL_SIZE","OPERATION_ID_SIZE_BYTES","OPERATION_VALIDITY_PERIODS","PERIODS_PER_CYCLE","POS_LOCK_CYCLES","POS_LOOKBACK_CYCLES","POS_MISS_RATE_DEACTIVATION_THRESHOLD","ROLL_PRICE","SLOT_KEY_SIZE","T0","THREAD_COUNT","VERSION","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","from","from","from","from","from","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","ADDRESS_SIZE_BYTES","AMOUNT_DECIMAL_FACTOR","BASE_NETWORK_CONTROLLER_IP","BLOCK_DB_PRUNE_INTERVAL","BLOCK_ID_SIZE_BYTES","BLOCK_REWARD","BOOTSTRAP_RANDOMNESS_SIZE_BYTES","CHANNEL_SIZE","DELTA_F0","DISABLE_BLOCK_CREATION","ENDORSEMENT_COUNT","ENDORSEMENT_ID_SIZE_BYTES","END_TIMESTAMP","EVENT_ID_SIZE_BYTES","FORCE_KEEP_FINAL_PERIOD","FUTURE_BLOCK_PROCESSING_MAX_PERIODS","GENESIS_KEY","GENESIS_TIMESTAMP","HANDSHAKE_RANDOMNESS_SIZE_BYTES","INITIAL_DRAW_SEED","IP_LIST_MAX_SIZE","LEDGER_CACHE_CAPACITY","LEDGER_FLUSH_INTERVAL","LEDGER_RESET_AT_STARTUP","MAX_ADVERTISE_LENGTH","MAX_ASK_BLOCKS_PER_MESSAGE","MAX_BLOCK_SIZE","MAX_BOOTSTRAP_BLOCKS","MAX_BOOTSTRAP_CHILDREN","MAX_BOOTSTRAP_CLIQUES","MAX_BOOTSTRAP_DEPS","MAX_BOOTSTRAP_MESSAGE_SIZE","MAX_BOOTSTRAP_POS_CYCLES","MAX_BOOTSTRAP_POS_ENTRIES","MAX_DEPENDENCY_BLOCK","MAX_DISCARED_BLOCKS","MAX_DUPLEX_BUFFER_SIZE","MAX_ENDORSEMENTS_PER_MESSAGE","MAX_FUTURE_PROCESSING_BLOCK","MAX_GAS_PER_BLOCK","MAX_ITEM_RETURN_COUNT","MAX_MESSAGE_SIZE","MAX_OPERATIONS_PER_BLOCK","MAX_OPERATIONS_PER_MESSAGE","MAX_OPERATION_FILL_ATTEMPTS","MAX_SEND_WAIT","NODE_SEND_CHANNEL_SIZE","OPERATION_BATCH_SIZE","OPERATION_ID_SIZE_BYTES","OPERATION_VALIDITY_PERIODS","PERIODS_PER_CYCLE","POS_DRAW_CACHED_CYCLE","POS_LOCK_CYCLES","POS_LOOKBACK_CYCLES","POS_MISS_RATE_DEACTIVATION_THRESHOLD","ROLL_PRICE","SLOT_KEY_SIZE","STATS_TIMESPAN","T0","THREAD_COUNT","VERSION","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AmountOverflowError","AmountParseError","BufferError","CheckedOperationError","DeserializeError","HashError","InavalidVersionError","InvalidLedgerChange","InvalidRollUpdate","MassaHashError","ModelsError","ModelsResult","PeriodOverflowError","SerializeError","ThreadOverflowError","TimeError","TimeOverflowError","WrongPrefix","borrow","borrow_mut","fmt","fmt","from","from","from","into","source","to_string","try_from","try_into","type_id","0","0","0","0","0","0","0","0","0","0","0","1","Error","ExecuteReadOnlyResponse","Ok","ReadOnlyResult","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","executed_at","fmt","fmt","fmt","from","from","into","into","output_events","result","serialize","serialize","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","LedgerChange","LedgerChanges","LedgerData","add_reward","apply","apply_change","balance","balance_delta","balance_increment","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chain","chain","clone","clone","clone","clone_into","clone_into","clone_into","clone_subset","default","default","default","deserialize","deserialize","deserialize","fmt","fmt","fmt","from","from","from","from_bytes_compact","from_bytes_compact","get_involved_addresses","into","into","into","is_nil","is_nil","new","serialize","serialize","serialize","sync_from","to_bytes_compact","to_bytes_compact","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","NodeId","borrow","borrow_mut","clone","clone_into","cmp","deserialize","eq","fmt","fmt","from","from_str","hash","into","ne","partial_cmp","serialize","to_owned","to_string","try_from","try_into","type_id","ExecuteSC","Operation","OperationContent","OperationId","OperationType","RollBuy","RollSell","Transaction","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","content","deserialize","deserialize","deserialize","deserialize","eq","expire_period","fee","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bs58_check","from_bytes","from_bytes_compact","from_bytes_compact","from_bytes_compact","from_str","get_ledger_involved_addresses","get_operation_id","get_roll_involved_addresses","get_validity_range","hash","into","into","into","into","into_bytes","ne","op","partial_cmp","sender_public_key","serialize","serialize","serialize","serialize","signature","to_bytes","to_bytes_compact","to_bytes_compact","to_bytes_compact","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify_integrity","verify_signature","amount","coins","data","gas_price","max_gas","recipient_address","roll_count","roll_count","0","EventExecutionContext","SCOutputEvent","SCOutputEventId","block","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_stack","clone","clone","clone","clone_into","clone_into","clone_into","cmp","context","data","deserialize","deserialize","deserialize","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bs58_check","from_bytes","from_str","hash","id","index_in_slot","into","into","into","into_bytes","ne","origin_operation_id","partial_cmp","read_only","serialize","serialize","serialize","slot","to_bs58_check","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BuildMap","Map","PreHashed","PreHashedMap","Set","borrow","borrow_mut","default","finish","from","into","try_from","try_into","type_id","write","0","0","0","RollCompensation","RollCounts","RollUpdate","RollUpdates","apply","apply_updates","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_subset","clone_subset","compensate","default","default","deserialize","deserialize","deserialize","deserialize","fmt","fmt","fmt","fmt","from","from","from","from","from_bytes_compact","get_involved_addresses","into","into","into","into","is_empty","is_nil","len","new","roll_purchases","roll_sales","serialize","serialize","serialize","serialize","sync_from","sync_from","to_bytes_compact","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Slot","borrow","borrow_mut","clone","clone_into","cmp","deserialize","eq","fmt","fmt","from","from_bytes_compact","from_bytes_key","get_cycle","get_first_bit","get_next_slot","hash","into","ne","new","partial_cmp","period","serialize","thread","to_bytes_compact","to_bytes_key","to_owned","to_string","try_from","try_into","type_id","ConsensusStats","NetworkStats","PoolStats","active_node_count","banned_peer_count","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clique_count","clone","clone_into","deserialize","deserialize","deserialize","end_timespan","endorsement_count","final_block_count","final_operation_count","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","in_connection_count","into","into","into","known_peer_count","operation_count","out_connection_count","serialize","serialize","serialize","staker_count","stale_block_count","start_timespan","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","get_block_slot_timestamp","get_current_latest_block_slot","get_latest_block_slot_at_timestamp","slot_count_in_range","time_range_to_slot_range"],"q":["massa_modelsmassa_models::active_block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::amount","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::apimassa_models::clique","","","","","","","","","","","","","","","","","","","massa_models::composite","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::composite::OperationSearchResultStatus","massa_models::constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::constants::default","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::constants::default_testing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::error::ModelsError","","","","","","","","","","","","massa_models::execution","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::execution::ReadOnlyResult","massa_models::ledger_models","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::node","","","","","","","","","","","","","","","","","","","","","","","massa_models::operation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::operation::OperationType","","","","","","","","massa_models::output_event","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::prehash","","","","","","","","","","","","","","","massa_models::rolls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::slot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::stats","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::timeslots","","","",""],"d":["","","","","","Compact representation of key values of consensus …","","","","","","","","","a context for model serialization/deserialization","","","","Application version, checked during handshakes","","","","","","","Compute the minimal big endian deserialization size","Reward amount for a block creation","","","","","","","","","","","","","","","","","","","","Verify the signature of the header","","","","","","","","","","","","","","","","","","","","","","","Generate the block id without verifying the integrity of …","","","","","Expose constants","","","","","","Threshold for fitness.","","","","","","","","","","TESTNET: time when the blockclique is ended.","hash of endorsed block","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a minimally sized big endian integer to Self …","","","","","","","","","","","","","","","Deserialize variable size integer to Self from the …","Deserialize variable size integer to Self from the …","Time in millis when the blockclique started.","","Retrieve roll involving addresses","Get a clone of the context. For tests only.","","","","endorsement index inside the block","Initialize the global context, should be called once at …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","retrieves a mapping of addresses to the list of operation …","","","","","Max total size of a block","","","","","","","","","","","","","","","","","","","","","Maximum operation validity period count","","","","","","cycle duration in periods","PoS lock cycles: when some rolls are released, we only …","PoS lookback cycles: when drawing for cycle N, we use the …","","Price of a roll on the network","","Public key of the endorser.","","","","","","","","","","","","","","slot of endorsed block","","Time between the periods in the same thread.","Number of threads","","warning: assumes thread_count &gt;= 1, t0_millis &gt;= 1, …","serializes with the minimal amount of big endian bytes","","","","","","","","","","","","","","","","","","","","","","","","","","Serialize as varint bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify the signature and integrity of the endorsement and …","","Use the tls context, should be called only after …","Block that was checked as final, with some useful …","Maps addresses to endorsements id they are involved in","Maps addresses to operations id they are involved in","The block itself, as it was created","Changes caused by this block","","","one HashMap&lt;Block id, period&gt; per thread (blocks that need …","","","The creator’s address","dependencies required for validity check","Blocks id that have this block as an ancestor","","IDs of the endorsements to index in block","Computes the fitness of the block","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","ie has its fitness reached the given threshold","index in the block, end of validity period","one (block id, period) per thread ( if not genesis )","list of (period, address, did_create) for all …","Address -&gt; RollUpdate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Example","Example","Computes address associated with given public key","","Gets the associated thread. Depends on the thread_count","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Example","","","","","","","","","","","","","Example","Example","","","","","","","","","","","","","","","","","","A structure representing a decimal Amount of coins with …","","","safely add self to another amount, returning None on …","safely divide self by a u64, returning None if the factor …","safely multiply self with a u64, returning None on overflow","safely substact another amount from self, returning None …","","","","","","","","","Returns the argument unchanged.","","constructs an Amount from the underlying raw u64 …","","Calls <code>U::from(self)</code>.","returns true if the amount is zero","","","safely add self to another amount, saturating the result …","safely multiply self with a u64, saturating the result on …","safely substact another amount from self, saturating the …","","","","Obtains the underlying raw u64 representation Warning:do …","","","","","Create a zero Amount","","","","","","","","","When an address is drawn to create an endorsement it is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Example","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Safe to import","","Block reward is given for each block creation","Size of the random bytes array used for the bootstrap, …","","Compact representation of key values of consensus …","Threshold for fitness.","Number of endorsement","","TESTNET: time when the blockclique is ended.","Size of the event id hash used in execution module, safe …","Private_key to sign genesis blocks.","Time in millis when the blockclique started.","Length of the handshake random signature","Proof of stake seed for the initial draw","Max size of the IP list","Limit on the number of peers we advertise to others.","Max number of hash in the message AskForBlocks","Maximum block size in bytes","Max number of blocks we provide/ take into account while …","Max number of child nodes","","","Max message size for bootstrap","Max number of cycles in PoS bootstrap","Max number of address and rng entries for PoS bootstrap","","Max number of endorsements per message","Maximum of GAS allowed for a block","Maximum message length in bytes","Maximum number of operations per block","Max number of operations per message","","","Maximum operation validity period count","cycle duration in periods","PoS lock cycles: when some rolls are released, we only …","PoS lookback cycles: when drawing for cycle N, we use the …","number of cycle misses (strictly) above which stakers are …","Price of a roll in the network","","Time between the periods in the same thread.","Number of threads","","Reward amount for a block creation","","","","","","DEFAULT VALUES USED TO INITIALISE DIVERS CONFIGURATIONS …","","DEFAULT VALUES USED TO INITIALISE DIVERS CONFIGURATIONS …","Threshold for fitness.","","TESTNET: time when the blockclique is ended.","","","Returns the argument unchanged.","Time in millis when the blockclique started.","Calls <code>U::from(self)</code>.","Max total size of a block","Maximum operation validity period count","cycle duration in periods","PoS lock cycles: when some rolls are released, we only …","PoS lookback cycles: when drawing for cycle N, we use the …","Price of a roll on the network","","Time between the periods in the same thread.","Number of threads","","","","","","","Safe to import","","Block reward is given for each block creation","Size of the random bytes array used for the bootstrap, …","","Threshold for fitness.","Number of endorsement","","TESTNET: time when the blockclique is ended.","Size of the event id hash used in execution module, safe …","Private_key to sign genesis blocks.","Time in millis when the blockclique started.","Length of the handshake random signature","Proof of stake seed for the initial draw","Max size of the IP list","Limit on the number of peers we advertise to others.","Max number of hash in the message AskForBlocks","Maximum block size in bytes","Max number of blocks we provide/ take into account while …","Max number of child nodes","","","Max message size for bootstrap","Max number of cycles in PoS bootstrap","Max number of address and rng entries for PoS bootstrap","","Max number of endorsements per message","Maximum of GAS allowed for a block","Maximum message length in bytes","Maximum number of operations per block","Max number of operations per message","","","Maximum operation validity period count","cycle duration in periods","PoS lock cycles: when some rolls are released, we only …","PoS lookback cycles: when drawing for cycle N, we use the …","number of cycle misses (strictly) above which stakers are …","Price of a roll in the network","","Time between the periods in the same thread.","Number of threads","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Size of the random bytes array used for the bootstrap, …","Safe to import","","","","","","","","","","","TESTNET: time when the blockclique is ended.","","","","","Time in millis when the blockclique started.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Ledger changes, Amount overflow","amount parse error","buffer error: {0}","checked operation error","Deserialization error: {0}","hashing error","invalid version identifier: {0}","invalid ledger change: {0}","invalid roll update: {0}","massa_hash error: {0}","","","period overflow error","Serialization error: {0}","thread overflow error","Time error {0}","Time overflow error","Wrong prefix for hash: expected {0}, got {1}","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","An error occured during execution.","The response to a request for a read-only execution.","The result of a sucessful execution. TODO: specify result.","The result of the read-only execution.","","","","","","","","","","","The slot at which the read-only execution occured.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The output events generated by the read-only execution.","The result fo the read-only execution.","","","","","","","","","","","","","","A balance change that can be applied to an address","Map an address to a LedgerChange","","add reward related changes","applies a LedgerChange","","","Amount to add or substract","whether to increment or decrement balance of delta","","","","","","","Applies another ledger change on top of self","chain with another LedgerChange","","","","","","","clone subset","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","returns true if the balance is zero","","","","","","merge another ledger changes into self, overwriting …","","","","","","","","","","","","","","","","NodeId wraps a public key to uniquely identify a node.","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Execute a smart contract.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies the signature and integrity of the operation and …","","","Extra coins that are spent by consensus and are available …","Smart contract bytecode.","The price per unit of gas that the caller is willing to …","The maximum amount of gas that the execution of the …","","","","","Context of the event (not generated by the user)","By product of a byte code execution","","block id if there was a block at that slot","","","","","","","most recent at the end","","","","","","","","context generated by the execution context","json data string","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Example","Example","","","event id computed from if it is read only, the slot, the …","index of the event in the slot","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Example","","origin operation id","","if the event was generated during a read only execution","","","","when was it generated","Example","Example","","","","","","","","","","","","","","","","BuildHasherDefault specialization for PreHashedMap","HashMap specialization for PreHashed keys This hashmap is …","A trait indicating that its carrier is already a hash with …","A Hasher for PreHashed keys that is faster because it …","HashSet specialization for PreHashed keys This hashset is …","","","","finish the hashing process and return the truncated u64 …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","write the bytes of a PreHashed key into the PreHashedMap …","","","","","","","","applies a RollUpdate, compensates and returns compensation","applies RollUpdates to self with compensations","","","","","","","","","chains with another RollUpdates, compensates and returns …","","","","","","","","","get the roll update for a subset of addresses","get roll counts for a subset of addresses.","compensate a roll update, return compensation count","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","merge another roll updates into self, overwriting existing …","merge another roll counts into self, overwriting existing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes from a compact representation","Deserializes a slot from its fixed-size sortable binary …","","","Returns the next Slot","","Calls <code>U::from(self)</code>.","","","","","","","Returns a compact binary representation of the slot","Returns a fixed-size sortable binary key","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Gets timestamp in millis for given slot.","Returns the thread and block slot index of the current …","Returns the thread and block period index of the latest …","Counts the number of slots in a slot range [a, b)","Turns an MassaTime range [start, end) with optional …"],"i":[1,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,3,0,0,0,2,4,1,3,5,6,7,8,9,10,11,1,3,5,6,7,8,9,10,11,3,6,0,1,3,5,6,7,8,9,10,11,1,3,5,6,7,8,9,10,11,1,7,0,6,8,5,9,10,0,3,6,8,5,10,4,1,3,5,6,7,8,9,10,11,4,9,10,5,1,7,11,0,0,1,1,3,3,5,5,6,6,7,7,8,8,9,10,11,11,1,3,5,6,7,8,9,10,11,2,1,7,1,7,12,3,5,6,8,9,11,1,7,11,13,13,4,1,3,0,1,7,3,9,0,1,3,5,6,7,8,9,10,11,1,7,3,11,0,10,10,4,10,10,10,10,10,10,10,10,10,10,10,10,1,7,11,6,8,0,0,5,4,3,0,5,1,7,4,4,4,0,4,0,9,1,3,5,6,7,8,9,10,11,6,8,0,5,9,0,4,4,10,0,14,1,7,15,3,5,6,8,9,11,1,3,5,6,7,8,9,10,11,1,3,5,6,7,8,11,16,1,3,5,6,7,8,9,10,11,1,3,5,6,7,8,9,10,11,1,3,5,6,7,8,9,10,11,0,6,8,6,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,0,0,0,0,19,18,19,20,21,18,19,20,21,18,19,20,21,18,19,20,21,18,20,18,19,20,21,18,18,18,19,20,21,18,19,20,21,18,18,18,18,18,18,18,19,20,21,18,20,21,18,20,20,18,21,21,18,19,20,21,18,18,18,19,20,21,18,18,19,20,21,18,19,20,21,18,19,20,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,24,25,26,27,25,28,28,29,24,24,30,31,32,23,27,24,33,25,34,35,29,36,37,28,38,26,30,31,32,23,27,24,33,25,34,35,29,36,37,28,38,26,26,32,23,32,23,27,34,37,28,38,26,32,23,27,34,37,28,38,26,24,30,30,30,35,36,30,30,27,27,30,31,32,23,27,24,33,34,35,29,36,37,28,38,26,28,38,37,38,34,24,33,31,32,23,30,30,31,31,32,32,23,23,27,27,24,24,33,33,25,34,34,35,35,29,36,36,37,28,38,26,30,31,32,23,27,24,33,25,34,35,29,36,37,28,38,26,33,31,34,35,36,31,34,31,34,33,30,31,32,23,27,24,33,25,34,35,29,36,37,28,38,26,24,24,31,34,29,36,29,36,29,36,30,24,32,28,26,27,33,30,30,30,30,31,38,38,36,30,24,24,25,25,24,30,31,32,23,27,24,33,25,34,35,29,36,37,38,26,26,33,36,37,38,24,25,32,23,27,34,37,28,38,26,30,31,32,23,27,24,33,25,34,35,36,30,31,32,23,27,24,33,25,34,35,29,36,37,28,38,26,30,31,32,23,27,24,33,25,34,35,29,36,37,28,38,26,30,31,32,23,27,24,33,25,34,35,29,36,37,28,38,26,30,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,40,41,41,40,0,0,0,41,0,0,40,40,40,40,41,42,43,44,40,41,42,43,44,40,41,42,43,40,41,42,43,43,40,41,42,43,44,42,40,41,42,43,44,44,40,41,42,43,44,42,42,40,41,42,43,44,43,43,42,44,40,41,42,43,44,44,42,40,41,42,43,44,40,41,42,43,44,40,41,42,43,44,40,41,42,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,0,4,4,0,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,52,53,54,55,56,57,58,59,51,52,53,54,55,56,57,58,59,51,52,53,54,55,56,57,58,59,51,52,53,54,55,56,57,58,59,51,52,53,54,55,56,57,58,59,51,52,53,54,55,56,57,58,59,51,52,53,54,55,56,57,58,59,51,52,53,54,55,56,57,58,59,60,60,60,60,60,60,60,60,60,60,0,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,61,62,63,64,65,66,67,68,69,70,71,71,72,0,72,0,72,73,72,73,72,73,72,73,72,73,73,72,73,73,72,73,72,73,73,73,72,73,72,73,73,72,73,72,73,72,73,74,75,0,0,0,75,75,76,76,77,77,76,77,75,76,77,75,77,75,76,77,75,76,77,75,75,76,77,75,76,77,75,76,77,75,76,77,75,76,77,75,76,77,75,76,77,76,76,77,75,75,76,77,76,77,75,76,77,75,76,77,75,76,77,75,78,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,79,0,0,0,0,79,79,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,80,81,82,79,80,82,82,80,80,81,81,82,82,79,79,80,81,82,79,80,80,81,82,79,80,81,81,81,81,80,80,81,82,79,80,80,82,80,82,80,81,82,79,81,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,79,81,81,83,84,84,84,84,83,85,86,87,0,0,0,88,89,87,88,89,87,88,88,89,87,88,89,87,88,87,89,89,89,87,88,87,89,89,87,87,88,88,89,87,88,87,87,87,87,89,88,89,87,88,87,87,88,87,88,89,87,88,88,87,87,89,87,88,89,87,88,89,87,88,89,87,88,89,87,88,0,0,0,0,0,90,90,90,90,90,90,90,90,90,90,91,92,93,0,0,0,0,92,93,91,94,92,93,91,94,92,93,92,91,94,92,93,91,94,92,93,92,93,94,92,93,91,94,92,93,91,94,92,93,91,94,92,93,94,92,91,94,92,93,93,94,93,93,94,94,91,94,92,93,92,93,94,91,94,92,93,91,94,92,93,91,94,92,93,91,94,92,93,0,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,0,0,0,96,96,96,97,98,96,97,98,97,97,97,96,97,98,97,98,97,97,96,96,97,97,98,98,96,97,98,96,96,97,98,96,98,96,96,97,98,97,97,97,97,96,97,98,96,97,98,96,97,98,96,97,98,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["map",6]],["result",4,[["map",6,[["address",3],["set",6,[["endorsementid",3]]]]],["modelserror",4]]]],null,null,[[],["result",4,[["modelserror",4]]]],[[],["usize",0]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",4,[["u64",0],["modelserror",4]]]],[[["",0]],["result",4,[["modelserror",4]]]],null,[[["",0]],["blockid",3]],[[["",0]],["block",3]],[[["",0]],["blockheadercontent",3]],[[["",0]],["blockheader",3]],[[["",0]],["endorsementid",3]],[[["",0]],["endorsement",3]],[[["",0]],["endorsementcontent",3]],[[["",0]],["serializationcontext",3]],[[["",0]],["version",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["blockid",3]],["ordering",4]],[[["",0],["endorsementid",3]],["ordering",4]],null,[[["",0]],["result",4,[["blockid",3],["modelserror",4]]]],[[["",0]],["result",4,[["endorsementid",3],["modelserror",4]]]],[[["",0]],["result",4,[["hash",3],["modelserror",4]]]],[[["",0]],["result",4,[["hash",3],["modelserror",4]]]],[[]],null,[[["",0],["operation",3]],["result",4,[["bool",0],["modelserror",4]]]],null,null,null,[[]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["version",3]]]],null,null,null,null,[[["",0],["blockid",3]],["bool",0]],[[["",0],["endorsementid",3]],["bool",0]],[[["",0],["version",3]],["bool",0]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["modelserror",4]]]],[[["str",0]],["result",4,[["blockid",3],["modelserror",4]]]],[[["str",0]],["result",4,[["endorsementid",3],["modelserror",4]]]],[[],["result",4,[["blockid",3],["modelserror",4]]]],[[],["result",4,[["endorsementid",3],["modelserror",4]]]],[[],["result",4,[["modelserror",4]]]],[[],["result",4,[["modelserror",4]]]],[[],["result",4,[["modelserror",4]]]],[[],["result",4,[["modelserror",4]]]],[[],["result",4,[["modelserror",4]]]],[[],["result",4,[["modelserror",4]]]],[[],["result",4,[["modelserror",4]]]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[],["result",4,[["modelserror",4]]]],[[],["result",4,[["modelserror",4]]]],null,[[["",0]],["bool",0]],[[["",0]],["result",4,[["set",6,[["address",3]]],["modelserror",4]]]],[[],["serializationcontext",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[["serializationcontext",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["map",6]],["result",4,[["map",6,[["address",3],["set",6,[["operationid",3]]]]],["modelserror",4]]]],[[["",0],["version",3]],["bool",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["blockid",3]],["bool",0]],[[["",0],["endorsementid",3]],["bool",0]],[[["",0],["version",3]],["bool",0]],[[["privatekey",3],["blockheadercontent",3]],["result",4,[["modelserror",4]]]],[[["privatekey",3],["endorsementcontent",3]],["result",4,[["modelserror",4]]]],null,null,null,null,null,null,null,[[["",0],["blockid",3]],["option",4,[["ordering",4]]]],[[["",0],["endorsementid",3]],["option",4,[["ordering",4]]]],null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,null,null,null,null,null,null,null,null,null,[[],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]]],[[["",0]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["vec",3,[["u8",0]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4,[["u8",0],["modelserror",4]]]],[[["",0],["hash",3]],["result",4,[["modelserror",4]]]],[[["",0]],["result",4,[["modelserror",4]]]],[[["slot",3],["hash",3],["signature",3],["publickey",3]],["result",4,[["modelserror",4]]]],[[]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["activeblock",3]],[[["",0],["",0]]],null,null,null,[[],["result",4]],null,[[["",0]],["u64",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,null,null,null,null,[[["",0]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["address",3]],[[["",0]],["addresses",3]],[[["",0]],["addresscycleproductionstats",3]],[[["",0]],["addressstate",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["address",3]],["ordering",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["address",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4,[["address",3],["modelserror",4]]]],[[],["result",4,[["address",3],["modelserror",4]]]],[[["publickey",3]]],[[["str",0]],["result",4]],[[["",0],["u8",0]],["u8",0]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],null,null,[[["",0],["address",3]],["bool",0]],null,null,[[["",0],["address",3]],["option",4,[["ordering",4]]]],null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["string",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["amount",3]],["option",4]],[[["u64",0]],["option",4]],[[["u64",0]],["option",4]],[[["amount",3]],["option",4]],[[["",0]],["amount",3]],[[["",0],["",0]]],[[["",0],["amount",3]],["ordering",4]],[[],["amount",3]],[[],["result",4,[["amount",3]]]],[[["",0],["amount",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["result",4,[["modelserror",4]]]],[[["u64",0]]],[[["str",0]],["result",4]],[[]],[[["",0]],["bool",0]],[[["",0],["amount",3]],["bool",0]],[[["",0],["amount",3]],["option",4,[["ordering",4]]]],[[["amount",3]]],[[["u64",0]]],[[["amount",3]]],[[["",0]],["result",4]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]]],[[["",0]],["u64",0]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,null,null,[[["",0]],["ledgerinfo",3]],[[["",0]],["rollsinfo",3]],[[["",0]],["sceledgerinfo",3]],[[["",0]],["endorsementinfo",3]],[[["",0]],["timeinterval",3]],[[["",0]],["apisettings",3]],[[["",0]],["eventfilter",3]],[[["",0]],["readonlyexecution",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["compactaddressinfo",3]],null,null,null,null,null,null,null,null,[[],["sceledgerinfo",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,[[["",0],["indexedslot",3]],["bool",0]],[[["",0],["operationinfo",3]]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["",0]]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["indexedslot",3]],["bool",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["clique",3]],[[["",0],["",0]]],[[],["result",4]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[],["result",4,[["modelserror",4]]]],[[]],null,[[["",0]],["result",4]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["operationsearchresultblockstatus",4]],[[["",0]],["operationsearchresultstatus",4]],[[["",0]],["operationsearchresult",3]],[[["",0]],["stakerscycleproductionstats",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["operationsearchresult",3]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["str",0],["str",0]],["deserialize",8]],[[["",0]],["compactconfig",3]],[[["",0],["",0]]],null,[[]],null,null,[[],["result",4]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[]],null,null,null,null,null,null,[[["",0]],["result",4]],null,null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["massatime",3]],[[["",0]],["option",4]],[[["",0]],["privatekey",3]],[[["",0]],["ratio",3]],[[["",0]],["version",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["privatekey",3]],[[["",0]],["massatime",3]],[[["",0]],["option",4]],[[["",0]],["ratio",3]],[[["",0]],["version",3]],[[["",0]],["massatime",3]],[[["",0]],["option",4]],[[["",0]],["massatime",3]],[[["",0]],["massatime",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["timeerror",4]]],[[["massahasherror",4]]],[[]],[[]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["readonlyresult",4]],[[["",0]],["executereadonlyresponse",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4]],[[],["result",4]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0],["address",3],["vec",3,[["address",3]]],["address",3],["amount",3],["u32",0]],["result",6]],[[["",0],["address",3],["ledgerchange",3]],["result",6]],[[["",0],["ledgerchange",3]],["result",6]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["ledgerchange",3]],["result",6,[["modelserror",4]]]],[[["",0],["ledgerchanges",3]],["result",6]],[[["",0]],["ledgerdata",3]],[[["",0]],["ledgerchange",3]],[[["",0]],["ledgerchanges",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["set",6]]],[[],["ledgerdata",3]],[[]],[[],["ledgerchanges",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6,[["modelserror",4]]]],[[["",0]],["set",6,[["address",3]]]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["amount",3]],["ledgerdata",3]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["set",6],["ledgerchanges",3]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["nodeid",3]],[[["",0],["",0]]],[[["",0],["nodeid",3]],["ordering",4]],[[],["result",4]],[[["",0],["nodeid",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["str",0]],["result",4]],[[["",0],["",0]]],[[]],[[["",0],["nodeid",3]],["bool",0]],[[["",0],["nodeid",3]],["option",4,[["ordering",4]]]],[[["",0]],["result",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["operationid",3]],[[["",0]],["operation",3]],[[["",0]],["operationcontent",3]],[[["",0]],["operationtype",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["operationid",3]],["ordering",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["operationid",3]],["bool",0]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4,[["operationid",3],["modelserror",4]]]],[[],["result",4,[["operationid",3],["modelserror",4]]]],[[],["result",4,[["modelserror",4]]]],[[],["result",4,[["modelserror",4]]]],[[],["result",4,[["modelserror",4]]]],[[["str",0]],["result",4]],[[["",0]],["result",4,[["set",6,[["address",3]]],["modelserror",4]]]],[[["",0]],["result",4,[["operationid",3],["modelserror",4]]]],[[["",0]],["result",4,[["set",6,[["address",3]]],["modelserror",4]]]],[[["",0],["u64",0]],["rangeinclusive",3,[["u64",0]]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[["",0],["operationid",3]],["bool",0]],null,[[["",0],["operationid",3]],["option",4,[["ordering",4]]]],null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[["",0]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["result",4,[["operationid",3],["modelserror",4]]]],[[["",0]],["result",4,[["modelserror",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["scoutputevent",3]],[[["",0]],["scoutputeventid",3]],[[["",0]],["eventexecutioncontext",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["scoutputeventid",3]],["ordering",4]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["scoutputeventid",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["str",0]],["result",4,[["scoutputeventid",3],["modelserror",4]]]],[[],["result",4,[["scoutputeventid",3],["modelserror",4]]]],[[["str",0]],["result",4]],[[["",0],["",0]]],null,null,[[]],[[]],[[]],[[]],[[["",0],["scoutputeventid",3]],["bool",0]],null,[[["",0],["scoutputeventid",3]],["option",4,[["ordering",4]]]],null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[["",0]],["string",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["",0]],["u64",0]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]]],null,null,null,null,null,null,null,[[["",0],["address",3],["rollupdate",3]],["result",6,[["rollcompensation",3]]]],[[["",0],["rollupdates",3]],["result",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["rollupdates",3]],["result",6,[["map",6,[["address",3],["rollcompensation",3]]]]]],[[["",0]],["rollcompensation",3]],[[["",0]],["rollupdate",3]],[[["",0]],["rollupdates",3]],[[["",0]],["rollcounts",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["set",6]]],[[["",0],["set",6]]],[[["",0]],["rollcompensation",3]],[[],["rollupdates",3]],[[],["rollcounts",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",6]],[[["",0]],["set",6,[["address",3]]]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[]],null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["set",6],["rollupdates",3]]],[[["",0],["set",6],["rollcounts",3]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["slot",3]],[[["",0],["",0]]],[[["",0],["",0]],["ordering",4]],[[],["result",4]],[[["",0],["slot",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[],["result",4,[["modelserror",4]]]],[[]],[[["",0],["u64",0]],["u64",0]],[[["",0]],["bool",0]],[[["",0],["u8",0]],["result",4,[["slot",3],["modelserror",4]]]],[[["",0],["",0]]],[[]],[[["",0],["slot",3]],["bool",0]],[[["u64",0],["u8",0]],["slot",3]],[[["",0],["",0]],["option",4,[["ordering",4]]]],null,[[["",0]],["result",4]],null,[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["consensusstats",3]],[[["",0],["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[]],[[]],[[]],null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,null,null,[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["u8",0],["massatime",3],["massatime",3],["slot",3]],["result",4,[["massatime",3],["modelserror",4]]]],[[["u8",0],["massatime",3],["massatime",3],["i64",0]],["result",4,[["option",4,[["slot",3]]],["modelserror",4]]]],[[["u8",0],["massatime",3],["massatime",3],["massatime",3]],["result",4,[["option",4,[["slot",3]]],["modelserror",4]]]],[[["slot",3],["slot",3],["u8",0]],["result",4,[["u64",0],["modelserror",4]]]],[[["u8",0],["massatime",3],["massatime",3],["option",4,[["massatime",3]]],["option",4,[["massatime",3]]]],["result",4,[["modelserror",4]]]]],"p":[[3,"BlockId"],[8,"DeserializeMinBEInt"],[3,"Block"],[3,"CompactConfig"],[3,"BlockHeaderContent"],[3,"BlockHeader"],[3,"EndorsementId"],[3,"Endorsement"],[3,"EndorsementContent"],[3,"SerializationContext"],[3,"Version"],[8,"DeserializeCompact"],[8,"DeserializeVarInt"],[8,"SerializeMinBEInt"],[8,"SerializeCompact"],[8,"SerializeVarInt"],[3,"ActiveBlock"],[3,"Address"],[3,"Addresses"],[3,"AddressCycleProductionStats"],[3,"AddressState"],[3,"Amount"],[3,"RollsInfo"],[3,"AddressInfo"],[3,"CompactAddressInfo"],[3,"ReadOnlyExecution"],[3,"SCELedgerInfo"],[3,"APISettings"],[3,"BlockInfoContent"],[3,"NodeStatus"],[3,"OperationInfo"],[3,"LedgerInfo"],[3,"IndexedSlot"],[3,"EndorsementInfo"],[3,"BlockInfo"],[3,"BlockSummary"],[3,"TimeInterval"],[3,"EventFilter"],[3,"Clique"],[4,"OperationSearchResultBlockStatus"],[4,"OperationSearchResultStatus"],[3,"OperationSearchResult"],[3,"StakersCycleProductionStats"],[3,"PubkeySig"],[13,"InBlock"],[3,"GENESIS_TIMESTAMP"],[3,"END_TIMESTAMP"],[3,"GENESIS_KEY"],[3,"POS_MISS_RATE_DEACTIVATION_THRESHOLD"],[3,"VERSION"],[3,"GENESIS_KEY"],[3,"GENESIS_TIMESTAMP"],[3,"END_TIMESTAMP"],[3,"POS_MISS_RATE_DEACTIVATION_THRESHOLD"],[3,"VERSION"],[3,"BLOCK_DB_PRUNE_INTERVAL"],[3,"LEDGER_FLUSH_INTERVAL"],[3,"MAX_SEND_WAIT"],[3,"STATS_TIMESPAN"],[4,"ModelsError"],[13,"SerializeError"],[13,"DeserializeError"],[13,"BufferError"],[13,"MassaHashError"],[13,"AmountParseError"],[13,"CheckedOperationError"],[13,"InavalidVersionError"],[13,"InvalidLedgerChange"],[13,"TimeError"],[13,"InvalidRollUpdate"],[13,"WrongPrefix"],[4,"ReadOnlyResult"],[3,"ExecuteReadOnlyResponse"],[13,"Error"],[3,"LedgerChanges"],[3,"LedgerData"],[3,"LedgerChange"],[3,"NodeId"],[4,"OperationType"],[3,"OperationId"],[3,"Operation"],[3,"OperationContent"],[13,"Transaction"],[13,"ExecuteSC"],[13,"RollBuy"],[13,"RollSell"],[3,"SCOutputEventId"],[3,"EventExecutionContext"],[3,"SCOutputEvent"],[3,"PreHashedMap"],[3,"RollCompensation"],[3,"RollUpdates"],[3,"RollCounts"],[3,"RollUpdate"],[3,"Slot"],[3,"NetworkStats"],[3,"ConsensusStats"],[3,"PoolStats"]]},\
"massa_network":{"doc":"Manages a connection with a node","t":[12,12,12,12,13,13,13,13,13,13,13,13,3,13,13,4,3,6,13,3,3,3,6,6,13,13,13,13,13,13,13,13,6,13,13,13,4,3,4,4,3,3,13,13,13,3,13,3,3,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,11,12,12,12,12,12,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,0,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,12,12,12,11,11,11,11,12,11,11,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,12],"n":["0","0","0","0","ActiveConnectionMissing","AskForBlocks","AskedForBlocks","Ban","BanIp","Banned","BlockNotFound","BlockNotFound","BootstrapPeers","ChannelError","ConnectionClosed","ConnectionClosureReason","ConnectionId","Connector","ContainerInconsistencyError","DefaultConnector","DefaultEstablisher","DefaultListener","Establisher","Establisher","Failed","GeneralProtocolError","GetBootstrapPeers","GetPeers","GetStats","HandshakeError","IOError","InvalidIpError","Listener","MassaHashError","MissingPeersError","ModelsError","NetworkCommand","NetworkCommandSender","NetworkError","NetworkEvent","NetworkEventReceiver","NetworkManager","NewConnection","NodeSignMessage","Normal","Peer","PeerConnectionError","PeerInfo","Peers","ReadHalf","ReceivedBlock","ReceivedBlockHeader","ReceivedEndorsements","ReceivedOperations","SendBlock","SendBlockHeader","SendEndorsements","SendOperations","SerdeError","TimeError","TokieRecvError","TokioTaskJoinError","Unban","UnexpectedNodeCommandChannelClosure","UnexpectedWriterClosure","WriteHalf","WrongSignature","accept","active_in_connections","active_nodes","active_out_connection_attempts","active_out_connections","advertised","ask_for_block_list","ban","ban_ip","banned","block_not_found","bootstrap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","connect","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drain","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes_compact","get_bootstrap_peers","get_connector","get_listener","get_network_stats","get_peers","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ip","last_alive","last_failure","ne","new","node_sign_message","our_node_id","partial_cmp","peer_info","peers","send_block","send_block_header","send_endorsements","send_operations","serialize","serialize","serialize","serialize","serialize","serialize","settings","source","start_network_controller","stop","to_bytes_compact","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unban","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_event","0","0","0","0","0","block","block_id","endorsements","header","list","msg","node","node","node","node","node","operations","response_tx","response_tx","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","block","block_id","endorsements","header","list","node","node","node","node","node","operations","source_node_id","NetworkSettings","ask_peer_list_interval","ban_timeout","bind","borrow","borrow_mut","clone","clone_into","connect_timeout","deserialize","fmt","from","initial_peers_file","into","max_banned_peers","max_idle_peers","max_in_connection_overflow","max_in_connections_per_ip","max_in_nonbootstrap_connections","max_out_bootstrap_connection_attempts","max_out_nonbootstrap_connection_attempts","max_send_wait","message_timeout","peer_list_send_timeout","peers_file","peers_file_dump_interval","private_key_file","protocol_port","routable_ip","target_bootstrap_connections","target_out_nonbootstrap_connections","to_owned","try_from","try_into","type_id","vzip","wakeup_interval"],"q":["massa_networkmassa_network::NetworkCommand","","","","","","","","","","","","","","","","","","","massa_network::NetworkError","","","","","","","","","","","","","","massa_network::NetworkEvent","","","","","","","","","","","","","","massa_network::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Active connection missing:<code>{0}</code>","Ask for a block from a node.","Someone ask for block with given header hash.","","","Connection closed after node ban","","That node does not have this block","","An error occurred during channel communication: {0}","","","A unique connection id for a node","","container inconsistency error: {0}","Initiates a connection with given timeout in millis","Establishes a connection","The listener we are using","","","Connection failed for some reason","Protocol err:{0}","","","","handshake error:{0:?}","IO error : {0}","The ip:<code>{0}</code> address is not valid","","massa_hash error {0}","missing peers","models error: {0}","Commands that the worker can execute","","","","","","","","Connection was closed properly","","Error during network connection: {0}","All information concerning a peer is here","","","A block was received","A block header was received","","","Send that block to node.","Send a header to a node.","","","Serde error : {0}","Time error {0}","error receiving oneshot response : {0}","A tokio task has crashed err:{0}","","the network controller should not drop a node command …","the writer of a node should not drop its event sender …","","wrong signature","Accepts a new incoming connection from this listener.","Current number of active in connections with that peer. Isn…","","Current number of active out connection attempts with that …","Current number of active out connections with that peer. …","Whether peer was promoted through another peer","Send the order to ask for a block.","","","If peer is banned.","","If peer is boostrap, ie peer was in initial peer file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to connect to addr","","","","","","","","","drains remaining events and returns them in a VecDeque …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Send the order to get bootstrap peers.","Get the connector with associated timeout","Gets the associated listener","","Send the order to get peers.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Peer ip address.","Time in millis when peer was last alive","Time in millis of peer’s last failure","","Creates an Establisher.","Sign a message using the node’s private key","","","","","Send the order to send block.","Send the order to send block header.","","","","","","","","","","","Starts a new NetworkWorker in a spawned task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Network configuration","Every ask_peer_list_interval in millis we ask every one …","Time after which we forget a node","Where to listen for communications.","","","","","Time interval spent waiting for a response from a peer. In …","","","Returns the argument unchanged.","Path to the file containing initial peers.","Calls <code>U::from(self)</code>.","Limit on the number of banned peers we remember.","Limit on the number of idle peers we remember.","Max number of in connection overflowed managed by the …","Limit on the number of in connections per ip.","Limit on the number of in connections.","Limit on the number of simultaneout outgoing bootstrap …","Limit on the total current number of outgoing …","Max wait time for sending a Network or Node event.","After message_timeout millis we are no longer waiting on …","Timeout Duration when we send a PeerList in handshake","Path to the file containing known peers.","Peer database is dumped every peers_file_dump_interval in …","Path to the file containing our private_key","Protocol port","Our own IP if it is routable, else None.","Target number of bootstrap connections.","Target number of outgoing nonbootstrap connections.","","","","","","Network_worker will try to connect to available peers …"],"i":[1,2,3,4,5,6,7,6,6,8,6,7,0,5,7,0,0,0,5,0,0,0,0,0,8,5,6,6,6,5,5,5,0,5,5,5,0,0,0,0,0,0,7,6,8,0,5,0,0,0,7,7,7,7,6,6,6,6,5,5,5,5,6,5,5,0,5,9,10,11,10,10,10,3,3,3,10,3,10,1,12,2,8,5,9,13,14,3,6,11,15,7,4,10,1,12,2,8,5,9,13,14,3,6,11,15,7,4,10,2,8,3,11,15,4,10,2,8,3,11,15,4,10,2,13,2,14,2,8,11,15,4,10,1,2,8,2,2,8,5,5,9,13,14,6,11,15,7,4,10,1,12,2,8,5,5,5,5,5,5,5,5,9,13,14,3,6,11,15,7,4,10,4,3,14,14,3,3,2,1,12,2,8,5,9,13,14,3,6,11,15,7,4,10,10,10,10,2,14,3,15,2,11,15,3,3,3,3,2,8,11,15,4,10,0,5,0,12,4,2,8,3,11,15,4,10,2,5,1,12,2,8,5,9,13,14,3,6,11,15,7,4,10,1,12,2,8,5,9,13,14,3,6,11,15,7,4,10,1,12,2,8,5,9,13,14,3,6,11,15,7,4,10,3,1,12,2,8,5,9,13,14,3,6,11,15,7,4,10,1,16,17,18,19,20,21,22,23,24,25,26,21,24,22,27,23,27,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,45,49,46,50,47,50,48,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],null,null,null,null,null,[[["",0],["hashmap",3,[["nodeid",3],["vec",3,[["blockid",3]]]]]]],[[["",0],["nodeid",3]]],[[["",0],["vec",3,[["ipaddr",4]]]]],null,[[["",0],["nodeid",3],["blockid",3]]],nullconnectionid",3]],[[["",0]],["connectionclosurereason",4]],[[["",0]],["networkcommandsender",3]],[[["",0]],["peer",3]],[[["",0]],["peers",3]],[[["",0]],["bootstrappeers",3]],[[["",0]],["peerinfo",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["connectionid",3]],["ordering",4]],[[["",0],["socketaddr",4]]],[[],["connectionid",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["",0],["connectionid",3]],["bool",0]],[[["",0],["connectionclosurereason",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["modelserror",4]]],[[["timeerror",4]]],[[]],[[["massahasherror",4]]],[[["error",3]]],[[["error",3]]],[[["recverror",3]]],[[["joinerror",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["modelserror",4]]]],[[["",0]]],[[["",0],["massatime",3]]],[[["",0],["socketaddr",4]]],[[["",0]]],[[["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["",0],["connectionid",3]],["bool",0]],[[]],[[["",0],["vec",3,[["u8",0]]]]],null,[[["",0],["connectionid",3]],["option",4,[["ordering",4]]]],null,null,[[["",0],["nodeid",3],["block",3]]],[[["",0],["nodeid",3],["blockheader",3]]],[[["",0],["nodeid",3],["vec",3,[["endorsement",3]]]]],[[["",0],["nodeid",3],["vec",3,[["operation",3]]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[["",0]],["option",4,[["error",8]]]],[[["networksettings",3],["establisher",6],["i64",0],["option",4,[["bootstrappeers",3]]],["version",3]]],[[["networkeventreceiver",3]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["vec",3,[["ipaddr",4]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["networksettings",3]],[[["",0],["",0]]],null,[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null],"p":[[3,"NetworkEventReceiver"],[3,"ConnectionId"],[3,"NetworkCommandSender"],[3,"BootstrapPeers"],[4,"NetworkError"],[4,"NetworkCommand"],[4,"NetworkEvent"],[4,"ConnectionClosureReason"],[3,"DefaultListener"],[3,"PeerInfo"],[3,"Peer"],[3,"NetworkManager"],[3,"DefaultConnector"],[3,"DefaultEstablisher"],[3,"Peers"],[13,"GetPeers"],[13,"GetBootstrapPeers"],[13,"Ban"],[13,"BanIp"],[13,"Unban"],[13,"SendBlock"],[13,"BlockNotFound"],[13,"SendEndorsements"],[13,"SendBlockHeader"],[13,"AskForBlocks"],[13,"NodeSignMessage"],[13,"SendOperations"],[13,"GetStats"],[13,"GeneralProtocolError"],[13,"ChannelError"],[13,"TokioTaskJoinError"],[13,"TokieRecvError"],[13,"PeerConnectionError"],[13,"InvalidIpError"],[13,"ActiveConnectionMissing"],[13,"IOError"],[13,"SerdeError"],[13,"MassaHashError"],[13,"HandshakeError"],[13,"TimeError"],[13,"ModelsError"],[13,"ContainerInconsistencyError"],[13,"NewConnection"],[13,"ConnectionClosed"],[13,"ReceivedBlock"],[13,"BlockNotFound"],[13,"ReceivedEndorsements"],[13,"ReceivedBlockHeader"],[13,"AskedForBlocks"],[13,"ReceivedOperations"],[3,"NetworkSettings"]]},\
"massa_node":{"doc":"Massa: The Decentralized and Scaled Blockchain","t":[3,12,11,11,12,11,11,11,11,12,11,11,11,5,5,12,11,12,12,0,5,11,11,11,11,3,3,3,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Managers","bootstrap_manager","borrow","borrow_mut","consensus_manager","deref","deref_mut","deserialize","drop","execution_manager","from","init","into","launch","main","network_manager","pointer_metadata","pool_manager","protocol_manager","settings","stop","try_from","try_into","type_id","vzip","LoggingSettings","POOL_CONFIG","SETTINGS","Settings","__private_field","__private_field","api","bootstrap","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","consensus","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","execution","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","level","logging","network","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pool","protocol","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":["massa_node","","","","","","","","","","","","","","","","","","","","","","","","","massa_node::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","To instrument <code>massa-node</code> with <code>tokio-console</code> run","","","","","Build here the default node settings from the config file …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,2,3,4,4,2,3,5,4,2,3,5,4,5,4,5,4,4,2,2,3,3,5,4,2,3,5,4,2,3,5,5,4,4,2,3,5,4,4,5,4,2,3,5,4,2,3,5,4,2,3,5,4,5,4,4,2,3,5,4,4,4,5,4,2,3,5,4,2,3,5,4,2,3,5,4,2,3,5,4],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["usize",0]]],null,[[]],[[],["usize",0]],[[]],[[]],[[]],null,[[]],null,null,null,[[["consensuseventreceiver",3],["managers",3],["stophandle",3],["stophandle",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["loggingsettings",3]],[[["",0]],["settings",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["usize",0]],["",0]],[[["",0]],["settings",3]],[[["usize",0]],["",0]],[[["",0]],["poolconfig",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[],["result",4]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]]],"p":[[3,"Managers"],[3,"SETTINGS"],[3,"POOL_CONFIG"],[3,"Settings"],[3,"LoggingSettings"]]},\
"massa_pool":{"doc":"","t":[12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,3,4,3,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,12,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["0","AddEndorsements","AddOperations","ChannelError","ContainerInconsistency","FinalOperations","GetEndorsements","GetEndorsementsByAddress","GetEndorsementsById","GetOperationBatch","GetOperations","GetRecentOperations","GetStats","JoinError","ModelsError","PoolCommand","PoolCommandSender","PoolConfig","PoolError","PoolManager","PoolSettings","ProtocolError","UpdateCurrentSlot","UpdateLatestFinalPeriods","add_endorsements","add_operations","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deserialize","deserialize","final_operations","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_endorsements","get_endorsements_by_address","get_endorsements_by_id","get_operation_batch","get_operations","get_operations_involving_address","get_pool_stats","into","into","into","into","into","into","max_endorsement_count","max_item_return_count","max_operation_future_validity_start_periods","max_pool_size_per_thread","operation_validity_periods","serialize","serialize","settings","source","start_pool_controller","stop","thread_count","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update_current_slot","update_latest_final_periods","vzip","vzip","vzip","vzip","vzip","vzip","0","0","0","0","0","0","address","address","batch_size","creators","endorsements","exclude","max_size","operation_ids","parent","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","target_slot","target_slot","0","0","0","0","0"],"q":["massa_pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_pool::PoolCommand","","","","","","","","","","","","","","","","","","","","","","","massa_pool::PoolError","","","",""],"d":["","","","channel error : {0}","there was an inconsistency between containers","","","","","","","","","Join error {0}","models error: {0}","Commands that can be processed by pool.","","Pool configuration","","","Pool configuration, read from a file configuration","Protocol error {0}","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns a batch of operations ordered from highest to …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","max endorsement we keep in pool","Maximum number of item the pool can pop at a time","how many periods in the future can an op validity start ? …","max pool size per thread (in number of operations)","operation validity periods","","","Configuration set in file configuration (ex: <code>config.toml</code>)","","Creates a new pool controller.","","thread count","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,2,3,3,2,2,2,2,2,2,2,2,3,3,0,0,0,0,0,0,3,2,2,1,1,4,3,1,2,5,6,4,3,1,2,5,6,1,5,6,1,5,6,5,6,1,3,3,2,5,6,4,3,3,3,3,3,1,2,5,6,1,1,1,1,1,1,1,4,3,1,2,5,6,6,6,6,6,5,5,6,5,3,0,4,5,1,5,6,3,4,3,1,2,5,6,4,3,1,2,5,6,4,3,1,2,5,6,1,1,4,3,1,2,5,6,7,8,9,10,11,12,13,14,15,16,17,15,15,18,16,15,18,13,16,14,17,15,16,19,20,21,22,23],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["map",6,[["endorsementid",3],["endorsement",3]]]]],[[["",0],["map",6,[["operationid",3],["operation",3]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["poolcommandsender",3]],[[["",0]],["poolconfig",3]],[[["",0]],["poolsettings",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4]],[[],["result",4]],[[["",0],["map",6,[["operationid",3]]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["modelserror",4]]],[[["box",3,[["protocolerror",4]]]]],[[["joinerror",3]]],[[["protocolerror",4]]],[[]],[[]],[[]],[[]],[[]],[[["",0],["slot",3],["blockid",3],["vec",3,[["address",3]]]]],[[["",0],["address",3]]],[[["",0],["set",6,[["endorsementid",3]]]]],[[["",0],["slot",3],["set",6,[["operationid",3]]],["usize",0],["u64",0]]],[[["",0],["set",6,[["operationid",3]]]]],[[["",0],["address",3]]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[["",0]],["option",4,[["error",8]]]],[[["poolconfig",3],["protocolcommandsender",3],["protocolpooleventreceiver",3]]],[[]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["slot",3]]],[[["",0],["vec",3,[["u64",0]]]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"PoolCommandSender"],[4,"PoolCommand"],[4,"PoolError"],[3,"PoolManager"],[3,"PoolConfig"],[3,"PoolSettings"],[13,"AddOperations"],[13,"UpdateCurrentSlot"],[13,"UpdateLatestFinalPeriods"],[13,"FinalOperations"],[13,"AddEndorsements"],[13,"GetStats"],[13,"GetRecentOperations"],[13,"GetEndorsementsByAddress"],[13,"GetOperationBatch"],[13,"GetEndorsements"],[13,"GetEndorsementsById"],[13,"GetOperations"],[13,"ContainerInconsistency"],[13,"ProtocolError"],[13,"ChannelError"],[13,"JoinError"],[13,"ModelsError"]]},\
"massa_proof_of_stake_exports":{"doc":"","t":[3,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,10,11,11,12,12,11,11,11,11,11,12,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,6,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12],"n":["ExportProofOfStake","OperationRollInterface","ProofOfStake","ProofOfStakeConfig","ThreadCycleState","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cycle","cycle_states","cycle_updates","deserialize","deserialize","deserialize","draw_block_producer","draw_endorsement_producers","endorsement_count","error","fmt","fmt","fmt","from","from","from","from","from","from_bytes_compact","from_bytes_compact","genesis_key","get_final_roll_data","get_last_final_block_cycle","get_locked_roll_count","get_lookback_roll_count","get_next_selected_slot","get_roll_deactivations","get_roll_sell_credit","get_roll_updates","get_stakers_count","get_stakers_production_stats","initial_draw_seed","initial_rolls_path","into","into","into","into","is_complete","last_final_slot","new","note_final_blocks","periods_per_cycle","pos_draw_cached_cycles","pos_lock_cycles","pos_lookback_cycles","pos_miss_rate_deactivation_threshold","production_stats","rng_seed","roll_count","roll_price","serialize","serialize","serialize","set_watched_addresses","thread_count","to_bytes_compact","to_bytes_compact","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ContainerInconsistency","IOError","ModelsError","NotFinalRollError","POSResult","PosCycleUnavailable","ProofOfStakeError","RollOverflowError","SerdeError","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","source","to_string","try_from","try_into","type_id","vzip","0","0","0","0","0"],"q":["massa_proof_of_stake_exports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_proof_of_stake_exports::error","","","","","","","","","","","","","","","","","","","","","","","","massa_proof_of_stake_exports::error::ProofOfStakeError","","","",""],"d":["","Roll specific method on operation","","","","","","","","","","","","","","","","","","Cycle number","Index by thread and cycle number","Cycle roll updates","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Private_key to sign genesis blocks.","","","gets the number of locked rolls at a given slot for a set …","Gets cycle in which we are drawing at source_cycle","","returns the list of addresses whose rolls need to be …","returns the roll sell credit amount (in coins) for each …","get roll related modifications","active stakers count","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","returns true if all slots of this cycle for this thread …","Last final slot (can be a miss)","","Update internal states after a set of blocks become final …","cycle duration in periods","number of cached draw cycles for PoS","PoS lock cycles: when some rolls are released, we only …","PoS lookback cycles: when drawing for cycle N, we use the …","number of cycle misses (strictly) above which stakers are …","Per-address production statistics (ok_count, nok_count)","Used to seed the random selector at each cycle","Number of rolls an address has","","","","","","Number of threads","","","","","","","","","","","","","","","","","","","","","","there was an inconsistency between containers {0}","io error {0}","models error: {0}","not final roll","","Proof of stake cycle unavailable {0}","","roll overflow","serde error","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,1,2,3,4,1,2,3,4,2,3,4,2,3,4,4,2,4,2,3,4,1,1,3,0,2,3,4,1,2,2,3,4,2,4,3,1,1,1,1,1,1,1,5,1,1,3,3,1,2,3,4,4,4,1,1,3,3,3,3,3,4,4,4,3,2,3,4,1,3,2,4,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,6,6,6,6,0,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,8,9,10,11],"f":[null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["exportproofofstake",3]],[[["",0]],["proofofstakeconfig",3]],[[["",0]],["threadcyclestate",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["slot",3]],["posresult",6,[["address",3]]]],[[["",0],["slot",3]],["posresult",6,[["vec",3,[["address",3]]]]]],null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["proofofstake",3]]],[[]],[[]],[[]],[[],["result",4,[["modelserror",4]]]],[[],["result",4,[["modelserror",4]]]],null,[[["",0],["u64",0],["u8",0]],["option",4,[["threadcyclestate",3]]]],[[["",0],["u8",0]],["u64",0]],[[["",0],["u64",0],["u8",0],["set",6]],["map",6,[["address",3],["u64",0]]]],[[["",0],["u64",0],["u8",0]],["posresult",6,[["rollcounts",3]]]],[[["",0],["slot",3],["address",3]],["option",4,[["slot",3]]]],[[["",0],["u64",0],["u8",0]],["posresult",6,[["set",6,[["address",3]]]]]],[[["",0],["u64",0],["u8",0]],["posresult",6,[["map",6,[["address",3],["amount",3]]]]]],[[["",0]],["result",4,[["rollupdates",3],["proofofstakeerror",4]]]],[[["",0],["u64",0]],["posresult",6,[["u64",0]]]],[[["",0],["set",6]],["vec",3,[["stakerscycleproductionstats",3]]]],null,null,[[]],[[]],[[]],[[]],[[["",0],["u64",0]],["bool",0]],null,[[["proofofstakeconfig",3],["option",4,[["exportproofofstake",3]]]]],[[["",0],["map",6,[["blockid",3],["activeblock",3]]]],["posresult",6]],null,null,null,null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0],["set",6,[["address",3]]]]],null,[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["modelserror",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["modelserror",4]]],[[["error",3]]],[[["error",3]]],[[]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null],"p":[[3,"ProofOfStake"],[3,"ExportProofOfStake"],[3,"ProofOfStakeConfig"],[3,"ThreadCycleState"],[8,"OperationRollInterface"],[4,"ProofOfStakeError"],[13,"PosCycleUnavailable"],[13,"ContainerInconsistency"],[13,"IOError"],[13,"SerdeError"],[13,"ModelsError"]]},\
"massa_protocol_exports":{"doc":"","t":[12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,4,4,3,4,3,4,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,5,5,5,5,11,11,11,11,11,11,5,5,5,5,5,5,5,5,11,11,11,11,12,11,11,12,5,11,11,11,11,11,11,11,11,11,5,5],"n":["0","0","0","ActiveConnectionMissing","AttackBlockDetected","ChannelError","ContainerInconsistencyError","GeneralProtocolError","GetBlocks","GetBlocksResults","IOError","IntegratedBlock","InvalidIpError","MassaHashError","MissingPeersError","ModelsError","NetworkError","PeerConnectionError","PropagateEndorsements","PropagateOperations","ProtocolCommand","ProtocolCommandSender","ProtocolError","ProtocolEvent","ProtocolEventReceiver","ProtocolManagementCommand","ProtocolManager","ProtocolPoolEvent","ProtocolPoolEventReceiver","ProtocolSettings","ReceivedBlock","ReceivedBlockHeader","ReceivedEndorsements","ReceivedOperations","SerdeError","TimeError","TokieRecvError","TokioSendError","TokioTaskJoinError","UnexpectedNodeCommandChannelClosure","UnexpectedWriterClosure","WishlistDelta","WrongSignature","ask_block_timeout","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","drain","drain","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","integrated_block","into","into","into","into","into","into","into","into","into","into","max_known_endorsements_size","max_known_ops_size","max_node_known_blocks_size","max_node_wanted_blocks_size","max_send_wait","max_simultaneous_ask_blocks_per_node","new","notify_block_attack","propagate_endorsements","propagate_operations","send_get_blocks_results","send_wishlist_delta","serialize","serialize","serialize","serialize","source","stop","tests","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_event","wait_event","0","0","0","0","block","block_id","endorsement_ids","new","operation_ids","remove","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","block","block_id","block_id","endorsement_ids","header","operation_set","endorsements","operations","propagate","propagate","mock_network_controller","tools","MockNetworkController","borrow","borrow_mut","close_connection","from","into","new","new_connection","send_ask_for_block","send_block","send_block_not_found","send_endorsements","send_header","send_operations","try_from","try_into","type_id","vzip","wait_command","NodeInfo","PROTOCOL_SETTINGS","asked_list","assert_banned_node","assert_banned_nodes","assert_hash_asked_to_node","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_and_connect_nodes","create_block","create_block_with_endorsements","create_block_with_operations","create_endorsement","create_node","create_operation_with_expire_period","create_protocol_settings","deref","fmt","from","from","id","into","into","private_key","send_and_propagate_block","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","wait_protocol_event","wait_protocol_pool_event"],"q":["massa_protocol_exportsmassa_protocol_exports::ProtocolCommand","","","","","","","","","","massa_protocol_exports::ProtocolError","","","","","","","","","","","","","","","massa_protocol_exports::ProtocolEvent","","","","","","","massa_protocol_exports::ProtocolPoolEvent","","","","massa_protocol_exports::tests","","massa_protocol_exports::tests::mock_network_controller","","","","","","","","","","","","","","","","","","","massa_protocol_exports::tests::tools","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Active connection missing:<code>{0}</code>","A block, or it’s header, amounted to an attempted attack.","An error occurred during channel communication: {0}","container inconsistency error: {0}","Protocol err:{0}","Ask for a list of blocks from consensus.","The response to a ProtocolEvent::GetBlocks.","IO error : {0}","Notify block integration of a given block.","The ip:<code>{0}</code> address is not valid","massa_hash error {0}","missing peers","models error: {0}","network error: {0}","Error during network connection:<code>{0:?}</code>","Propagate endorsements","Propagate operations","Commands that protocol worker can process","","","Possible types of events that can happen.","","","","Possible types of pool events that can happen.","","Protocol Configuration","A block with a valid signature has been received.","A block header with a valid signature has been received.","Endorsements were received","Operations were received","Serde error : {0}","Time error {0}","error receiving oneshot response : {0}","error sending protocol event: {0}","A tokio task has crashed err:{0}","the network controller should not drop a node command …","the writer of a node should not drop its event sender …","Wishlist delta","wrong signature","","","","","","","","","","","","","","","","","","","","","","","","","","","drains remaining events and returns them in a VecDeque …","drains remaining events and returns them in a VecDeque …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Sends the order to propagate the header of a block","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Max wait time for sending a Network or Node event.","","","Notify to protocol an attack attempt.","","","Send the response to a ProtocolEvent::GetBlocks.","","","","","","","Stop the protocol controller","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Receives the next ProtocolEvent from connected Node. None …","Receives the next ProtocolPoolEvent None is returned when …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a block for use in protocol, without paying …","","","Creates an endorsement for use in protocol tests, without …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[1,2,3,4,5,4,4,4,6,5,4,5,4,4,4,4,4,4,5,5,0,0,0,0,0,0,0,0,0,0,6,6,7,7,4,4,4,4,4,4,4,5,4,8,1,2,9,4,6,7,5,10,3,8,1,2,9,4,6,7,5,10,3,8,3,8,3,8,8,1,2,4,4,6,7,5,10,8,1,2,9,4,4,4,4,4,4,4,4,4,4,6,7,5,10,3,8,3,1,2,9,4,6,7,5,10,3,8,8,8,8,8,8,8,9,3,3,3,3,3,6,7,5,10,4,9,0,3,8,4,1,2,9,4,6,7,5,10,3,8,1,2,9,4,6,7,5,10,3,8,1,2,9,4,6,7,5,10,3,8,1,2,9,4,6,7,5,10,3,8,1,2,11,12,13,14,15,15,15,16,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,33,34,33,34,33,35,36,36,35,0,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,0,0,0,38,39,38,39,38,38,0,0,0,0,0,0,0,0,39,38,38,39,38,38,39,38,0,38,38,39,38,39,38,39,38,39,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["protocolcommandsender",3]],[[["",0]],["protocolsettings",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4]],[[]],[[]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["networkerror",4]]],[[["error",3]]],[[["timeerror",4]]],[[["box",3,[["senderror",3,[["protocolevent",4]]]]]]],[[["error",3]]],[[["recverror",3]]],[[["massahasherror",4]]],[[["modelserror",4]]],[[["joinerror",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["blockid",3],["block",3],["set",6,[["operationid",3]]],["vec",3,[["endorsementid",3]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["joinhandle",3,[["result",4,[["networkeventreceiver",3],["protocolerror",4]]]]],["sender",3,[["protocolmanagementcommand",4]]]]],[[["",0],["blockid",3]]],[[["",0],["map",6,[["endorsementid",3],["endorsement",3]]]]],[[["",0],["map",6,[["operationid",3],["operation",3]]]]],[[["",0],["map",6,[["blockid",3],["option",4]]]]],[[["",0],["set",6,[["blockid",3]]],["set",6,[["blockid",3]]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["option",4,[["error",8]]]],[[["protocoleventreceiver",3],["protocolpooleventreceiver",3]]],null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["nodeid",3]]],[[]],[[]],[[]],[[["",0],["nodeid",3]]],[[["",0],["nodeid",3],["vec",3,[["blockid",3]]]]],[[["",0],["nodeid",3],["block",3]]],[[["",0],["nodeid",3],["blockid",3]]],[[["",0],["nodeid",3],["vec",3,[["endorsement",3]]]]],[[["",0],["nodeid",3],["blockheader",3]]],[[["",0],["nodeid",3],["vec",3,[["operation",3]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["",0],["massatime",3]]],null,null,[[["mocknetworkcontroller",3]]],[[["nodeid",3],["mocknetworkcontroller",3]]],[[["vec",3,[["nodeid",3]]],["mocknetworkcontroller",3]]],[[["blockid",3],["nodeid",3],["mocknetworkcontroller",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["nodeinfo",3]],[[["",0],["",0]]],[[["usize",0],["mocknetworkcontroller",3]]],[[["privatekey",3],["publickey",3]],["block",3]],[[["privatekey",3],["publickey",3],["slot",3],["vec",3,[["endorsement",3]]]],["block",3]],[[["privatekey",3],["publickey",3],["slot",3],["vec",3,[["operation",3]]]],["block",3]],[[],["endorsement",3]],[[],["nodeinfo",3]],[[["privatekey",3],["u64",0]],["operation",3]],[[],["protocolsettings",3]],[[["",0]],["protocolsettings",3]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],null,[[]],[[]],null,[[["mocknetworkcontroller",3],["block",3],["bool",0],["nodeid",3],["protocoleventreceiver",3]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[["protocoleventreceiver",3],["massatime",3]]],[[["protocolpooleventreceiver",3],["massatime",3]]]],"p":[[3,"ProtocolEventReceiver"],[3,"ProtocolPoolEventReceiver"],[3,"ProtocolCommandSender"],[4,"ProtocolError"],[4,"ProtocolCommand"],[4,"ProtocolEvent"],[4,"ProtocolPoolEvent"],[3,"ProtocolSettings"],[3,"ProtocolManager"],[4,"ProtocolManagementCommand"],[13,"AttackBlockDetected"],[13,"GetBlocksResults"],[13,"PropagateOperations"],[13,"PropagateEndorsements"],[13,"IntegratedBlock"],[13,"WishlistDelta"],[13,"GeneralProtocolError"],[13,"ChannelError"],[13,"TokioTaskJoinError"],[13,"TokieRecvError"],[13,"TokioSendError"],[13,"PeerConnectionError"],[13,"InvalidIpError"],[13,"ActiveConnectionMissing"],[13,"IOError"],[13,"SerdeError"],[13,"MassaHashError"],[13,"TimeError"],[13,"ModelsError"],[13,"NetworkError"],[13,"ContainerInconsistencyError"],[13,"GetBlocks"],[13,"ReceivedBlock"],[13,"ReceivedBlockHeader"],[13,"ReceivedEndorsements"],[13,"ReceivedOperations"],[3,"MockNetworkController"],[3,"NodeInfo"],[3,"PROTOCOL_SETTINGS"]]},\
"massa_protocol_worker":{"doc":"","t":[5],"n":["start_protocol_controller"],"q":["massa_protocol_worker"],"d":["start a new ProtocolController from a ProtocolConfig"],"i":[0],"f":[[[["protocolsettings",3],["u64",0],["u64",0],["networkcommandsender",3],["networkeventreceiver",3]]]],"p":[]},\
"massa_signature":{"doc":"","t":[0,17,17,3,3,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["signature_impl","PRIVATE_KEY_SIZE_BYTES","PUBLIC_KEY_SIZE_BYTES","PrivateKey","PublicKey","SIGNATURE_SIZE_BYTES","Signature","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","derive_public_key","deserialize","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bs58_check","from_bs58_check","from_bs58_check","from_bytes","from_bytes","from_bytes","from_str","from_str","from_str","generate_random_private_key","hash","into","into","into","into_bytes","into_bytes","into_bytes","ne","ne","ne","partial_cmp","partial_cmp","serialize","serialize","serialize","sign","to_bs58_check","to_bs58_check","to_bs58_check","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_signature"],"q":["massa_signature","massa_signature::signature_impl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Private Key used to sign messages Generated using …","Public key used to check if a message was encoded by the …","","Signature generated from a message and a privateKey.","","","","","","","","","","","","","","","","::serde::Deserialize trait for PrivateKey if the …","::serde::Deserialize trait for PublicKey if the …","::serde::Deserialize trait for Signature if the …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize a PrivateKey using bs58 encoding with checksum.","Deserialize a PublicKey using bs58 encoding with checksum.","Deserialize a Signature using bs58 encoding with checksum.","Deserialize a PrivateKey from bytes.","Deserialize a PublicKey from bytes.","Deserialize a Signature from bytes.","","","","Generate a random private key from a RNG.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Serialize a PrivateKey into bytes.","Serialize into bytes.","Serialize a Signature into bytes.","","","","","","::serde::Serialize trait for PrivateKey if the serializer …","::serde::Serialize trait for PublicKey if the serializer …","::serde::Serialize trait for Signature if the serializer …","","Serialize a PrivateKey using bs58 encoding with checksum.","Serialize a PublicKey using bs58 encoding with checksum.","Serialize a Signature using bs58 encoding with checksum.","Serialize a PrivateKey as bytes.","Serialize a PublicKey as bytes.","Serialize a Signature as bytes.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,0,1,2,3,1,2,3,1,1,2,2,3,3,1,2,3,1,2,3,1,2,3,1,2,3,0,2,1,2,3,1,2,3,1,2,3,1,2,1,2,3,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0],"f":[null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["privatekey",3]],[[["",0]],["publickey",3]],[[["",0]],["signature",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["privatekey",3]],["ordering",4]],[[["",0],["publickey",3]],["ordering",4]],[[["privatekey",3]],["publickey",3]],[[["deserializer",8]],["result",4,[["privatekey",3]]]],[[["deserializer",8]],["result",4,[["publickey",3]]]],[[["deserializer",8]],["result",4,[["signature",3]]]],[[["",0],["privatekey",3]],["bool",0]],[[["",0],["publickey",3]],["bool",0]],[[["",0],["signature",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["str",0]],["result",4,[["privatekey",3],["massahasherror",4]]]],[[["str",0]],["result",4,[["publickey",3],["massahasherror",4]]]],[[["str",0]],["result",4,[["signature",3],["massahasherror",4]]]],[[],["result",4,[["privatekey",3],["massahasherror",4]]]],[[],["result",4,[["publickey",3],["massahasherror",4]]]],[[],["result",4,[["signature",3],["massahasherror",4]]]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[],["privatekey",3]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["privatekey",3]],["bool",0]],[[["",0],["publickey",3]],["bool",0]],[[["",0],["signature",3]],["bool",0]],[[["",0],["privatekey",3]],["option",4,[["ordering",4]]]],[[["",0],["publickey",3]],["option",4,[["ordering",4]]]],[[["",0],["serializer",8]],["result",4]],[[["",0],["serializer",8]],["result",4]],[[["",0],["serializer",8]],["result",4]],[[["hash",3],["privatekey",3]],["result",4,[["signature",3],["massahasherror",4]]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["hash",3],["signature",3],["publickey",3]],["result",4,[["massahasherror",4]]]]],"p":[[3,"PrivateKey"],[3,"PublicKey"],[3,"Signature"]]},\
"massa_time":{"doc":"","t":[13,13,18,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["CheckedOperationError","ConversionError","EPSILON","MassaTime","TimeError","TimeOverflowError","borrow","borrow","borrow_mut","borrow_mut","checked_add","checked_div_time","checked_div_u64","checked_mul","checked_rem_time","checked_rem_u64","checked_sub","clone","clone_into","cmp","compensated_now","days_hours_mins_secs","deserialize","eq","estimate_instant","fmt","fmt","fmt","fmt","from","from","from","from","from_str","hash","into","into","ne","now","partial_cmp","saturating_add","saturating_mul","saturating_sub","serialize","to_duration","to_millis","to_owned","to_string","to_string","to_utc_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","0"],"q":["massa_time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_time::TimeError"],"d":["Checked operation error : {0}","Error converting","Smallest time interval","Time structure used every where. Millis since 01/01/1970.","","Time overflow error","","","","","","","","","","","","","","","Gets current compensated unix timestamp (resolution: …","","","","","","","","","Returns the argument unchanged.","Conversion from u64, representing timestamp in millis.","Conversion from u64, representing timestamp in millis.","Returns the argument unchanged.","Conversion from <code>&amp;str</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Gets current unix timestamp (resolution: milliseconds).","","","","","","Conversion to <code>std::time::Duration</code>.","Conversion to u64, representing millis.","","","","","","","Conversion from <code>std::time::Duration</code>.","","","","",""],"i":[1,1,2,0,0,1,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2,1,2,2,1,2,2,1,2,1,2,3],"f":[null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["massatime",3]],["result",4,[["timeerror",4]]]],[[["massatime",3]],["result",4,[["u64",0],["timeerror",4]]]],[[["u64",0]],["result",4,[["massatime",3],["timeerror",4]]]],[[["u64",0]],["result",4,[["timeerror",4]]]],[[["massatime",3]],["result",4,[["timeerror",4]]]],[[["u64",0]],["result",4,[["timeerror",4]]]],[[["massatime",3]],["result",4,[["timeerror",4]]]],[[["",0]],["massatime",3]],[[["",0],["",0]]],[[["",0],["massatime",3]],["ordering",4]],[[["i64",0]],["result",4,[["timeerror",4]]]],[[["",0]],["result",4,[["timeerror",4]]]],[[],["result",4]],[[["",0],["massatime",3]],["bool",0]],[[["i64",0]],["result",4,[["instant",3],["timeerror",4]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["u64",0]]],[[["u64",0]]],[[]],[[["str",0]],["result",4]],[[["",0],["",0]]],[[]],[[]],[[["",0],["massatime",3]],["bool",0]],[[],["result",4,[["timeerror",4]]]],[[["",0],["massatime",3]],["option",4,[["ordering",4]]]],[[["massatime",3]]],[[["u64",0]],["massatime",3]],[[["massatime",3]]],[[["",0]],["result",4]],[[["",0]],["duration",3]],[[["",0]],["u64",0]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[["duration",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null],"p":[[4,"TimeError"],[3,"MassaTime"],[13,"CheckedOperationError"]]},\
"massa_wallet":{"doc":"","t":[3,13,13,13,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,12,12,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12],"n":["ConsensusConfigData","IOError","JSONError","MassaHashError","MissingKeyError","ModelsError","SerdeqsError","Wallet","WalletError","add_private_key","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","create_operation","delta_f0","deserialize","deserialize","find_associated_private_key","find_associated_public_key","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","genesis_timestamp","get_full_wallet","get_wallet_address_list","into","into","into","keys","max_block_size","new","operation_validity_periods","periods_per_cycle","remove_address","roll_price","serialize","sign_message","source","t0","thread_count","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wallet_path","0","0","0","0","0","0"],"q":["massa_wallet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_wallet::WalletError","","","","",""],"d":["","IO error: {0}","JSON error: {0}","MassaHash error: {0}","Missing key error: {0}","Models error: {0}","Serde Sq error: {0}","Contains the private keys created in the wallet.","","Adds a new private key to wallet, if it was missing","","","","","","","","","","","","","","","Finds the private key associated with given address","Finds the public key associated with given address","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Export keys to json string","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Generates a new wallet initialized with the provided json …","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,0,0,2,1,2,3,1,2,3,2,3,2,3,2,3,2,3,2,2,1,1,2,2,3,1,1,1,1,1,1,2,3,3,2,2,1,2,3,2,3,2,3,3,2,3,2,2,1,3,3,2,3,1,2,1,2,3,1,2,3,1,2,3,2,4,5,6,7,8,9],"f":[null,null,null,null,null,null,null,null,null,[[["",0],["privatekey",3]],["result",4,[["address",3],["walleterror",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["wallet",3]],[[["",0]],["consensusconfigdata",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["operationcontent",3],["address",3]],["result",4,[["operation",3],["walleterror",4]]]],null,[[],["result",4]],[[],["result",4]],[[["",0],["address",3]],["option",4,[["privatekey",3]]]],[[["",0],["address",3]],["option",4,[["publickey",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["error",3]]],[[["error",3]]],[[["error",4]]],[[["modelserror",4]]],[[["massahasherror",4]]],[[]],[[]],[[]],null,[[["",0]],["map",6]],[[["",0]],["set",6,[["address",3]]]],[[]],[[]],[[]],null,null,[[["pathbuf",3]],["result",4,[["wallet",3],["walleterror",4]]]],null,null,[[["",0],["address",3]],["result",4,[["walleterror",4]]]],null,[[["",0]],["result",4]],[[["",0],["address",3],["vec",3,[["u8",0]]]],["option",4,[["pubkeysig",3]]]],[[["",0]],["option",4,[["error",8]]]],null,null,[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null],"p":[[4,"WalletError"],[3,"Wallet"],[3,"ConsensusConfigData"],[13,"IOError"],[13,"JSONError"],[13,"SerdeqsError"],[13,"ModelsError"],[13,"MassaHashError"],[13,"MissingKeyError"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};