var searchIndex = JSON.parse('{\
"massa_api":{"doc":"Copyright (c) 2022 MASSA LABS info@massa.net Json RPC API …","t":[3,3,8,3,3,8,3,10,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,12,10,10,12,12,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,10,10,12,10,10,10,10,12,10,12,12,12,10,12,10,10,11,11,11,10,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11],"n":["API","APIConfig","Endpoints","Private","Public","RpcServer","StopHandle","add_staking_secret_keys","api_settings","api_settings","bind_private","bind_public","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compensation_millis","consensus_command_sender","consensus_command_sender","consensus_config","consensus_config","deserialize","draw_lookahead_period_count","execute_read_only_bytecode","execute_read_only_call","execution_controller","execution_controller","fmt","from","from","from","from","from","get_addresses","get_block","get_blockclique_block_by_slot","get_cliques","get_datastore_entries","get_endorsements","get_filtered_sc_output_event","get_graph_interval","get_openrpc_spec","get_operations","get_stakers","get_staking_addresses","get_status","into","into","into","into","into","max_arguments","max_datastore_value_length","max_function_name_length","max_op_datastore_entry_count","max_op_datastore_key_length","max_op_datastore_value_length","max_parameter_size","network_command_sender","network_command_sender","network_settings","new","new","node_ban_by_id","node_ban_by_ip","node_id","node_remove_from_whitelist","node_sign_message","node_unban_by_id","node_unban_by_ip","node_wallet","node_whitelist","openrpc_spec_path","pool_command_sender","protocol_command_sender","remove_staking_addresses","selector_controller","send_operations","serve","serve","serve","stop","stop_node","stop_node_channel","storage","to_delegate","to_delegate","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version","vzip","vzip","vzip","vzip","vzip"],"q":["massa_api","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The API wrapper","API settings. the API settings","Exposed API endpoints","Private API content","Public API component","Used to manage the API","Used to be able to stop the API","Add a vector of new secret(private) keys for the node to …","API settings","API settings","bind for the private API","bind for the public API","","","","","","","","","","","","","compensation milliseconds (used to sync time with …","link to the consensus component","link to the consensus component","consensus configuration (TODO: remove it, can be retrieved …","consensus configuration (TODO: remove it, can be retrieved …","","when looking for next draw we want to look at max …","Execute bytecode in read-only mode.","Execute an SC function in read-only mode.","link to the execution component","link to the execution component","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get addresses.","Get information on a block given its hash.","Get information on the block at a slot in the blockclique. …","Get cliques.","Get multiple datastore entries.","Get endorsements (not yet implemented).","Get events optionally filtered by:","Get the block graph within the specified time interval. …","Get OpenRPC specification.","Returns operations information associated to a given list …","Returns the active stakers and their active roll counts …","Return hash set of staking addresses.","Summary of the current state: time, last final blocks …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","max argument count","max datastore value length","max function name length","max op datastore entry","max datastore key length","max datastore value length","max parameter size","link to the network component","link to the network component","network setting","generate a new public API","generate a new private API","Bans given node id. No confirmation to expect.","Bans given IP address(es). No confirmation to expect.","our node id","remove from whitelist given IP address. keep it as standard","Sign message with node’s key. Returns the public key …","Unban given node id. No confirmation to expect.","Unban given IP address(es). No confirmation to expect.","User wallet","whitelist given IP address. No confirmation to expect. …","openrpc specification path","link to the pool component","link to the protocol component","Remove a vector of addresses used to stake. No …","link to the selector component","Adds operations to pool. Returns operations that were ok …","Start the API","","","stop the API gracefully","Gracefully stop the node.","stop channel","Massa storage","Create an <code>IoDelegate</code>, wiring rpc calls to the trait …","Create an <code>IoDelegate</code>, wiring rpc calls to the trait …","","","","","","","","","","","","","","","","","node version (TODO remove, can be retrieved via an …","","","","",""],"i":[0,0,0,0,0,0,0,60,45,56,5,5,45,56,46,55,5,45,56,46,55,5,5,5,45,45,56,45,56,5,5,60,60,45,56,5,45,56,46,55,5,60,60,60,60,60,60,60,60,60,60,60,60,60,45,56,46,55,5,5,5,5,5,5,5,5,45,56,45,46,46,60,60,45,60,60,60,60,56,60,5,45,45,60,45,60,61,46,46,55,60,56,45,60,60,5,45,56,46,55,5,45,56,46,55,5,45,56,46,55,5,45,45,56,46,55,5],"f":[0,0,0,0,0,0,0,[[[2,[1]]],[[4,[[3,[0]]]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[[]],0,0,0,0,0,[[],[[3,[5]]]],0,[[[2,[6]]],[[4,[[3,[[2,[7]],0]]]]]],[[[2,[8]]],[[4,[[3,[[2,[7]],0]]]]]],0,0,[[5,9],10],[[]],[[]],[[]],[[]],[[]],[[[2,[11]]],[[4,[[3,[[2,[12]],0]]]]]],[13,[[4,[[3,[14,0]]]]]],[15,[[4,[[3,[[17,[16]],0]]]]]],[[],[[4,[[3,[[2,[18]],0]]]]]],[[[2,[19]]],[[4,[[3,[[2,[20]],0]]]]]],[[[2,[21]]],[[4,[[3,[[2,[22]],0]]]]]],[23,[[4,[[3,[[2,[24]],0]]]]]],[25,[[4,[[3,[[2,[26]],0]]]]]],[[],[[4,[[3,[27,0]]]]]],[[[2,[28]]],[[4,[[3,[[2,[29]],0]]]]]],[[],[[4,[[3,[2,0]]]]]],[[],[[4,[[3,[[30,[11]],0]]]]]],[[],[[4,[[3,[31,0]]]]]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[32,[34,[33]],5,[34,[35]],36,[34,[37]],38,39,40,41,42,43,44],[[46,[45]]]],[[32,41,[34,[33]],5,36,[49,[[48,[47]]]]]],[[[2,[43]]],[[4,[[3,[0]]]]]],[[[2,[50]]],[[4,[[3,[0]]]]]],0,[[[2,[50]]],[[4,[[3,[0]]]]]],[[[2,[51]]],[[4,[[3,[52,0]]]]]],[[[2,[43]]],[[4,[[3,[0]]]]]],[[[2,[50]]],[[4,[[3,[0]]]]]],0,[[[2,[50]]],[[4,[[3,[0]]]]]],0,0,0,[[[2,[11]]],[[4,[[3,[0]]]]]],0,[[[2,[53]]],[[4,[[3,[[2,[28]],0]]]]]],[54,55],[[[46,[56]],54],55],[[[46,[45]],54],55],[55],[[],[[4,[[3,[0]]]]]],0,0,[[],[[58,[57]]]],[[],[[58,[57]]]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],59],[[],59],[[],59],[[],59],[[],59],0,[[]],[[]],[[]],[[]],[[]]],"p":[[3,"String"],[3,"Vec"],[4,"Result"],[6,"BoxFuture"],[3,"APIConfig"],[3,"ReadOnlyBytecodeExecution"],[3,"ExecuteReadOnlyResponse"],[3,"ReadOnlyCall"],[3,"Formatter"],[6,"Result"],[3,"Address"],[3,"AddressInfo"],[3,"BlockId"],[3,"BlockInfo"],[3,"Slot"],[3,"Block"],[4,"Option"],[3,"Clique"],[3,"DatastoreEntryInput"],[3,"DatastoreEntryOutput"],[3,"EndorsementId"],[3,"EndorsementInfo"],[3,"EventFilter"],[3,"SCOutputEvent"],[3,"TimeInterval"],[3,"BlockSummary"],[4,"Value"],[3,"OperationId"],[3,"OperationInfo"],[6,"PreHashSet"],[3,"NodeStatus"],[3,"ConsensusCommandSender"],[8,"ExecutionController"],[3,"Box"],[8,"SelectorController"],[3,"ConsensusConfig"],[8,"PoolController"],[3,"ProtocolCommandSender"],[3,"NetworkConfig"],[3,"Version"],[3,"NetworkCommandSender"],[15,"i64"],[3,"NodeId"],[3,"Storage"],[3,"Public"],[3,"API"],[3,"Wallet"],[6,"RwLock"],[3,"Arc"],[4,"IpAddr"],[15,"u8"],[3,"PubkeySig"],[3,"OperationInput"],[4,"SocketAddr"],[3,"StopHandle"],[3,"Private"],[8,"Metadata"],[3,"IoDelegate"],[3,"TypeId"],[8,"Endpoints"],[8,"RpcServer"]]},\
"massa_async_pool":{"doc":"Copyright (c) 2022 MASSA LABS info@massa.net","t":[13,3,3,6,3,3,3,3,3,3,3,3,3,3,4,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Add","AsyncMessage","AsyncMessageDeserializer","AsyncMessageId","AsyncMessageIdDeserializer","AsyncMessageIdSerializer","AsyncMessageSerializer","AsyncPool","AsyncPoolChanges","AsyncPoolChangesDeserializer","AsyncPoolChangesSerializer","AsyncPoolConfig","AsyncPoolDeserializer","AsyncPoolSerializer","Change","Delete","apply_changes_unchecked","bootstrap_part_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coins","compute_id","data","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","destination","emission_index","emission_slot","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","gas_price","get_pool_part","handler","into","into","into","into","into","into","into","into","into","into","into","into","into","max_async_message_data","max_gas","max_length","new","new","new","new","new","new","new","new","new","push_add","push_delete","sender","serialize","serialize","serialize","serialize","serialize","set_pool_part","settle_slot","take_batch_to_execute","thread_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validity_end","validity_start","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["massa_async_poold":["an item with identifier T and value U is added","Structure defining an asynchronous smart contract message","","Unique identifier of a message. Also has the property of …","","","","Represents a pool of sorted messages in a deterministic …","represents a list of additions and deletions to the …","","<code>AsyncPoolChanges</code> serializer","Asynchronous pool configuration","Deserializer for <code>AsyncPool</code>","Serializer for <code>AsyncPool</code>","Enum representing a value U with identifier T being added …","an item with identifier T is deleted","Applies pre-compiled <code>AsyncPoolChanges</code> to the pool without …","part size (for bootstrap limits)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Coins sent from the sender to the target address of the …","Compute the ID of the message for use when choosing which …","Raw payload data of the message","","","","","","Example","Example","","Example","","The address towards which the message is being sent","Index of the emitted message within the <code>emission_slot</code>. …","Slot at which the message was emitted","","","","Extends self with another another <code>AsyncPoolChanges</code>. This …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gas price to take into account when executing the message. …","Get a part of the async pool. Used for bootstrap.","the handler function name within the destination address’…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","max async message data (for bootstrap limits)","Maximum gas to use when processing the message","max number of messages in the pool","","","","","Creates a new <code>AsyncPool</code> serializer","Creates a new <code>AsyncPool</code> deserializer","","","Creates an empty <code>AsyncPool</code>","Pushes a message addition to the list of changes. No …","Pushes a message deletion to the list of changes. No …","The address that sent the message","Example","Example","","Example","","Set a part of the async pool. Used for bootstrap.","Settles a slot, adding new messages to the pool and …","Takes the best possible batch of messages to execute, with …","thread count","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Slot at which the message stops being valid (bound not …","Slot at which the message starts being valid (bound …","","","","","","","","","","","","",""],"i":[4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,5,10,13,11,17,12,18,4,2,5,6,7,8,1,10,13,11,17,12,18,4,2,5,6,7,8,1,4,2,5,6,7,8,1,4,2,5,6,7,8,1,8,8,8,10,11,12,2,6,13,17,18,7,8,8,8,8,4,2,8,2,4,2,5,8,1,10,13,11,17,12,18,4,2,5,6,7,8,1,8,1,8,10,13,11,17,12,18,4,2,5,6,7,8,1,5,8,5,10,13,11,17,12,18,6,7,1,2,2,8,10,11,12,6,8,1,1,1,5,4,2,5,6,7,8,1,10,13,11,17,12,18,4,2,5,6,7,8,1,10,13,11,17,12,18,4,2,5,6,7,8,1,10,13,11,17,12,18,4,2,5,6,7,8,1,8,8,10,13,11,17,12,18,4,2,5,6,7,8,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[3,3]]],[[4,[3,3]]]],[2,2],[5,5],[6,6],[7,7],[8,8],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[8,9],0,[[],10],[[],11],[[],12],[[],2],[[],6],[13,[[16,[2,[0,[14,15]]]]]],[17,[[16,[8,[0,[14,15]]]]]],[18,[[16,[[19,[9,8]],[0,[14,15]]]]]],[7,[[16,[9,[0,[14,15]]]]]],[[],[[20,[8]]]],0,0,0,[[[4,[21,21]],4],22],[[2,2],22],[[8,8],22],[[2,2]],[[[4,[23,23]],24],25],[[2,24],25],[[5,24],25],[[8,24],25],[[1,24],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[1,[26,[9]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],10],[[27,28,28],13],[[],11],[[27,28],17],[[],12],[[27,28,28],18],[[],6],[27,7],[5,1],[[2,9,8]],[[2,9]],0,[[10,2,29],[[20,[30]]]],[[11,8,29],[[20,[30]]]],[[12,19,29],[[20,[30]]]],[[6,9,29],[[20,[30]]]],[8,20],[[1,[19,[9,8]]],[[26,[9]]]],[[1,31,29],29],[[1,31,28],29],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"AsyncPool"],[3,"AsyncPoolChanges"],[8,"Clone"],[4,"Change"],[3,"AsyncPoolConfig"],[3,"AsyncMessageIdSerializer"],[3,"AsyncMessageIdDeserializer"],[3,"AsyncMessage"],[6,"AsyncMessageId"],[3,"AsyncPoolChangesSerializer"],[3,"AsyncMessageSerializer"],[3,"AsyncPoolSerializer"],[3,"AsyncPoolChangesDeserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[3,"AsyncMessageDeserializer"],[3,"AsyncPoolDeserializer"],[3,"BTreeMap"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"StreamingStep"],[15,"u8"],[15,"u64"],[3,"Vec"],[4,"SerializeError"],[3,"Slot"],[3,"TypeId"]]},\
"massa_bootstrap":{"doc":"Copyright (c) 2022 MASSA LABS info@massa.net Bootstrap …","t":[13,13,13,4,3,3,3,13,13,3,13,4,3,3,13,13,13,6,13,13,3,13,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,12,12,12,12,12,12,12,11,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,3,3,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AskBootstrapPeers","AskConsensusState","AskFinalStatePart","BootstrapClientMessage","BootstrapClientMessageDeserializer","BootstrapClientMessageSerializer","BootstrapConfig","BootstrapError","BootstrapError","BootstrapManager","BootstrapPeers","BootstrapServerMessage","BootstrapServerMessageDeserializer","BootstrapServerMessageSerializer","BootstrapSuccess","BootstrapTime","ConsensusState","Establisher","FinalStateFinished","FinalStatePart","GlobalBootstrapState","SlotTooOld","bind","bootstrap_blacklist_file","bootstrap_list","bootstrap_whitelist_file","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache_duration","clone","clone","clone","clone_into","clone_into","clone_into","compensation_millis","connect_timeout","default","default","deserialize","deserialize","deserialize","enable_clock_synchronization","endorsement_count","final_state","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_state","graph","into","into","into","into","into","into","into","into","into","ip_list_max_size","max_advertise_length","max_async_message_data","max_async_pool_changes","max_async_pool_length","max_bootstrap_blocks_length","max_bootstrap_error_length","max_bootstrap_final_state_parts_size","max_bootstrap_message_size","max_bytes_read_write","max_changes_slot_count","max_credits_length","max_datastore_entry_count","max_datastore_key_length","max_datastore_value_length","max_executed_ops_length","max_function_name_length","max_ledger_changes_count","max_op_datastore_entry_count","max_op_datastore_key_length","max_op_datastore_value_length","max_operations_per_block","max_ops_changes_length","max_parameters_size","max_ping","max_production_stats_length","max_rolls_length","max_simultaneous_bootstraps","new","new","new","new","peers","per_ip_min_interval","periods_per_cycle","randomness_size_bytes","read_error_timeout","read_timeout","retry_delay","serialize","serialize","start_bootstrap_server","stop","thread_count","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","types","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_error_timeout","write_timeout","error","last_credits_step","last_cycle_step","last_ledger_step","last_ops_step","last_pool_step","last_slot","async_pool_part","error","exec_ops_part","final_state_changes","graph","ledger_part","peers","pos_credits_part","pos_cycle_part","server_time","slot","version","Connector","DefaultConnector","DefaultEstablisher","DefaultListener","Duplex","Establisher","Listener","accept","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connect","default","fmt","fmt","fmt","from","from","from","get_connector","get_listener","into","into","into","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["massa_bootstrapmassa_bootstrap::BootstrapClientMessage","","","","","","","massa_bootstrap::BootstrapServerMessage","","","","","","","","","","","","massa_bootstrap::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Ask for bootstrap peers","Ask for consensus state","Ask for a part of the final state","Messages used during bootstrap by client","Deserializer for <code>BootstrapClientMessage</code>","Serializer for <code>BootstrapClientMessage</code>","Bootstrap configuration.","Bootstrap error","Bootstrap error","handle on the bootstrap server","Bootstrap peers","Messages used during bootstrap by server","Deserializer for <code>BootstrapServerMessage</code>","Serializer for <code>BootstrapServerMessage</code>","Bootstrap succeed","Sync clocks","Consensus state","connection establisher","Message sent when there is no state part left","Part of the final state","a collection of the bootstrap state snapshots of all …","Slot sent to get state changes is too old","Port to listen if we choose to allow other nodes to use us …","Path to the bootstrap blacklist file. This whitelist …","Ip address of our bootstrap nodes and their public key.","Path to the bootstrap whitelist file. This whitelist …","","","","","","","","","","","","","","","","","","","Cache duration","","","","","","","timestamp correction in milliseconds","connection timeout","","","Example","Example","","Enable clock synchronization","endorsement count","state of the final state","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the state from a bootstrap server needs to be …","state of the consensus graph","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Max size of the IP list","max advertise length","max data async message","max async pool changes","max async pool length","max bootstrap blocks length","max bootstrap error length","max bootstrap final state parts size","max bootstrap message size in bytes","Read-Write limitation for a connection in bytes per seconds","max slot count in state changes","max credits in proof-of-stake and state changes","max datastore entry count","max datastore key length","max datastore value length","max executed ops","max function name length","max ledger changes","max op datastore entry count","max op datastore key length","max op datastore value length","max operations per block","max executed ops changes","max parameters size","Max ping delay.","max production stats in proof-of-stake and state changes","max rolls in proof-of-stake and state changes","Max simultaneous bootstraps","Creates a new <code>BootstrapServerMessageSerializer</code>","Creates a new <code>BootstrapServerMessageDeserializer</code>","Creates a new <code>BootstrapClientMessageSerializer</code>","Creates a new <code>BootstrapClientMessageDeserializer</code>","list of network peers","Minimum interval between two bootstrap attempts from a …","period per cycle","randomness size bytes","readout error timeout","readout timeout","Time we wait before retrying a bootstrap","Example","Example","TODO merging the command senders into one channel …","stop the bootstrap server","thread count","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Connection types","","","","","","","","","","write error timeout","write timeout","Error message","Last received Proof of Stake credits slot","Last received Proof of Stake cycle","Last received ledger key","Last received executed operation associated slot","Last received async message id","Slot we are attached to for changes","Part of the async pool","Error message","Part of the executed operations","Ledger change for addresses inferior to <code>address</code> of the …","block graph","Part of the execution ledger sent in a serialized way","Server peers","Part of the Proof of Stake <code>deferred_credits</code>","Part of the Proof of Stake <code>cycle_history</code>","The current time on the bootstrap server.","Slot the state changes are attached to","The version of the bootstrap server.","connector","Initiates a connection with given timeout in milliseconds","Establishes a connection","The listener we are using","duplex connection","connection establisher","listener","Accepts a new incoming connection from this listener.","","","","","","","Tries to connect to address","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the connector with associated timeout","Gets the associated listener","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an Establisher.","","","","","","","","","","","",""],"i":[2,2,2,0,0,0,0,1,2,0,1,0,0,0,2,1,1,0,1,1,0,1,3,3,3,3,4,6,5,10,32,21,1,2,3,4,6,5,10,32,21,1,2,3,3,1,2,3,1,2,3,21,3,4,5,6,10,3,3,3,21,1,2,3,4,6,5,10,32,21,1,2,3,0,21,4,6,5,10,32,21,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,6,5,10,21,3,3,3,3,3,3,4,5,0,32,3,1,2,3,4,6,5,10,32,21,1,2,3,4,6,5,10,32,21,1,2,3,4,6,5,10,32,21,1,2,3,0,4,6,5,10,32,21,1,2,3,3,3,40,41,41,41,41,41,41,42,43,42,42,44,42,45,42,42,46,42,46,0,0,0,0,0,0,0,34,34,36,39,34,36,39,36,39,34,36,39,34,36,39,39,39,34,36,39,39,34,36,39,34,36,39,34,36,39,34,36,39],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[2,2],[3,3],[[]],[[]],[[]],0,0,[[],4],[[],5],[6,[[9,[1,[0,[7,8]]]]]],[10,[[9,[2,[0,[7,8]]]]]],[[],[[11,[3]]]],0,0,0,[[1,12],13],[[2,12],13],[[3,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,[16,[[15,[14]]]],17,18,19,[20,[19]]],[[11,[21,0]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],[[22,23,23,23,23,24,24,24,24,24,22,24,24,25,23,24,24,22,24,24,24,24,24,24,24],6],[[],5],[[22,22],10],0,0,0,0,0,0,0,[[4,1,26],[[11,[27]]]],[[5,2,26],[[11,[27]]]],[[28,29,[16,[[15,[14]]]],3,17,30,31,18],[[11,[[20,[32]],0]]]],[32,[[11,[0]]]],0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[34,20,20],35],[[]],[[]],[[]],[[]],[[]],[[]],[[36,37],[[35,[38]]]],[[],39],[[34,12],13],[[36,12],13],[[39,12],13],[[]],[[]],[[]],[[39,19],[[35,[36]]]],[[39,37],[[35,[34]]]],[[]],[[]],[[]],[[],39],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],33],[[],33],[[],33],[[]],[[]],[[]]],"p":[[4,"BootstrapServerMessage"],[4,"BootstrapClientMessage"],[3,"BootstrapConfig"],[3,"BootstrapServerMessageSerializer"],[3,"BootstrapClientMessageSerializer"],[3,"BootstrapServerMessageDeserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[3,"BootstrapClientMessageDeserializer"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"FinalState"],[6,"RwLock"],[3,"Arc"],[6,"Establisher"],[3,"Version"],[3,"MassaTime"],[4,"Option"],[3,"GlobalBootstrapState"],[15,"u8"],[15,"u32"],[15,"u64"],[15,"u16"],[3,"Vec"],[4,"SerializeError"],[3,"ConsensusCommandSender"],[3,"NetworkCommandSender"],[3,"KeyPair"],[15,"i64"],[3,"BootstrapManager"],[3,"TypeId"],[3,"DefaultListener"],[6,"Result"],[3,"DefaultConnector"],[4,"SocketAddr"],[6,"Duplex"],[3,"DefaultEstablisher"],[13,"BootstrapError"],[13,"AskFinalStatePart"],[13,"FinalStatePart"],[13,"BootstrapError"],[13,"ConsensusState"],[13,"BootstrapPeers"],[13,"BootstrapTime"]]},\
"massa_cipher":{"doc":"MASSA Cipher crate","t":[4,13,13,13,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CipherError","DecryptionError","EncryptionError","Utf8Error","borrow","borrow_mut","decrypt","encrypt","fmt","fmt","from","from","into","provide","source","to_string","try_from","try_into","type_id","vzip"],"q":["massa_cipher","","","","","","","","","","","","","","","","","","",""],"d":["Cipher error","Decryption error: {0}","Encryption error: {0}","<code>Utf8</code> error: {0}","","","Decryption function using AES-GCM cipher.","Encryption function using AES-GCM cipher.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,0,0,0,[[]],[[]],[1,[[3,[2]]]],[1,[[3,[[5,[4]],2]]]],[[2,6],7],[[2,6],7],[[]],[8,2],[[]],[9],[2,[[11,[10]]]],[[],12],[[],3],[[],3],[[],13],[[]]],"p":[[15,"str"],[4,"CipherError"],[4,"Result"],[15,"u8"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[3,"Utf8Error"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[3,"TypeId"]]},\
"massa_client":{"doc":"Massa stateless CLI","t":[3,3,5,11,11,11,11,11,0,12,11,12,11,11,11,11,11,12,12,5,12,11,12,12,12,0,5,11,0,11,11,11,11,11,11,0,11,11,12,4,3,3,3,12,12,11,11,11,11,11,11,11,11,13,13,14,11,11,11,11,11,11,13,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,11,11,13,5,13,11,13,11,13,11,5,11,13,12,11,11,11,11,11,11,12,11,12,11,11,11,13,13,13,13,13,13,13,13,13,13,13,11,5,5,11,13,13,14,11,13,5,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,3,3,8,11,11,11,11,11,11,5,11,11,11,11,5,12,11,11,14,12,12,10,11,5,11,11,11,11,11,11,11,11,11,11,11,3,3,3,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["Args","JsonError","ask_password","borrow","borrow","borrow_mut","borrow_mut","clap","cmds","command","erased_serialize","error","from","from","from_clap","into","into","ip","json","main","parameters","parse_args","password","private_port","public_port","repl","run","serialize","settings","try_from","try_from","try_into","try_into","type_id","type_id","utils","vzip","vzip","wallet","Command","CommandIter","ExtendedWallet","ExtendedWalletEntry","address_info","back_idx","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buy_rolls","call_smart_contract","client_warning","clone","clone_into","eq","equivalent","erased_serialize","erased_serialize","exit","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_str","get","get_addresses","get_block","get_datastore_entry","get_detailed_message","get_documentation","get_endorsements","get_file_as_byte_vec","get_filtered_sc_output_event","get_message","get_operations","get_serializations","get_status","get_str","help","help","help","idx","into","into","into","into","into_iter","iter","keypair","len","marker","new","next","next_back","node_add_staking_secret_keys","node_ban_by_id","node_ban_by_ip","node_get_staking_addresses","node_remove_from_whitelist","node_remove_staking_addresses","node_stop","node_testnet_rewards_program_ownership_proof","node_unban_by_id","node_unban_by_ip","node_whitelist","nth","parse_key_value","parse_vec","pretty_print","read_only_call","read_only_smart_contract","rpc_error","run","sell_rolls","send_operation","send_smart_contract","send_transaction","serialize","serialize","size_hint","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","wallet_add_secret_keys","wallet_generate_secret_key","wallet_info","wallet_remove_addresses","wallet_sign","when_episode_ends","when_moon","CommandCompletion","CommandHistory","Output","borrow","borrow","borrow_mut","borrow_mut","default","default","expand_path","from","from","get","get_saved_history","group_parameters","history","into","into","massa_fancy_ascii_art_logo","max","options","pretty_print","read","run","stdout_json","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write","write_to_saved_history","DefaultNode","SETTINGS","Settings","__private_field","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default_node","deref","deserialize","deserialize","fmt","fmt","from","from","from","history","history_file_path","into","into","into","ip","private_port","public_port","timeout","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","longest_common_prefix"],"q":["massa_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_client::cmds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_client::repl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_client::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_client::utils"],"d":["","","Ask for the wallet password If the wallet does not exist, …","","","","","","","Command that client would execute (non-interactive mode)","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Address to listen on","Enable a mode where input/output are serialized as JSON","","Optional command parameter (as a JSON string)","","Wallet password","Port to listen on (Massa private API).","Port to listen on (Massa public API).","","","","Build here the default client settings from the …","","","","","","","Utilities","","","Path of wallet file","All the client commands the order they are defined is the …","An iterator over the variants of Self","Aggregation of the local, with some useful information as …","Used to have a shinny json output TODO re-factor me","address and balance information","","","","","","","","","","","","print a yellow warning","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","reads a file","","","","","","","Display the help of all commands","Display the help of the command with fancy colors and so on","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","the keypair","","","Reorganize everything into an extended wallet","","","","","","","","","","","","","","","","TODO: ugly utilities functions takes a slice of string and …","","","","bail a shinny RPC error","run a given command","","helper to wrap and send an operation with proper validity …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Simple completion implementation based on sub-string","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Longest Common Prefix"],"i":[0,0,0,9,11,9,11,9,0,9,11,11,9,11,9,9,11,9,9,0,9,9,9,9,9,0,0,11,0,9,11,9,11,9,11,0,9,11,9,0,0,0,0,19,13,14,13,19,20,14,13,19,20,14,14,0,13,13,14,14,19,20,14,14,14,19,19,20,20,14,13,19,20,14,13,14,14,14,14,14,14,0,14,14,14,14,14,14,0,14,14,13,14,13,19,20,13,14,19,13,13,20,13,13,14,14,14,14,14,14,14,14,14,14,14,13,0,0,20,14,14,0,14,14,0,14,14,19,20,13,13,14,19,20,14,14,13,19,20,14,13,19,20,14,13,19,20,14,13,19,20,14,14,14,14,14,14,14,0,0,0,35,36,35,36,35,36,0,35,36,36,35,0,35,35,36,0,35,36,30,35,0,30,35,36,35,36,35,36,35,36,35,35,0,0,0,41,41,39,40,41,39,40,39,40,39,40,39,41,39,40,39,40,41,39,40,39,39,41,39,40,40,40,40,39,39,40,41,39,40,41,39,40,41,39,40,41,39,40,0],"f":[0,0,[1,2],[[]],[[]],[[]],[[]],[[],3],0,0,[4,[[7,[5,6]]]],0,[[]],[[]],[8,9],[[]],[[]],0,0,[[],10],0,[[],[[7,[9]]]],0,0,0,0,[9,10],[11,7],0,[[],7],[[],7],[[],7],[[],7],[[],12],[[],12],0,[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[13,13],[[]],[[14,14],15],[[],15],[4,[[7,[5,6]]]],[4,[[7,[5,6]]]],0,[[14,16],17],[[14,16],[[7,[18]]]],[[19,16],17],[[19,16],17],[[20,16],17],[[20,16],17],[[]],[[]],[[]],[[]],[21,[[7,[14]]]],[[13,22],[[23,[14]]]],0,0,0,[14,[[23,[21]]]],[14,[[23,[21]]]],0,[1,[[10,[[25,[24]]]]]],0,[14,[[23,[21]]]],0,[14],0,[[14,21],[[23,[21]]]],[[]],[14],0,0,[[]],[[]],[[]],[[]],[[]],[[],13],0,[13,22],0,[26,[[10,[20]]]],[13,23],[13,23],0,0,0,0,0,0,0,0,0,0,0,[[13,22],23],[[27,21],[[23,[28]]]],[[],[[10,[[25,[28]]]]]],[20],0,0,0,[[14,29,26,15],[[10,[[31,[30]]]]]],0,[[29,26,32,33,34,15],[[10,[[31,[30]]]]]],0,0,[19,7],[20,7],[13],[[]],[[],2],[[],2],[[],2],[[],7],[21,[[7,[14]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],35],[[],36],[21,[[25,[24]]]],[[]],[[]],[[36,21],[[23,[2]]]],[[],[[7,[[37,[2]],38]]]],[[[25,[2]]],[[25,[2]]]],0,[[]],[[]],0,0,0,[[]],[[35,22],[[23,[2]]]],[[29,26]],[30,10],[[],7],[[],7],[[],7],[[],7],[[],12],[[],12],[[]],[[]],[35],[21],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[39,39],[40,40],[[]],[[]],0,[41,39],[[],[[7,[39]]]],[[],[[7,[40]]]],[[39,16],17],[[40,16],17],[[]],[[]],[[]],0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],12],[[],12],[[],12],[[]],[[]],[[]],[[[25,[21]]],21]],"p":[[3,"Path"],[3,"String"],[3,"App"],[8,"Serializer"],[3,"Ok"],[3,"Error"],[4,"Result"],[3,"ArgMatches"],[3,"Args"],[6,"Result"],[3,"JsonError"],[3,"TypeId"],[3,"CommandIter"],[4,"Command"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"ExtendedWalletEntry"],[3,"ExtendedWallet"],[15,"str"],[15,"usize"],[4,"Option"],[15,"u8"],[3,"Vec"],[3,"Wallet"],[3,"HashMap"],[8,"FromStr"],[3,"Client"],[8,"Output"],[3,"Box"],[4,"OperationType"],[3,"Amount"],[3,"Address"],[3,"CommandHistory"],[3,"CommandCompletion"],[3,"VecDeque"],[3,"Error"],[3,"Settings"],[3,"DefaultNode"],[3,"SETTINGS"]]},\
"massa_consensus_exports":{"doc":"Consensus exports","t":[3,2,2,3,3,11,11,11,11,11,11,11,11,0,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,4,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,4,6,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,12,11,11,11,11,11,11,12,11,11,12,12,12,12,12,12,12,12,11,12,11,11,11,12,12,12,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ConsensusCommandSender","ConsensusConfig","ConsensusError","ConsensusEventReceiver","ConsensusManager","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","commands","drain","error","events","from","from","from","get_best_parents","get_block_graph_status","get_block_statuses","get_blockclique_block_at_slot","get_bootstrap_state","get_cliques","get_latest_blockclique_block_at_slot","get_stats","into","into","into","join_handle","manager_tx","send_block","settings","stop","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","wait_event","ConsensusCommand","ConsensusManagementCommand","GetBestParents","GetBlockGraphStatus","GetBlockStatuses","GetBlockcliqueBlockAtSlot","GetBootstrapState","GetCliques","GetLatestBlockcliqueBlockAtSlot","GetStats","SendBlock","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","block_id","block_storage","ids","response_tx","response_tx","response_tx","response_tx","response_tx","response_tx","slot","slot","slot","slot_end","slot_start","BlockCreationError","ChannelError","ConfigError","ConsensusError","ConsensusResult","ContainerInconsistency","ControllerEventError","ExecutionError","GraphError","IOError","InternalError","JoinError","MassaCipherError","MissingBlock","ModelsError","ProtocolError","ReceiveChannelError","SendChannelError","SlotOverflowError","TimeError","TokioSendError","TransactionError","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","into","into","provide","provide","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ConsensusEvent","NeedSync","borrow","borrow_mut","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","ConsensusChannels","ConsensusConfig","ConsensusWorkerChannels","block_db_prune_interval","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","channel_size","clone","clone_into","controller_command_rx","controller_event_tx","controller_manager_rx","delta_f0","end_timestamp","endorsement_count","execution_controller","execution_controller","fmt","force_keep_final_periods","from","from","from","future_block_processing_max_periods","genesis_key","genesis_timestamp","into","into","into","max_dependency_blocks","max_discarded_blocks","max_future_processing_blocks","max_gas_per_block","max_item_return_count","max_send_wait","operation_validity_periods","periods_per_cycle","pool_command_sender","pool_command_sender","protocol_command_sender","protocol_command_sender","protocol_event_receiver","protocol_event_receiver","selector_controller","selector_controller","stats_timespan","t0","thread_count","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["massa_consensus_exports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_consensus_exports::commands","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_consensus_exports::commands::ConsensusCommand","","","","","","","","","","","","","","massa_consensus_exports::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_consensus_exports::events","","","","","","","","","","","","","","massa_consensus_exports::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Consensus commands sender TODO Make private","","","channel to receive consensus events","Consensus manager","","","","","","","","","consensus commands Contains definitions of commands used …","drains remaining events and returns them in a <code>VecDeque</code> …","consensus errors","consensus events","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","get best parents","Gets all the available information on the block graph …","Gets the graph statuses of a batch of blocks.","get block id of a slot in a blockclique","get bootstrap snapshot","Gets all cliques.","get latest block id of a slot in a blockclique","get current consensus stats","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","protocol handler","consensus management sender","send block","consensus settings Definition &amp; Implementation of the …","stop consensus","","","","","","","","","","","","","","wait for the next event","Commands that can be processed by consensus.","Events that are emitted by consensus.","Get the best parents and their period","Returns through a channel current blockgraph without block …","Returns through a channel the graph statuses of a batch of …","Get a block at a given slot in a blockclique","Returns the bootstrap state","Get cliques","Get a block at a given slot in a blockclique","get current stats on consensus","Send a block","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","block id","All the objects for the block","wanted block IDs","response channel","response channel","response channel","response channel","response channel","response channel","wanted slot","wanted slot","block slot","optional end slot","optional start slot","block creation error {0}","channel error: {0}","configuration error: {0}","Consensus errors","Consensus","there was an inconsistency between containers {0}","failed retrieving consensus controller event","execution error: {0}","Graph error: {0}","io error {0}","Internal error","Join error {0}","<code>MassaCipher</code> error: {0}","missing block {0}","models error: {0}","Protocol error {0}","Receive  channel error : {0}","Send  channel error : {0}","slot overflow","Time error {0}","error sending consensus event: {0}","transaction error {0}","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Events that are emitted by consensus.","probable desynchronization detected, need …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Public channels associated to the consensus module. …","Consensus full configuration (static + user defined)","Communication asynchronous channels for the consensus …","old blocks are pruned every <code>block_db_prune_interval</code>","","","","","","","channel size","","","Channel receiving consensus commands.","Channel sending out consensus events.","Channel receiving consensus management commands.","Threshold for fitness.","TESTNET: time when the blockclique is ended.","target number of endorsement per block","Execution command sender.","outgoing link to execution component","","force keep at least this number of final periods in RAM …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If a block is <code>future_block_processing_max_periods</code> periods …","<code>KeyPair</code> to sign genesis blocks.","Time in milliseconds when the blockclique started.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Maximum number of blocks allowed in <code>DependencyWaitingBlocks</code>…","Maximum number of blocks allowed in discarded blocks.","Maximum number of blocks allowed in <code>FutureIncomingBlocks</code>.","Max gas per block for the execution configuration","max number of items returned while querying","max event send wait","Maximum operation validity period count","cycle duration in periods","Associated Pool command sender.","outgoing link to pool component","Associated protocol command sender.","outgoing link to protocol component","Associated protocol event listener.","incoming link to protocol component","Selector controller","selector controller","stats time span","Time between the periods in the same thread.","Number of threads","","","","","","","","","","","","",""],"i":[0,0,0,0,0,2,17,1,2,17,1,1,1,0,2,0,0,2,17,1,1,1,1,1,1,1,1,1,2,17,1,17,17,1,0,17,1,2,17,1,2,17,1,2,17,1,2,17,1,2,0,0,22,22,22,22,22,22,22,22,22,22,21,22,21,21,21,22,21,22,21,22,21,21,22,21,22,21,22,21,22,21,40,40,41,42,41,43,44,45,40,43,44,40,42,42,6,6,6,0,0,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,25,25,6,25,6,25,25,6,6,25,6,6,6,6,6,6,6,6,6,6,6,25,6,25,6,6,25,6,25,6,25,6,25,6,25,6,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,39,46,47,39,46,47,39,39,39,39,46,46,46,39,39,39,46,47,39,39,46,47,39,39,39,39,46,47,39,39,39,39,39,39,39,39,39,46,47,46,47,46,47,46,47,39,39,39,39,46,47,39,46,47,39,46,47,39,46,47,39],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[]],0,[2,[[4,[3]]]],0,0,[[]],[[]],[[]],[1,[[7,[5,6]]]],[[1,[9,[8]],[9,[8]]],[[7,[10]]]],[1,[[7,[[5,[11]],6]]]],[[1,8],[[7,[[9,[12]],6]]]],[1,[[7,[13,6]]]],[1,[[7,[[5,[14]],6]]]],[[1,8],[[7,[12,6]]]],[1,[[7,[15,6]]]],[[]],[[]],[[]],0,0,[[1,12,8,16],[[7,[6]]]],0,[[17,2],[[7,[18,6]]]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[]],[[]],[[]],[2,[[7,[3,6]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[21,21],[[]],[[22,23],24],[[21,23],24],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[25,23],24],[[25,23],24],[[6,23],24],[[6,23],24],[[]],[26,6],[[]],[27,6],[28,6],[29,6],[[[30,[26]]],6],[31,6],[32,6],[33,6],[[[34,[3]]],6],[35,6],[[]],[[]],[36],[36],[6,[[9,[37]]]],[[],38],[[],38],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],0,0,[[]],[[]],[3,3],[[]],[[3,23],24],[[]],[[]],[[]],[[],19],[[],19],[[],20],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[39,39],[[]],0,0,0,0,0,0,0,0,[[39,23],24],0,[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[]],[[]],[[]]],"p":[[3,"ConsensusCommandSender"],[3,"ConsensusEventReceiver"],[4,"ConsensusEvent"],[3,"VecDeque"],[3,"Vec"],[4,"ConsensusError"],[6,"ConsensusResult"],[3,"Slot"],[4,"Option"],[3,"BlockGraphExport"],[4,"BlockGraphStatus"],[3,"BlockId"],[3,"BootstrapableGraph"],[3,"Clique"],[3,"ConsensusStats"],[3,"Storage"],[3,"ConsensusManager"],[3,"ProtocolEventReceiver"],[4,"Result"],[3,"TypeId"],[4,"ConsensusManagementCommand"],[4,"ConsensusCommand"],[3,"Formatter"],[6,"Result"],[4,"InternalError"],[4,"ProtocolError"],[4,"CipherError"],[4,"ExecutionError"],[4,"ModelsError"],[3,"Box"],[3,"JoinError"],[4,"TimeError"],[3,"Error"],[3,"SendError"],[4,"GraphError"],[3,"Demand"],[8,"Error"],[3,"String"],[3,"ConsensusConfig"],[13,"SendBlock"],[13,"GetBlockStatuses"],[13,"GetBlockGraphStatus"],[13,"GetBlockcliqueBlockAtSlot"],[13,"GetLatestBlockcliqueBlockAtSlot"],[13,"GetBestParents"],[3,"ConsensusWorkerChannels"],[3,"ConsensusChannels"]]},\
"massa_consensus_worker":{"doc":"Copyright (c) 2022 MASSA LABS info@massa.net","t":[5],"n":["start_consensus_controller"],"q":["massa_consensus_worker"],"d":["Creates a new consensus controller."],"i":[0],"f":[[[1,2,[4,[3]],5,6],7]],"p":[[3,"ConsensusConfig"],[3,"ConsensusChannels"],[3,"BootstrapableGraph"],[4,"Option"],[3,"Storage"],[15,"i64"],[6,"ConsensusResult"]]},\
"massa_executed_ops":{"doc":"Copyright (c) 2022 MASSA LABS info@massa.net","t":[3,6,3,3,3,3,3,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ExecutedOps","ExecutedOpsChanges","ExecutedOpsChangesDeserializer","ExecutedOpsChangesSerializer","ExecutedOpsConfig","ExecutedOpsDeserializer","ExecutedOpsSerializer","apply_changes","bootstrap_part_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","contains","default","default","deserialize","deserialize","fmt","fmt","from","from","from","from","from","from","get_executed_ops_part","hash","into","into","into","into","into","into","is_empty","len","new","new","new","new","new","ops","serialize","serialize","set_executed_ops_part","sorted_ops","thread_count","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["massa_executed_ops","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A structure to list and prune previously executed …","Speculatives changes for ExecutedOps","Deserializer for <code>ExecutedOps</code>","<code>ExecutedOps</code> Serializer","","Deserializer for <code>ExecutedOps</code>","<code>ExecutedOps</code> Serializer","Apply speculative operations changes to the final executed …","Maximum size of a bootstrap part","","","","","","","","","","","","","","","","","Check if an operation was executed","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a part of the executed operations. Used exclusively by …","Accumulated hash of the executed operations","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check executed ops emptiness","Returns the number of executed operations","Create a new <code>ExecutedOps</code> Serializer","Create a new deserializer for <code>ExecutedOps</code>","Create a new <code>ExecutedOps</code> Serializer","Create a new deserializer for <code>ExecutedOps</code>","Creates a new <code>ExecutedOps</code>","Executed operations only for better insertion complexity","","","Set a part of the executed operations. Used exclusively by …","Executed operations btreemap with slot as index for better …","Number of threads","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,4,7,9,8,15,4,1,7,9,8,15,4,1,4,1,4,1,1,7,8,9,15,4,1,7,9,8,15,4,1,1,1,7,9,8,15,4,1,1,1,7,9,8,15,1,1,7,8,1,1,4,4,1,7,9,8,15,4,1,7,9,8,15,4,1,7,9,8,15,4,1,7,9,8,15,4,1],"f":[0,0,0,0,0,0,0,[[1,2,3]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,4],[1,1],[[]],[[]],[[1,5],6],[[],7],[[],8],[9,[[14,[[11,[3,[10,[5]]]],[0,[12,13]]]]]],[15,[[14,[2,[0,[12,13]]]]]],[[4,16],17],[[1,16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[1,[18,[3]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[1,6],[1,19],[[],7],[[20,21,21],9],[[],8],[[20,21],15],[4,1],0,[[7,11,22],[[24,[23]]]],[[8,2,22],[[24,[23]]]],[[1,[11,[3,[10,[5]]]]],[[18,[3]]]],0,0,[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"ExecutedOps"],[6,"ExecutedOpsChanges"],[3,"Slot"],[3,"ExecutedOpsConfig"],[3,"OperationId"],[15,"bool"],[3,"ExecutedOpsSerializer"],[3,"ExecutedOpsChangesSerializer"],[3,"ExecutedOpsDeserializer"],[6,"PreHashSet"],[3,"BTreeMap"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[3,"ExecutedOpsChangesDeserializer"],[3,"Formatter"],[6,"Result"],[4,"StreamingStep"],[15,"usize"],[15,"u8"],[15,"u64"],[3,"Vec"],[4,"SerializeError"],[4,"Result"],[3,"TypeId"]]},\
"massa_execution_exports":{"doc":"Overview","t":[13,13,13,3,3,3,8,4,8,3,3,13,13,13,13,13,13,3,3,3,4,13,13,13,3,13,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,10,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,10,10,10,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,12,12,12,12,12,11,12,12,10,12,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["BlockGasError","BytecodeExecution","ChannelError","EventStore","ExecutionAddressInfo","ExecutionConfig","ExecutionController","ExecutionError","ExecutionManager","ExecutionOutput","ExecutionStackElement","FunctionCall","IncludeOperationError","InvalidSlotRange","MassaHashError","ModelsError","NotEnoughGas","ReadOnlyCallRequest","ReadOnlyExecutionOutput","ReadOnlyExecutionRequest","ReadOnlyExecutionTarget","RollBuyError","RollSellError","RuntimeError","StorageCostsConstants","TransactionError","address","block_id","block_reward","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_stack","call_stack","candidate_balance","candidate_datastore_keys","candidate_roll_count","clear","clock_compensation","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_box","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","coins","cursor_delay","cycle_infos","default","endorsement_count","events","execute_readonly_request","extend","final_balance","final_datastore_keys","final_roll_count","finalize","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","future_deferred_credits","gas_cost","genesis_timestamp","get_addresses_infos","get_cycle_active_rolls","get_filtered_sc_output_event","get_filtered_sc_output_events","get_final_and_active_data_entry","get_final_and_candidate_balance","get_stats","into","into","into","into","into","into","into","into","into","into","into","ledger_cost_per_byte","ledger_entry_base_cost","ledger_entry_datastore_base_cost","max_async_gas","max_bytecode_size","max_datastore_key_length","max_datastore_value_size","max_final_events","max_gas","max_gas","max_gas_per_block","max_miss_ratio","operation_datastore","operation_validity_period","out","owned_addresses","parameter","periods_per_cycle","provide","prune","push","readonly_queue_length","roll_price","simulated_gas_price","simulated_gas_price","slot","source","state_changes","stats_time_window_duration","stop","storage_costs_constants","t0","take","target","target_addr","target_func","thread_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unexecuted_ops_among","update_blockclique_status","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","parameter","target_addr","target_func"],"q":["massa_execution_exports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_execution_exports::ReadOnlyExecutionTarget","",""],"d":["Block gas error: {0}","Execute the main function of a bytecode","Channel error","Store for events emitted by smart contracts","Execution info about an address","Execution module configuration","interface that communicates with the execution worker …","Errors of the execution component.","Execution manager used to stop the execution thread","structure describing the output of a single execution","Structure describing an element of the execution stack. …","Execute a function call","Include operation error: {0}","Invalid slot range","<code>MassaHashError</code>: {0}","<code>ModelsError</code>: {0}","Not enough gas in the block: {0}","structure describing a read-only call","structure describing the output of a read only execution","structure describing different types of read-only …","structure describing different possible targets of a …","<code>RollBuy</code> error: {0}","<code>RollSell</code> error: {0}","Runtime error: {0}","Storage cost constants","<code>Transaction</code> error: {0}","Called address","optional block ID at that slot (None if miss)","block creation reward","","","","","","","","","","","","","","","","","","","","","","","Call stack to simulate, older caller first","Call stack to simulate, older caller first. Target should …","candidate balance of the address","candidate datastore keys of the address","candidate number of rolls the address has","Clear the event store","time compensation in milliseconds","","","","","","","","","","","","Returns a boxed clone of self. Useful to allow cloning …","","","","","","","","","","","","Coins transferred to the target address during the call","extra lag to add on the execution cursor to improve …","cycle information","","endorsement count","events emitted by the execution step","Execute read-only SC function call without causing …","Extend the event store with another store","final balance of the address","final datastore keys of the address","final number of rolls the address has","Set the events of this store as final","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","future deferred credits","Gas cost for this execution","genesis timestamp","Gets information about a batch of addresses","Returns for a given cycle the stakers taken into account …","Get execution events optionally filtered by:","Get events optionally filtered by:","Get a copy of a single datastore entry with its final and …","Get the final and active values of balance.","Get execution statistics","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Cost per byte in ledger","Ledger entry base cost","Ledger entry datastore base cost","maximum available gas for asynchronous messages execution","Max bytecode size","Max size of a datastore key","Max datastore value size","maximum number of SC output events kept in cache","Maximum gas to spend in the execution.","Maximum gas to spend in the execution.","maximum gas per block","Max miss ratio for auto roll sell","Datastore (key value store) for <code>ExecuteSC</code> Operation","operation validity period","Output of a single execution","List of addresses owned by the current call, and on which …","Parameter to pass to the target function","periods per cycle","","Prune the event store if its size is over the given limit","Push a new smart contract event to the store","read-only execution request queue length","price of a roll inside the network","The simulated price of gas for the read-only execution.","The simulated price of gas for the read-only execution.","slot","","state changes caused by the execution step","duration of the statistics time window","Stop the execution thread Note that we do not take self by …","Storage cost constants","period duration","Take the event store","Target of the request","Target address","Target function","number of threads","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","List which operations inside the provided list were not …","Updates blockclique status by signaling newly finalized …","","","","","","","","","","","","Parameter to pass to the target function","Target address","Target function"],"i":[2,9,2,0,0,0,0,0,0,0,0,9,2,2,2,2,2,0,0,0,0,2,2,2,0,2,11,6,4,2,1,3,4,5,6,7,8,9,10,11,2,1,3,4,5,6,7,8,9,10,11,8,10,5,5,5,1,4,2,1,3,4,5,6,7,8,9,10,11,12,2,1,3,4,5,6,7,8,9,10,11,11,4,5,1,4,6,12,1,5,5,5,1,2,2,1,3,4,5,6,7,8,9,10,11,2,2,2,1,3,4,5,6,7,8,9,10,11,5,7,4,12,12,12,1,12,12,12,2,1,3,4,5,6,7,8,9,10,11,3,3,3,4,4,4,4,4,8,10,4,4,11,4,7,11,10,4,2,1,1,4,4,8,10,6,2,6,4,41,4,4,1,8,10,10,4,2,1,3,4,5,6,7,8,9,10,11,2,2,1,3,4,5,6,7,8,9,10,11,2,1,3,4,5,6,7,8,9,10,11,2,1,3,4,5,6,7,8,9,10,11,12,12,2,1,3,4,5,6,7,8,9,10,11,42,42,42],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[1],0,[2,2],[1,1],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[[],[[13,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],1],0,0,[8,[[14,[7,2]]]],[[1,1]],0,0,0,[1],[[2,15],16],[[2,15],16],[[1,15],16],[[3,15],16],[[4,15],16],[[5,15],16],[[6,15],16],[[7,15],16],[[8,15],16],[[9,15],16],[[10,15],16],[[11,15],16],[[]],[17,2],[18,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],[[19,[5]]]],[20,[[22,[21,20]]]],[23,[[19,[24]]]],[[1,23],[[25,[24]]]],[19,19],[[],19],[[],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[27],[[1,28]],[[1,24]],0,0,0,0,0,[2,[[30,[29]]]],0,0,[[]],0,0,[1,[[25,[24]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[33,34],[[33,[35]]]],[[[38,[36,37]],[30,[[38,[36,37]]]],[40,[37,39]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0],"p":[[3,"EventStore"],[4,"ExecutionError"],[3,"StorageCostsConstants"],[3,"ExecutionConfig"],[3,"ExecutionAddressInfo"],[3,"ExecutionOutput"],[3,"ReadOnlyExecutionOutput"],[3,"ReadOnlyExecutionRequest"],[4,"ReadOnlyExecutionTarget"],[3,"ReadOnlyCallRequest"],[3,"ExecutionStackElement"],[8,"ExecutionController"],[3,"Box"],[4,"Result"],[3,"Formatter"],[6,"Result"],[4,"MassaHashError"],[4,"ModelsError"],[3,"Vec"],[15,"u64"],[3,"Address"],[3,"BTreeMap"],[3,"EventFilter"],[3,"SCOutputEvent"],[3,"VecDeque"],[3,"ExecutionStats"],[3,"Demand"],[15,"usize"],[8,"Error"],[4,"Option"],[3,"String"],[3,"TypeId"],[6,"PreHashSet"],[15,"u8"],[3,"OperationId"],[3,"Slot"],[3,"BlockId"],[3,"HashMap"],[3,"Storage"],[6,"PreHashMap"],[8,"ExecutionManager"],[13,"FunctionCall"]]},\
"massa_execution_worker":{"doc":"General description","t":[5],"n":["start_execution_worker"],"q":["massa_execution_worker"],"d":["Launches an execution worker thread and returns an …"],"i":[0],"f":[[[1,[4,[[3,[2]]]],[6,[5]]]]],"p":[[3,"ExecutionConfig"],[3,"FinalState"],[6,"RwLock"],[3,"Arc"],[8,"SelectorController"],[3,"Box"]]},\
"massa_factory_exports":{"doc":"Definition and exports of the PoS types and errors.","t":[3,3,4,8,6,13,6,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,12,12,11,11,11,12,12,12,12,11,12,10,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FactoryChannels","FactoryConfig","FactoryError","FactoryManager","FactoryResult","GenericError","ProductionHistory","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clock_compensation_millis","clone","clone","clone_into","clone_into","consensus","fmt","fmt","fmt","from","from","from","genesis_timestamp","initial_delay","into","into","into","max_block_gas","max_block_size","pool","protocol","provide","selector","stop","storage","t0","thread_count","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":["massa_factory_exports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["List of channels the factory will send commands to","Structure defining the settings of the factory","factory error","Factory manager used to stop the factory thread","factory result","Generic error: {0}","History of block production from latest to oldest todo: …","","","","","","","clock compensation in relative milliseconds","","","","","consensus controller","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","genesis timestamp","initial delay before starting production, to avoid …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","maximal block gas","maximal block size in bytes","pool controller","protocol controller","","selector controller to get draws","Stop the factory thread Note that we do not take self by …","storage instance","period duration","number of threads","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,5,0,1,5,2,1,5,2,1,1,2,1,2,2,1,5,5,1,5,2,1,1,1,5,2,1,1,2,2,5,2,10,2,1,1,1,2,5,1,5,2,1,5,2,1,5,2,1,5,2],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[2,2],[[]],[[]],0,[[1,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[]],0,0,[[]],[[]],[[]],0,0,0,0,[6],0,[[]],0,0,0,[[]],[[]],[[],7],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[],9],[[]],[[]],[[]]],"p":[[3,"FactoryConfig"],[3,"FactoryChannels"],[3,"Formatter"],[6,"Result"],[4,"FactoryError"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"FactoryManager"]]},\
"massa_factory_worker":{"doc":"Copyright (c) 2022 MASSA LABS info@massa.net","t":[5],"n":["start_factory"],"q":["massa_factory_worker"],"d":["Start factory"],"i":[0],"f":[[[1,[4,[[3,[2]]]],5],[[7,[6]]]]],"p":[[3,"FactoryConfig"],[3,"Wallet"],[6,"RwLock"],[3,"Arc"],[3,"FactoryChannels"],[8,"FactoryManager"],[3,"Box"]]},\
"massa_final_state":{"doc":"Copyright (c) 2022 MASSA LABS info@massa.net","t":[3,3,4,13,13,3,3,3,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,12,11,11,11,12,12,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FinalState","FinalStateConfig","FinalStateError","LedgerError","PosError","StateChanges","StateChangesDeserializer","StateChangesSerializer","apply","async_pool","async_pool_changes","async_pool_config","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","changes_history","clone","clone","clone_into","clone_into","compute_initial_draws","default","default","deserialize","executed_ops","executed_ops_changes","executed_ops_config","final_history_length","finalize","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_state_changes_part","initial_rolls_path","initial_seed_string","into","into","into","into","into","into","ledger","ledger_changes","ledger_config","new","new","new","periods_per_cycle","pos_changes","pos_config","pos_state","provide","serialize","slot","thread_count","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["massa_final_state","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Represents a final state …","Ledger configuration","Final state error","ledger error: {0}","PoS error: {0}","represents changes that can be applied to the execution …","Basic <code>StateChanges</code> deserializer","Basic <code>StateChanges</code> serializer.","extends the current <code>StateChanges</code> with another one","asynchronous pool containing messages sorted by priority …","asynchronous pool changes","asynchronous pool configuration","","","","","","","","","","","","","history of recent final state changes, useful for …","","","","","Performs the initial draws.","","","Example","executed operations","executed operations changes","exectued operations configuration","final changes history length","Applies changes to the execution state at a given slot, …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Used for bootstrap.","initial rolls file path","initial PoS seed string","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","final ledger associating addresses to their balance, …","ledger changes","ledger configuration","Initializes a new <code>FinalState</code>","Creates a <code>StateChangesSerializer</code>","Creates a <code>StateChangesDeserializer</code>","periods per cycle","roll state changes","proof-of-stake configuration","proof of stake state containing cycle history and deferred …","","Example","slot at the output of which the state is attached","thread count","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,4,4,0,0,0,1,3,1,2,3,6,7,2,4,1,3,6,7,2,4,1,3,2,1,2,1,3,6,1,7,3,1,2,2,3,2,4,4,1,3,6,7,2,4,1,3,2,2,3,6,7,2,4,1,3,1,2,3,6,7,2,1,2,3,4,6,3,2,2,1,4,3,6,7,2,4,1,3,6,7,2,4,1,3,6,7,2,4,1,3,6,7,2,4,1],"f":[0,0,0,0,0,0,0,0,[[1,1]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[2,2],[1,1],[[]],[[]],[3,[[5,[4]]]],[[],6],[[],1],[7,[[10,[1,[0,[8,9]]]]]],0,0,0,0,[[3,11,1]],[[2,12],13],[[4,12],13],[[4,12],13],[[1,12],13],[[]],[[]],[[]],[[]],[[]],[[]],[[3,11,[16,[[15,[14]]]],[16,[17]],[16,[18]],[16,[11]],[16,[11]]],[[5,[15,4]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[2,[20,[19]],[20,[21]]],[[5,[3,4]]]],[[],6],[[14,18,18,18,14,18,18,18,18,18,18],7],0,0,0,0,[22],[[6,1,15],[[5,[23]]]],0,0,[[]],[[]],[[],24],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"StateChanges"],[3,"FinalStateConfig"],[3,"FinalState"],[4,"FinalStateError"],[4,"Result"],[3,"StateChangesSerializer"],[3,"StateChangesDeserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[3,"Slot"],[3,"Formatter"],[6,"Result"],[15,"u8"],[3,"Vec"],[4,"StreamingStep"],[6,"AsyncMessageId"],[15,"u64"],[8,"LedgerController"],[3,"Box"],[8,"SelectorController"],[3,"Demand"],[4,"SerializeError"],[3,"String"],[3,"TypeId"]]},\
"massa_graph":{"doc":"graph management","t":[13,13,3,3,3,3,3,4,13,4,3,13,13,13,13,13,13,4,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,12,11,11,11,11,0,0,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,4,6,13,13,4,13,4,13,13,6,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,12,11,12,11,12,12,11,12,12,12,12,12,12,11,12,11,11,11,11,11],"n":["Active","Active","BlockGraph","BlockGraphExport","BootstrapableGraph","BootstrapableGraphDeserializer","BootstrapableGraphSerializer","DiscardReason","Discarded","ExportBlockStatus","ExportCompiledBlock","Final","Final","Final","Incoming","Invalid","Stale","Status","WaitingForDependencies","WaitingForSlot","active_blocks","best_parents","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","children","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compute_max_cliques","create_genesis_block","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","discarded_blocks","eq","eq","equivalent","equivalent","error","export_active_block","export_bootstrap_graph","extract_from","final_blocks","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","genesis_blocks","get_active_block","get_all_final_blocks","get_attack_attempts","get_best_parents","get_block_ids_by_creator","get_block_status","get_block_wishlist","get_blockclique","get_blockclique_block_at_slot","get_blocks_to_propagate","get_clique_count","get_cliques","get_genesis_block_ids","get_latest_blockclique_block_at_slot","get_latest_final_blocks_periods","get_new_final_blocks","get_new_stale_blocks","gi_head","header","incoming_block","incoming_header","into","into","into","into","into","into","into","into","into","invalid_block","is_final","latest_final_blocks_periods","max_cliques","new","new","new","prune","serialize","serialize","serialize","serialize","serialize","serialize","settings","slot_tick","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AmountOverflowError","ContainerInconsistency","ExecutionError","FitnessOverflow","GenesisCreationError","GraphError","GraphResult","IOError","IOError","InternalError","InvalidLedgerChange","LedgerError","LedgerError","LedgerInconsistency","LedgerResult","MissingBlock","MissingOperation","ModelsError","ModelsError","PosCycleUnavailable","SerdeError","SerdeError","TransactionError","TransactionError","TryFromSliceError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","provide","provide","provide","source","source","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ExportActiveBlock","ExportActiveBlockDeserializer","ExportActiveBlockSerializer","block","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","deserialize","deserialize","fmt","from","from","from","from_active_block","into","into","into","is_final","new","new","operations","parents","serialize","serialize","to_active_block","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","GraphConfig","borrow","borrow_mut","clone","clone_into","delta_f0","deserialize","endorsement_count","fmt","force_keep_final_periods","from","future_block_processing_max_periods","genesis_key","into","max_dependency_blocks","max_discarded_blocks","max_future_processing_blocks","max_item_return_count","operation_validity_periods","periods_per_cycle","serialize","thread_count","to_owned","try_from","try_into","type_id","vzip"],"q":["massa_graphmassa_graph::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_graph::export_active_block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_graph::settings","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["valid and not yet final","without enough fitness to be part of immutable history","Graph management","Bootstrap compatible version of the block graph","Bootstrap graph","Basic deserializer for <code>BootstrapableGraph</code>","Basic serializer for <code>BootstrapableGraph</code>","Something can be discarded","not part of the graph","Block status in the graph that can be exported.","The block version that can be exported. Note that the …","Block has enough fitness.","immutable","with enough fitness to be part of immutable history","received but not yet graph processed","Block is invalid, either structurally, or because of some …","Block is incompatible with a final block.","Status","waiting for a missing dependency","waiting for its slot","Map of active blocks, were blocks are in their exported …","Best parents hashes in each thread.","","","","","","","","","","","","","","","","","","","For (i, set) in children, set contains the headers’ …","","","","","","","","","","","","","Computes max cliques of compatible blocks","Creates genesis block in given thread.","","Example","","","","","","Finite cache of discarded blocks, in exported version …","","","","","graph errors","useful structures","export full graph in a bootstrap compatible version","Conversion from blockgraph.","list of final blocks","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Genesis blocks.","Gets whole compiled block corresponding to given hash, if …","Gets all stored final blocks, not only the still-useful …","Get the hashes of objects that were attack attempts. Must …","Gets best parents.","Returns the list of block IDs created by a given address, …","get block graph status","get the current block wish list, including the operations …","get the clique of higher fitness","get the blockclique (or final) block ID at a given slot, …","Get the block id’s to be propagated. Must be called by …","get clique count","Gets the list of cliques.","get genesis block ids","get the latest blockclique (or final) block ID that is the …","Gets latest final blocks (hash, period) for each thread.","Get the ids of blocks that became final. Must be called by …","Get the ids of blocks that became stale. Must be called by …","Head of the incompatibility graph.","Header of the corresponding block.","A new block has come","A new header has come !","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mark a block as invalid","Active or final","Latest final period and block hash in each thread.","List of maximal cliques of compatible blocks.","Creates a <code>BootstrapableGraphDeserializer</code>","Creates a new <code>BlockGraph</code>.","Creates a <code>BootstrapableGraphSerializer</code>","prune and return final blocks, return discarded final …","","Example","","","","","graph settings","signal new slot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","amount overflow","there was an inconsistency between containers {0}","execution error: {0}","fitness overflow","Could not create genesis block {0}","Graph error","Result used in the graph","io error {0}","io error {0}","Internal error","invalid ledger change: {0}","Ledger error","Ledger error {0}","ledger inconsistency error {0}","Result used in the ledger","missing block {0}","missing operation {0}","models error: {0}","models error: {0}","Proof of stake cycle unavailable {0}","serde error","serde error","transaction error {0}","transaction error {0}","try from slice error {0}","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Exportable version of <code>ActiveBlock</code> Fields that can be …","Basic deserializer of <code>ExportActiveBlock</code>","Basic serializer of <code>ExportActiveBlock</code>","The block.","","","","","","","","","","Example:","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","conversion from active block to export active block","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","for example has its fitness reached the given threshold","Create a new <code>ExportActiveBlockDeserializer</code>","Create a new <code>ExportActiveBlockSerializer</code>","The operations.","one <code>(block id, period)</code> per thread ( if not genesis )","","","consuming conversion from <code>ExportActiveBlock</code> to <code>ActiveBlock</code>","","","","","","","","","","","","","","Graph configuration","","","","","Threshold for fitness.","","target number of endorsement per block","","force keep at least this number of final periods in RAM …","Returns the argument unchanged.","If a block <code>is future_block_processing_max_periods</code> periods …","Keypair to sign genesis blocks.","Calls <code>U::from(self)</code>.","Maximum number of blocks allowed in <code>DependencyWaitingBlocks</code>…","Maximum number of blocks allowed in discarded blocks.","Maximum number of blocks allowed in <code>FutureIncomingBlocks</code>.","pub <code>block_db_prune_interval</code>: <code>MassaTime</code>,","Maximum operation validity period count","cycle duration in periods","","Number of threads","","","","",""],"i":[3,5,0,0,0,0,0,0,3,0,0,2,3,5,3,2,2,0,3,3,6,6,15,7,1,14,2,3,4,5,6,15,7,1,14,2,3,4,5,6,4,1,2,3,4,5,6,1,2,3,4,5,6,7,0,14,15,1,2,3,4,5,6,2,5,2,5,0,0,7,6,1,1,2,3,4,5,6,15,7,1,14,2,3,4,5,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,6,4,7,7,15,7,1,14,2,3,4,5,6,7,4,6,6,15,7,14,7,1,14,2,3,4,5,0,7,1,2,3,4,5,6,15,7,1,14,2,3,4,5,6,15,7,1,14,2,3,4,5,6,15,7,1,14,2,3,4,5,6,15,7,1,14,2,3,4,5,6,43,33,33,33,33,0,0,33,43,0,33,0,33,43,0,33,33,33,43,33,33,43,33,42,43,33,42,43,33,42,43,33,33,42,42,43,43,33,33,33,33,33,33,42,43,43,43,43,43,33,42,43,33,42,43,33,43,33,42,43,33,42,43,33,42,43,33,42,43,33,42,43,0,0,0,52,54,52,53,54,52,53,52,52,53,54,52,52,54,52,53,52,54,52,53,52,54,53,52,52,52,53,52,52,54,52,53,54,52,53,54,52,53,54,52,53,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],[7,[[10,[[9,[8]]]]]],[[11,12],13],[[],14],[15,[[18,[1,[0,[16,17]]]]]],[[],[[19,[1]]]],[[],[[19,[2]]]],[[],[[19,[3]]]],[[],[[19,[4]]]],[[],[[19,[5]]]],0,[[2,2],20],[[5,5],20],[[],20],[[],20],0,0,[7,[[13,[1]]]],[[7,[22,[21]],[22,[21]]],[[13,[6]]]],0,[[1,23],24],[[2,23],24],[[3,23],24],[[4,23],24],[[5,23],24],[[6,23],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[7,8],22],[7,[[25,[8,21]]]],[7,[[10,[8]]]],[7,10],[[7,26],[[27,[8,5]]]],[[7,8],28],[7,[[13,[[27,[8,[22,[29]]]]]]]],[7,9],[[7,21],[[22,[8]]]],[7,[[27,[8,30]]]],[7,31],[7,[[10,[32]]]],[7,10],[[7,21],8],[7,10],[7,[[9,[8]]]],[7,[[27,[8]]]],0,0,[[7,8,21,[22,[21]],30],13],[[7,8,29,[22,[21]]],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[7,8,29],[[13,[33]]]],0,0,0,[[12,34,34,35,36,34,34,35,12,35],15],[[11,[22,[1]],30,[38,[37]]],[[13,[7]]]],[[],14],[7,[[13,[[27,[8,39]]]]]],[1,19],[[14,1,10],[[19,[40]]]],[2,19],[3,19],[4,19],[5,19],0,[[7,[22,[21]]],13],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[],41],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[33,23],24],[[33,23],24],[[42,23],24],[[42,23],24],[[43,23],24],[[43,23],24],[44,33],[45,33],[46,33],[47,33],[43,33],[[]],[[]],[47,43],[[]],[46,43],[48,43],[44,43],[[]],[[]],[[]],[49],[49],[49],[33,[[22,[50]]]],[43,[[22,[50]]]],[[],51],[[],51],[[],51],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],41],[[],41],[[],41],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[52,52],[[]],[[],53],[54,[[18,[52,[0,[16,17]]]]]],[[],[[19,[52]]]],[[52,23],24],[[]],[[]],[[]],[[39,30],52],[[]],[[]],[[]],0,[[12,34,34,35,36,34,35,12,35],54],[[],53],0,0,[52,19],[[53,52,10],[[13,[40]]]],[[52,30,12],[[13,[33]]]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],41],[[],41],[[],41],[[]],[[]],[[]],0,[[]],[[]],[11,11],[[]],0,[[],[[19,[11]]]],0,[[11,23],24],0,[[]],0,0,[[]],0,0,0,0,0,0,[11,19],0,[[]],[[],19],[[],19],[[],41],[[]]],"p":[[3,"BootstrapableGraph"],[4,"DiscardReason"],[4,"ExportBlockStatus"],[3,"ExportCompiledBlock"],[4,"Status"],[3,"BlockGraphExport"],[3,"BlockGraph"],[3,"BlockId"],[6,"PreHashSet"],[3,"Vec"],[3,"GraphConfig"],[15,"u8"],[6,"GraphResult"],[3,"BootstrapableGraphSerializer"],[3,"BootstrapableGraphDeserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[4,"Result"],[15,"bool"],[3,"Slot"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"HashMap"],[3,"Address"],[6,"PreHashMap"],[4,"BlockGraphStatus"],[6,"WrappedHeader"],[3,"Storage"],[15,"usize"],[3,"Clique"],[4,"GraphError"],[15,"u32"],[15,"u64"],[15,"u16"],[8,"SelectorController"],[3,"Box"],[3,"ActiveBlock"],[4,"SerializeError"],[3,"TypeId"],[4,"InternalError"],[4,"LedgerError"],[3,"Error"],[4,"ExecutionError"],[4,"ModelsError"],[3,"Error"],[3,"TryFromSliceError"],[3,"Demand"],[8,"Error"],[3,"String"],[3,"ExportActiveBlock"],[3,"ExportActiveBlockSerializer"],[3,"ExportActiveBlockDeserializer"]]},\
"massa_hash":{"doc":"Hash management crate","t":[17,3,3,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["HASH_SIZE_BYTES","Hash","HashDeserializer","HashSerializer","MassaHashError","ParsingError","WrongPrefix","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","compute_from","default","default","deserialize","deserialize","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_bs58_check","from_bytes","from_str","hash","into","into","into","into","into_bytes","new","new","partial_cmp","provide","serialize","serialize","to_bs58_check","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["massa_hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Hash size","Hash wrapper, the underlying hash type is <code>Blake3</code>","Deserializer for <code>Hash</code>","Serializer for <code>Hash</code>","Error generated by massa-hash crate","parsing error : {0}","Wrong prefix for hash: expected {0}, got {1}","","","","","","","","","","","","","","","","","","Compute a hash from data.","","","<code>::serde::Deserialize</code> trait for Hash if the deserializer is …","Example","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize using <code>bs58</code> encoding with checksum.","Deserialize a Hash as bytes.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into bytes.","Creates a serializer for <code>Hash</code>","Creates a deserializer for <code>Hash</code>","","","<code>::serde::Serialize</code> trait for Hash if the serializer is …","","Serialize a Hash using <code>bs58</code> encoding with checksum.","Serialize a Hash as bytes.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,2,2,1,1,2,1,5,3,2,1,5,3,2,1,3,2,1,3,1,1,5,3,1,3,1,2,2,1,1,2,1,5,3,1,1,1,1,2,1,5,3,1,5,3,1,2,1,5,1,1,2,1,3,2,1,2,1,5,3,2,1,5,3,2,1,5,3],"f":[0,0,0,0,0,0,0,[[1,1],1],[[1,1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[1,1],[3,3],[[]],[[]],[[]],[[1,1],4],[[],1],[[],5],[[],3],[6,[[7,[1]]]],[3,[[10,[1,[0,[8,9]]]]]],[[1,1],11],[[2,12],13],[[2,12],13],[[1,12],13],[[1,12],13],[[]],[[]],[[]],[[]],[14,[[7,[1,2]]]],[[],1],[14,[[7,[1]]]],[1],[[]],[[]],[[]],[[]],[1],[[],5],[[],3],[[1,1],[[15,[4]]]],[16],[[1,17],7],[[5,1,18],[[7,[19]]]],[1,20],[1],[[]],[[]],[[]],[[],20],[[],20],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],21],[[],21],[[],21],[[],21]],"p":[[3,"Hash"],[4,"MassaHashError"],[3,"HashDeserializer"],[4,"Ordering"],[3,"HashSerializer"],[8,"Deserializer"],[4,"Result"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Option"],[3,"Demand"],[8,"Serializer"],[3,"Vec"],[4,"SerializeError"],[3,"String"],[3,"TypeId"]]},\
"massa_ledger_exports":{"doc":"General description","t":[8,17,17,13,17,3,3,13,13,13,13,3,3,3,3,3,3,8,3,3,3,3,3,3,4,13,13,13,13,4,4,4,13,10,11,11,11,11,11,11,10,11,12,12,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,10,11,10,11,10,10,10,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Applicable","BALANCE_IDENT","BYTECODE_IDENT","ContainerInconsistency","DATASTORE_IDENT","DatastoreUpdateDeserializer","DatastoreUpdateSerializer","Delete","Delete","FileError","Keep","KeyDeserializer","KeySerializer","LedgerChanges","LedgerChangesDeserializer","LedgerChangesSerializer","LedgerConfig","LedgerController","LedgerEntry","LedgerEntryDeserializer","LedgerEntrySerializer","LedgerEntryUpdate","LedgerEntryUpdateDeserializer","LedgerEntryUpdateSerializer","LedgerError","MissingEntry","Set","Set","Set","SetOrDelete","SetOrKeep","SetUpdateOrDelete","Update","apply","apply","apply","apply","apply","apply","apply","apply_changes","apply_to","balance","balance","balance_key","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytecode","bytecode","bytecode_key","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","create_address","data_key","data_prefix","datastore","datastore","default","default","default","default","default","default","default","default","default","delete_data_entry","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","disk_ledger_path","entry_exists","entry_exists_or_else","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get","get_address_from_key","get_balance","get_balance_or_else","get_bytecode","get_bytecode_or_else","get_data_entry","get_data_entry_or_else","get_datastore_keys","get_ledger_hash","get_ledger_part","has_data_entry","has_data_entry_or_else","initial_ledger_path","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","load_initial_ledger","max_key_length","max_ledger_part_size","new","new","new","new","new","new","new","new","new","new","provide","serialize","serialize","serialize","serialize","serialize","serialize","set_balance","set_bytecode","set_data_entry","set_ledger_part","thread_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["massa_ledger_exportsd":["Trait marking a structure that supports another one (V) …","","","container inconsistency: <code>{0}</code>","","Serializer for <code>datastore</code> field of <code>LedgerEntryUpdate</code>","Serializer for <code>datastore</code> field of <code>LedgerEntryUpdate</code>","Deletes the value T","deletes the value","file error: <code>{0}</code>","keeps the existing value","Basic key deserializer","Basic key serializer","represents a list of changes to multiple ledger entries","<code>LedgerChanges</code> deserializer","<code>LedgerChanges</code> serializer","Ledger configuration","","Structure defining an entry associated to an address in …","Deserializer for <code>LedgerEntry</code>","Serializer for <code>LedgerEntry</code>","represents an update to one or more fields of a <code>LedgerEntry</code>","Deserializer for <code>LedgerEntryUpdate</code>","Serializer for <code>LedgerEntryUpdate</code>","ledger error","missing entry: <code>{0}</code>","Sets the value T a new absolute value T","sets a new absolute value T","sets a new absolute value T","<code>Enum</code> representing a set/delete change on a value T","represents a set/keep change","Enumeration representing set/update/delete change on a …","Applies an update V to an existing value T. If the value T …","apply changes from other to mutable self","extends the <code>LedgerEntryUpdate</code> with another one","extends the current <code>LedgerChanges</code> with another one","","","","","Allows applying <code>LedgerChanges</code> to the final ledger","applies the current <code>SetOrKeep</code> to a target mutable value","change the balance","The balance of that entry.","Balance key formatting macro","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","change the executable bytecode","Executable bytecode","Bytecode key formatting macro","","","","","","","","","","","","","","","","","","","Create a new, empty address. Overwrites the address if it …","Datastore entry key formatting macro","Datastore entry prefix formatting macro","change datastore entries","A key-value store associating a hash to arbitrary bytes","","","","","","","","","","Deletes a datastore entry for a given address. Does …","Example","Example","Example","Example","Example","","disk ledger db directory","Checks if a ledger entry exists","Tries to return whether an entry exists or gets the …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get an item from the <code>LedgerChanges</code>","Extract an address from a key","Gets the balance of a ledger entry","Tries to return the balance of an entry or gets it from a …","Gets a copy of the bytecode of a ledger entry","Tries to return the executable bytecode of an entry or …","Gets a copy of the value of a datastore entry for a given …","Tries to return a datastore entry for a given address, or …","Get every key of the datastore for a given address.","Get the current disk ledger hash","Get a part of the ledger Used for bootstrap Return: Tuple …","Checks for the existence of a datastore entry for a given …","Tries to return whether a datastore entry exists for a …","initial SCE ledger file","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Loads ledger from file","max key length","max ledger part size","Creates a new <code>DatastoreUpdateSerializer</code>","Creates a new <code>DatastoreUpdateDeserializer</code>","Creates a new <code>LedgerEntryUpdateSerializer</code>","Creates a new <code>LedgerEntryUpdateDeserializer</code>","Creates a new <code>LedgerChangesSerializer</code>","Creates a new <code>LedgerChangesDeserializer</code>","Creates a new <code>LedgerEntrySerializer</code>","Creates a new <code>LedgerEntryDeserializer</code>","Creates a new <code>KeySerializer</code>","Creates a new <code>KeyDeserializer</code>","","Example","Example","Example","Example","","","Set the balance of an address. If the address doesn’t …","Set the executable bytecode of an address. If the address …","Set a datastore entry for a given address. If the address …","Set a part of the ledger Used for bootstrap Return: Last …","thread count","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,35,0,0,0,6,8,35,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,6,8,9,0,0,0,6,5,1,2,3,6,8,9,48,9,1,3,0,15,21,16,26,17,27,18,28,11,35,12,13,1,2,3,6,8,9,15,21,16,26,17,27,18,28,11,35,12,13,1,2,3,6,8,9,1,3,0,11,12,13,1,2,3,6,8,9,11,12,13,1,2,3,6,8,9,2,0,0,1,3,15,16,17,18,12,1,2,3,9,2,21,26,27,28,13,3,11,48,2,1,2,3,6,8,9,11,35,35,1,2,3,6,8,9,15,21,16,26,17,27,18,28,11,35,12,13,1,2,3,6,8,9,2,0,48,2,48,2,48,2,48,48,48,48,2,11,15,21,16,26,17,27,18,28,11,35,12,13,1,2,3,6,8,9,48,11,11,15,21,16,26,17,27,18,28,12,13,35,15,16,17,18,12,3,2,2,2,48,11,11,12,13,1,2,3,6,8,9,35,15,21,16,26,17,27,18,28,11,35,12,13,1,2,3,6,8,9,15,21,16,26,17,27,18,28,11,35,12,13,1,2,3,6,8,9,15,21,16,26,17,27,18,28,11,35,12,13,1,2,3,6,8,9,15,21,16,26,17,27,18,28,11,35,12,13,1,2,3,6,8,9],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[1,1]],[[2,2]],[[3,1]],[[[6,[[0,[4,[5,[[5,[[5,[5]]]]]]]],[5,[[5,[[5,[5]]]]]]]],[6,[[0,[4,[5,[[5,[[5,[5]]]]]]]],[5,[[5,[[5,[5]]]]]]]]]],[[[8,[7]],[8,[7]]]],[[[9,[7]],[9,[7]]]],[[2,10]],[[[9,[7]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[11,11],[12,12],[13,13],[1,1],[2,2],[3,3],[[[6,[[0,[7,4,[5,[[0,[7,[5,[[0,[7,[5,[[0,[7,5,7]]]],7]]]],7]]]]]],[0,[7,[5,[[0,[7,[5,[[0,[7,[5,[[0,[7,5,7]]]],7]]]],7]]]],7]]]]],[[6,[[0,[7,4,[5,[[0,[7,[5,[[0,[7,[5,[[0,[7,5,7]]]],7]]]],7]]]]]],[0,[7,[5,[[0,[7,[5,[[0,[7,[5,[[0,[7,5,7]]]],7]]]],7]]]],7]]]]]],[[[8,[[0,[7,7]]]]],[[8,[[0,[7,7]]]]]],[[[9,[[0,[7,7]]]]],[[9,[[0,[7,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,14]],0,0,0,0,[[],15],[[],16],[[],17],[[],18],[[],12],[[],1],[[],2],[[],3],[[],[[9,[7]]]],[[2,14,[20,[19]]]],[21,[[25,[[22,[[20,[19]],[8,[[20,[19]]]]]],[0,[23,24]]]]]],[26,[[25,[1,[0,[23,24]]]]]],[27,[[25,[2,[0,[23,24]]]]]],[28,[[25,[3,[0,[23,24]]]]]],[13,[[25,[[20,[19]],[0,[23,24]]]]]],[[],[[29,[3]]]],0,[14,30],[[2,14,31],30],[[1,1],30],[[2,2],30],[[3,3],30],[[[6,[[0,[32,4,[5,[[0,[32,[5,[[0,[32,[5,[[0,[32,5,7]]]],7]]]],7]]]]]],[0,[32,[5,[[0,[32,[5,[[0,[32,[5,[[0,[32,5,7]]]],7]]]],7]]]],7]]]],6],30],[[[8,[[0,[32,7]]]],8],30],[[[9,[[0,[32,7]]]],9],30],[[11,33],34],[[35,33],34],[[35,33],34],[[1,33],34],[[2,33],34],[[3,33],34],[[[6,[[0,[36,4,[5,[[0,[36,[5,[[0,[36,[5,[[0,[36,5,7]]]],7]]]],7]]]]]],[0,[36,[5,[[0,[36,[5,[[0,[36,[5,[[0,[36,5,7]]]],7]]]],7]]]],7]]]],33],34],[[[8,[[0,[36,7]]]],33],34],[[[9,[[0,[36,7]]]],33],34],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,14],[[37,[6]]]],[[],[[37,[14]]]],[14,[[37,[38]]]],[[2,14,31],[[37,[38]]]],[14,[[37,[[20,[19]]]]]],[[2,14,31],[[37,[[20,[19]]]]]],[14,[[37,[[20,[19]]]]]],[[2,14,31],[[37,[[20,[19]]]]]],[14,[[39,[[20,[19]]]]]],[[],40],[[[41,[[20,[19]]]]],[[29,[42]]]],[14,30],[[2,14,31],30],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[29,[35]]]],0,0,[[],15],[[19,43,43],21],[[],16],[[19,43,43],26],[[],17],[[43,19,43,43],27],[[],18],[[43,19,43],28],[[],12],[19,13],[44],[[15,22,20],[[29,[45]]]],[[16,1,20],[[29,[45]]]],[[17,2,20],[[29,[45]]]],[[18,3,20],[[29,[45]]]],[[12,20,20],[[29,[45]]]],[3,29],[[2,14,38]],[[2,14,[20,[19]]]],[[2,14,[20,[19]],[20,[19]]]],[[[20,[19]]],[[29,[[41,[[20,[19]]]],42]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],46],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"LedgerEntryUpdate"],[3,"LedgerChanges"],[3,"LedgerEntry"],[8,"Default"],[8,"Applicable"],[4,"SetUpdateOrDelete"],[8,"Clone"],[4,"SetOrDelete"],[4,"SetOrKeep"],[3,"Slot"],[3,"LedgerConfig"],[3,"KeySerializer"],[3,"KeyDeserializer"],[3,"Address"],[3,"DatastoreUpdateSerializer"],[3,"LedgerEntryUpdateSerializer"],[3,"LedgerChangesSerializer"],[3,"LedgerEntrySerializer"],[15,"u8"],[3,"Vec"],[3,"DatastoreUpdateDeserializer"],[3,"BTreeMap"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[3,"LedgerEntryUpdateDeserializer"],[3,"LedgerChangesDeserializer"],[3,"LedgerEntryDeserializer"],[4,"Result"],[15,"bool"],[8,"FnOnce"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[4,"LedgerError"],[8,"Debug"],[4,"Option"],[3,"Amount"],[3,"BTreeSet"],[3,"Hash"],[4,"StreamingStep"],[4,"ModelsError"],[15,"u64"],[3,"Demand"],[4,"SerializeError"],[3,"String"],[3,"TypeId"],[8,"LedgerController"]]},\
"massa_ledger_worker":{"doc":"General description","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FinalLedger","apply_changes","borrow","borrow_mut","entry_exists","fmt","from","get_balance","get_bytecode","get_data_entry","get_datastore_keys","get_ledger_hash","get_ledger_part","has_data_entry","into","load_initial_ledger","new","set_ledger_part","try_from","try_into","type_id","vzip"],"q":["massa_ledger_worker","","","","","","","","","","","","","","","","","","","","",""],"d":["Represents a final ledger associating addresses to their …","Allows applying <code>LedgerChanges</code> to the final ledger","","","Checks if a ledger entry exists","","Returns the argument unchanged.","Gets the balance of a ledger entry","Gets a copy of the bytecode of a ledger entry","Gets a copy of the value of a datastore entry for a given …","Get every key of the datastore for a given address.","Get the current disk ledger hash","Get a part of the disk ledger.","Checks for the existence of a datastore entry for a given …","Calls <code>U::from(self)</code>.","Loads ledger from file","Initializes a new <code>FinalLedger</code> by reading its initial state …","Set a part of the disk ledger.","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[1,2,3]],[[]],[[]],[[1,4],5],[[1,6],7],[[]],[[1,4],[[9,[8]]]],[[1,4],[[9,[[11,[10]]]]]],[[1,4],[[9,[[11,[10]]]]]],[[1,4],[[12,[[11,[10]]]]]],[1,13],[[1,[14,[[11,[10]]]]],[[16,[15]]]],[[1,4],5],[[]],[1,[[16,[17]]]],[18,1],[[1,[11,[10]]],[[16,[[14,[[11,[10]]]],15]]]],[[],16],[[],16],[[],19],[[]]],"p":[[3,"FinalLedger"],[3,"LedgerChanges"],[3,"Slot"],[3,"Address"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Amount"],[4,"Option"],[15,"u8"],[3,"Vec"],[3,"BTreeSet"],[3,"Hash"],[4,"StreamingStep"],[4,"ModelsError"],[4,"Result"],[4,"LedgerError"],[3,"LedgerConfig"],[3,"TypeId"]]},\
"massa_logging":{"doc":"Log utilities","t":[14],"n":["massa_trace"],"q":["massa_logging"],"d":["tracing with some context"],"i":[0],"f":[0],"p":[]},\
"massa_models":{"doc":"Copyright (c) 2022 MASSA LABS info@massa.net All the …","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,12,11,11,12,11,11,12,12,11,12,11,11,11,12,12,11,12,11,11,11,11,11,17,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,3,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,4,3,3,3,3,3,3,13,3,3,13,13,3,3,3,13,3,3,3,3,3,3,3,13,13,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,3,4,4,13,3,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,5,11,11,0,11,12,11,12,11,11,11,12,11,12,12,12,12,11,12,12,11,11,11,11,11,11,17,17,17,17,17,17,17,3,17,3,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,17,17,17,17,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,3,3,3,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,4,6,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,4,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,17,17,3,3,3,3,3,3,3,3,3,6,3,3,3,4,3,3,3,3,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,12,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,6,8,3,6,6,8,11,11,11,11,11,11,11,11,11,11,10,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,3,3,18,8,3,3,3,3,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,12,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,4,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,8,3,3,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,12,11,11,11,10,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["active_block","address","amount","api","block","clique","composite","config","datastore","endorsement","error","execution","ledger_models","node","operation","output_event","prehash","rolls","serialization","slot","stats","streaming_step","timeslots","version","wrapped","ActiveBlock","block_id","borrow","borrow_mut","children","clone","clone_into","creator_address","descendants","deserialize","fitness","fmt","from","into","is_final","parents","serialize","slot","to_owned","try_from","try_into","type_id","vzip","ADDRESS_SIZE_BYTES","Address","AddressDeserializer","ExecutionAddressCycleInfo","active_rolls","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cycle","default","deserialize","deserialize","deserialize","eq","fmt","fmt","fmt","from","from","from","from_bs58_check","from_bytes","from_public_key","from_str","get_thread","hash","into","into","into","into_bytes","is_final","new","nok_count","ok_count","partial_cmp","serialize","serialize","to_bs58_check","to_bytes","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","AMOUNT_DECIMAL_FACTOR","Amount","AmountDeserializer","AmountSerializer","MAX","MIN","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_div_u64","checked_mul_u64","checked_sub","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","default","deserialize","deserialize","eq","fmt","fmt","from","from","from","from_mantissa_scale","from_raw","from_str","into","into","into","is_zero","new","new","partial_cmp","saturating_add","saturating_mul_u64","saturating_sub","serialize","serialize","to_owned","to_owned","to_owned","to_raw","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","zero","ActiveInAlternativeCliques","ActiveInBlockclique","AddressInfo","BlockGraphStatus","BlockInfo","BlockInfoContent","BlockSummary","CompactAddressInfo","DatastoreEntryInput","DatastoreEntryOutput","Discarded","EndorsementInfo","EventFilter","Final","Incoming","IndexedSlot","LedgerInfo","NodeStatus","NotFound","OperationInfo","OperationInput","ReadOnlyBytecodeExecution","ReadOnlyCall","RollsInfo","SlotAmount","TimeInterval","WaitingForDependencies","WaitingForSlot","active_rolls","active_rolls","address","address","address","address","amount","block","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytecode","caller_address","candidate_balance","candidate_balance","candidate_datastore_keys","candidate_ledger_info","candidate_roll_count","candidate_rolls","candidate_rolls","candidate_value","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compact","config","connected_nodes","consensus_stats","content","created_blocks","created_endorsements","created_operations","creator","creator_public_key","current_cycle","current_time","cycle_infos","default","deferred_credits","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","emitter_address","end","end","endorsement","eq","eq","execution_stats","final_balance","final_balance","final_datastore_keys","final_ledger_info","final_roll_count","final_rolls","final_rolls","final_value","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","id","id","id","id","in_blocks","in_blocks","in_pool","in_pool","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_candidate","is_discarded","is_final","is_final","is_final","is_final","is_final","is_in_blockclique","is_in_blockclique","is_stale","key","last_slot","locked_balance","max_gas","max_gas","network_stats","next_block_draws","next_endorsement_draws","next_slot","node_id","node_ip","operation","operation_datastore","original_caller_address","original_operation_id","parameter","parents","pool_stats","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialized_content","signature","simulated_gas_price","simulated_gas_price","slot","slot","slot","start","start","target_address","target_function","thread","thread","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Block","BlockDeserializer","BlockHeader","BlockHeaderDeserializer","BlockHeaderSerializer","BlockId","BlockSerializer","WrappedBlock","WrappedHeader","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes_count","clone","clone","clone","clone_into","clone_into","clone_into","cmp","contains_operation","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","endorsements","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bs58_check","from_bytes","from_str","get_first_bit","get_fitness","get_fitness","get_hash","hash","header","into","into","into","into","into","into","into","into_bytes","new","new","new","new","new","new_wrapped","operation_merkle_root","operations","parents","partial_cmp","serialize","serialize","serialize","serialize","serialize","serialize","slot","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Clique","CliqueDeserializer","CliqueSerializer","block_ids","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","default","deserialize","deserialize","fitness","fmt","from","from","from","into","into","into","is_blockclique","new","new","serialize","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Active","Discarded","Discarded","InBlock","Incoming","OperationSearchResult","OperationSearchResultBlockStatus","OperationSearchResultStatus","Pending","PubkeySig","StakersCycleProductionStats","WaitingForDependencies","WaitingForSlot","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cycle","deserialize","deserialize","deserialize","deserialize","deserialize","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","in_blocks","in_pool","into","into","into","into","into","is_final","ok_nok_counts","op","public_key","serialize","serialize","serialize","serialize","serialize","signature","status","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","CompactConfig","block_reward","borrow","borrow_mut","build_massa_settings","clone","clone_into","constants","default","delta_f0","deserialize","end_timestamp","fmt","fmt","from","genesis_timestamp","into","max_block_size","operation_validity_periods","periods_per_cycle","roll_price","serialize","t0","thread_count","to_owned","to_string","try_from","try_into","type_id","vzip","ASYNC_POOL_BOOTSTRAP_PART_SIZE","BLOCK_REWARD","BOOTSTRAP_RANDOMNESS_SIZE_BYTES","CHANNEL_SIZE","DEFERRED_CREDITS_BOOTSTRAP_PART_SIZE","DELTA_F0","ENDORSEMENT_COUNT","END_TIMESTAMP","EXECUTED_OPS_BOOTSTRAP_PART_SIZE","GENESIS_KEY","GENESIS_TIMESTAMP","HANDSHAKE_RANDOMNESS_SIZE_BYTES","INITIAL_DRAW_SEED","IP_LIST_MAX_SIZE","LEDGER_COST_PER_BYTE","LEDGER_ENTRY_BASE_SIZE","LEDGER_ENTRY_DATASTORE_BASE_SIZE","LEDGER_PART_SIZE_MESSAGE_BYTES","MAX_ADVERTISE_LENGTH","MAX_ASK_BLOCKS_PER_MESSAGE","MAX_ASYNC_GAS","MAX_ASYNC_MESSAGE_DATA","MAX_ASYNC_POOL_LENGTH","MAX_BLOCK_SIZE","MAX_BOOTSTRAP_ASYNC_POOL_CHANGES","MAX_BOOTSTRAP_BLOCKS","MAX_BOOTSTRAP_CHILDREN","MAX_BOOTSTRAP_CLIQUES","MAX_BOOTSTRAP_DEPS","MAX_BOOTSTRAP_ERROR_LENGTH","MAX_BOOTSTRAP_FINAL_STATE_PARTS_SIZE","MAX_BOOTSTRAP_MESSAGE_SIZE","MAX_BOOTSTRAP_POS_CYCLES","MAX_BOOTSTRAP_POS_ENTRIES","MAX_BYTECODE_LENGTH","MAX_DATASTORE_ENTRY_COUNT","MAX_DATASTORE_KEY_LENGTH","MAX_DATASTORE_VALUE_LENGTH","MAX_DEFERRED_CREDITS_LENGTH","MAX_DUPLEX_BUFFER_SIZE","MAX_ENDORSEMENTS_PER_MESSAGE","MAX_EXECUTED_OPS_CHANGES_LENGTH","MAX_EXECUTED_OPS_LENGTH","MAX_FUNCTION_NAME_LENGTH","MAX_GAS_PER_BLOCK","MAX_LEDGER_CHANGES_COUNT","MAX_LEDGER_CHANGES_PER_SLOT","MAX_MESSAGE_SIZE","MAX_OPERATIONS_PER_BLOCK","MAX_OPERATIONS_PER_MESSAGE","MAX_OPERATION_DATASTORE_ENTRY_COUNT","MAX_OPERATION_DATASTORE_KEY_LENGTH","MAX_OPERATION_DATASTORE_VALUE_LENGTH","MAX_PARAMETERS_SIZE","MAX_PRODUCTION_EVENTS_PER_BLOCK","MAX_PRODUCTION_STATS_LENGTH","MAX_RNG_SEED_LENGTH","MAX_ROLLS_COUNT_LENGTH","NETWORK_CONTROLLER_CHANNEL_SIZE","NETWORK_EVENT_CHANNEL_SIZE","NETWORK_NODE_COMMAND_CHANNEL_SIZE","NETWORK_NODE_EVENT_CHANNEL_SIZE","NODE_SEND_CHANNEL_SIZE","OPERATION_VALIDITY_PERIODS","PERIODS_PER_CYCLE","POOL_CONTROLLER_CHANNEL_SIZE","POS_MISS_RATE_DEACTIVATION_THRESHOLD","POS_SAVED_CYCLES","PROTOCOL_CONTROLLER_CHANNEL_SIZE","PROTOCOL_EVENT_CHANNEL_SIZE","ROLL_PRICE","T0","THREAD_COUNT","VERSION","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","from","from","from","from","from","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Datastore","DatastoreDeserializer","DatastoreSerializer","borrow","borrow","borrow_mut","borrow_mut","default","deserialize","from","from","into","into","new","new","serialize","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ENDORSEMENT_ID_SIZE_BYTES","Endorsement","EndorsementDeserializer","EndorsementDeserializerLW","EndorsementId","EndorsementSerializer","EndorsementSerializerLW","WrappedEndorsement","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","default","deserialize","deserialize","deserialize","deserialize","endorsed_block","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bs58_check","from_bytes","from_str","get_hash","hash","index","into","into","into","into","into","into","into_bytes","new","new","new","new","new","partial_cmp","serialize","serialize","serialize","serialize","slot","to_bytes","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","AddressParseError","AmountOverflowError","AmountParseError","BufferError","CheckedOperationError","DeserializeError","ErrorRaised","HashError","InvalidLedgerChange","InvalidRollUpdate","InvalidVersionError","MassaHashError","MassaSignatureError","ModelsError","ModelsResult","OperationPrefixJoinError","OutdatedBootstrapCursor","PeriodOverflowError","SerializationError","SerializeError","ThreadOverflowError","TimeError","TimeOverflowError","WrongPrefix","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","from","from","from","from","from","from","into","provide","source","to_owned","to_string","try_from","try_into","type_id","vzip","Error","ExecuteReadOnlyResponse","Ok","ReadOnlyResult","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","executed_at","fmt","fmt","fmt","from","from","gas_cost","into","into","output_events","result","serialize","serialize","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","LedgerChange","LedgerChangeDeserializer","LedgerChangeSerializer","LedgerChanges","LedgerChangesDeserializer","LedgerChangesSerializer","LedgerData","LedgerDataDeserializer","LedgerDataSerializer","apply","apply_change","balance","balance_delta","balance_increment","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","chain","clone","clone","clone","clone_into","clone_into","clone_into","clone_subset","default","default","default","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_involved_addresses","into","into","into","into","into","into","into","into","into","is_nil","is_nil","new","new","new","new","new","new","new","serialize","serialize","serialize","serialize","serialize","serialize","sync_from","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","NodeId","borrow","borrow_mut","clone","clone_into","cmp","deserialize","eq","fmt","fmt","from","from_str","hash","into","partial_cmp","serialize","to_owned","to_string","try_from","try_into","type_id","vzip","CallSC","ExecuteSC","OPERATION_ID_PREFIX_SIZE_BYTES","OPERATION_ID_SIZE_BYTES","Operation","OperationDeserializer","OperationId","OperationIdDeserializer","OperationIdSerializer","OperationIdsDeserializer","OperationIdsSerializer","OperationPrefixId","OperationPrefixIdDeserializer","OperationPrefixIds","OperationPrefixIdsDeserializer","OperationPrefixIdsSerializer","OperationSerializer","OperationType","OperationTypeDeserializer","OperationTypeSerializer","OperationsDeserializer","OperationsSerializer","RollBuy","RollSell","Transaction","WrappedOperation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","default","default","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","expire_period","fee","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bs58_check","from_bytes","from_str","get_gas_coins","get_gas_price","get_gas_usage","get_hash","get_ledger_involved_addresses","get_max_spending","get_roll_involved_addresses","get_total_fee","get_validity_range","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_bytes","into_prefix","new","new","new","new","new","new","new","new","new","new","new","new","new","new","op","partial_cmp","partial_cmp","prefix","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","amount","coins","data","datastore","gas_price","gas_price","max_gas","max_gas","param","recipient_address","roll_count","roll_count","target_addr","target_func","EventExecutionContext","SCOutputEvent","block","borrow","borrow","borrow_mut","borrow_mut","call_stack","clone","clone","clone_into","clone_into","context","data","deserialize","deserialize","fmt","fmt","fmt","fmt","from","from","index_in_slot","into","into","is_final","origin_operation_id","read_only","serialize","serialize","slot","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BuildHashMapper","CapacityAllocator","HashMapper","PreHashMap","PreHashSet","PreHashed","borrow","borrow_mut","default","finish","from","into","try_from","try_into","type_id","vzip","with_capacity","with_capacity","with_capacity","write","RollCompensation","RollCounts","RollUpdate","RollUpdateDeserializer","RollUpdateSerializer","RollUpdates","apply","apply_updates","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_subset","clone_subset","compensate","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_involved_addresses","into","into","into","into","into","into","is_empty","is_nil","len","new","new","new","roll_purchases","roll_sales","serialize","serialize","serialize","serialize","serialize","sync_from","sync_from","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","BitVecDeserializer","BitVecSerializer","DeserializeMinBEInt","IpAddrDeserializer","IpAddrSerializer","MIN_BE_INT_BASE_SIZE","SerializeMinBEInt","StringDeserializer","StringSerializer","VecU8Deserializer","VecU8Serializer","array_from_slice","be_bytes_min_length","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","from","from","from","from","from","from","from","from","from_be_bytes_min","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","serialize","serialize","serialize","serialize","to_be_bytes_min","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u8_from_slice","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","SLOT_KEY_SIZE","Slot","SlotDeserializer","SlotSerializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","deserialize","deserialize","eq","fmt","fmt","from","from","from","from_bytes_key","from_str","get_cycle","get_first_bit","get_next_slot","get_prev_slot","hash","into","into","into","is_first_of_cycle","is_last_of_cycle","max","min","new","new","new","new_first_of_cycle","new_last_of_cycle","partial_cmp","period","serialize","serialize","slots_since","thread","to_bytes_key","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ConsensusStats","ExecutionStats","NetworkStats","PoolStats","active_cursor","active_node_count","banned_peer_count","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clique_count","clone","clone_into","deserialize","deserialize","deserialize","deserialize","end_timespan","endorsement_count","final_block_count","final_block_count","final_executed_operations_count","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","in_connection_count","into","into","into","into","known_peer_count","operation_count","out_connection_count","serialize","serialize","serialize","serialize","stale_block_count","start_timespan","time_window_end","time_window_start","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Finished","Ongoing","Started","StreamingStep","StreamingStepDeserializer","StreamingStepSerializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deserialize","eq","finished","fmt","from","from","from","into","into","into","new","new","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","get_block_slot_timestamp","get_closest_slot_to_timestamp","get_current_latest_block_slot","get_latest_block_slot_at_timestamp","slot_count_in_range","time_range_to_slot_range","Version","VersionDeserializer","VersionSerializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","default","deserialize","deserialize","eq","fmt","fmt","from","from","from","from_str","into","into","into","is_compatible","new","new","serialize","serialize","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Id","Wrapped","WrappedContent","WrappedDeserializer","WrappedSerializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes_count","clone","clone_into","contains_operation","content","creator_address","creator_public_key","default","deserialize","deserialize","deserialize","deserialize_with","eq","fmt","fmt","from","from","from","get_fitness","get_fitness","get_gas_coins","get_gas_price","get_gas_usage","get_hash","get_ledger_involved_addresses","get_max_spending","get_roll_involved_addresses","get_total_fee","get_validity_range","id","into","into","into","new","new","new","new_wrapped","serialize","serialize","serialize","serialize_with","serialized_data","serialized_size","signature","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify_signature","vzip","vzip","vzip"],"q":["massa_models","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::active_block","","","","","","","","","","","","","","","","","","","","","","","massa_models::address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::amount","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::apimassa_models::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::clique","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::composite","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::config","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::config::constants","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::datastore","","","","","","","","","","","","","","","","","","","","","","","","massa_models::endorsement","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::execution","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::ledger_models","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::node","","","","","","","","","","","","","","","","","","","","","","massa_models::operation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::operation::OperationType","","","","","","","","","","","","","","massa_models::output_event","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::prehash","","","","","","","","","","","","","","","","","","","","massa_models::rolls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::serialization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::slot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::stats","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::streaming_step","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::timeslots","","","","","","massa_models::version","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_models::wrapped","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["active blocks related structures","address related structures","amount related structures","structure use by the API","block-related structures Copyright (c) 2022 MASSA LABS …","clique","various structures","node configuration Main node configuration and all that …","datastore serialization / deserialization","endorsements","models error","execution related structures","ledger related structures","node related structure","operations","smart contract output events","pre-hashed trait, for hash less hashmap/set","rolls","serialization","slots","various statistics Copyright (c) 2022 MASSA LABS …","bootstrap streaming cursor","management of the relation between time and slots warning: …","versions","trait for signed structure","Block that was checked as valid, with some useful …","The id of the block","","","one <code>HashMap&lt;Block id, period&gt;</code> per thread (blocks that need …","","","The creator’s address","Blocks id that have this block as an ancestor","","Fitness","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","for example has its fitness reached the given threshold","one (block id, period) per thread ( if not genesis )","","Slot of the block.","","","","","","Size of a serialized address, in bytes","Derived from a public key","Deserializer for <code>Address</code>","Info for a given address on a given cycle","number of active rolls the address had at that cycle (if …","","","","","","","","","","","","","","cycle number","","","Example","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Example","Example","Computes address associated with given public key","","Gets the associated thread. Depends on the <code>thread_count</code>","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Example","true if that cycle is final","Creates a new deserializer for <code>Address</code>","<code>ok_count</code> blocks were missed by this address during that …","<code>ok_count</code> blocks were created by this address during that …","","","","Example","Example","","","","","","","","","","","","","","","","","decimal factor for the internal representation","A structure representing a decimal Amount of coins with …","Deserializer for amount","Serializer for amount","Maximum amount","Minimum amount","","","","","","","safely add self to another amount, returning None on …","safely divide self by a <code>u64</code>, returning None if the factor …","safely multiply self with a <code>u64</code>, returning None on overflow","safely subtract another amount from self, returning None …","","","","","","","","","","","Example","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create an Amount from the form <code>mantissa / (10^scale)</code> …","constructs an <code>Amount</code> from the underlying raw <code>u64</code> …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","returns true if the amount is zero","Create a new <code>AmountSerializer</code>","Create a new <code>AmountDeserializer</code>","","safely add self to another amount, saturating the result …","safely multiply self with a <code>u64</code>, saturating the result on …","safely subtract another amount from self, saturating the …","","Example","","","","Obtains the underlying raw <code>u64</code> representation Warning: do …","","","","","","","","","","","","","","Create a zero Amount","active in alternative cliques","active in blockclique","All you ever dream to know about an address","Block status within the graph","refactor to delete","Block content","A block resume (without the block itself)","Less information about an address","Datastore entry query input structure","Datastore entry query output structure","discarded for any reason","All you wanna know about an endorsement","filter used when retrieving SC output events","forever applies","received but not yet graph-processed","When an address is drawn to create an endorsement it is …","Current balance ledger info","node status","not found in graph","Operation and contextual info about it","operation input","read only bytecode execution request","read SC call request","Roll counts","slot / amount pair","Just a wrapper with a optional beginning and end","waiting for a missing dependency","waiting for its slot","count taken into account for the current cycle","active rolls","the address","the address","associated address of the entry","caller’s address, optional","amount","block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","byte code","caller’s address, optional","candidate balance","candidate balance","candidate datastore keys","latest data","candidate roll count","at latest blocks","candidate rolls","candidate datastore entry value","","","","","","","","","","","","","","","","","","","Only essential info about an address","compact configuration","connected nodes (node id, ip address, true if the …","consensus stats","optional block info content","created blocks","created endorsements","created operations","the block creator","The public key of the creator of the TX","current cycle","now","cycle information","","deferred credits","","","","","","","","","","","","","","","","","","","","","optional emitter address","optional end slot","optional end slot","the endorsement itself","","","execution stats","final balance","final balance","final datastore keys","final data","final roll count","at final blocks","final rolls","final datastore entry value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","id","id","block id","id","the operation appears in <code>in_blocks</code> if it appears in …","the endorsement appears in <code>in_blocks</code> if it appears in …","true if operation is still in pool","true if endorsement is still in pool","endorsement index in the slot","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","true if candidate (active any clique but not final)","true if discarded","true if the operation is final (for example in a final …","true if the endorsement is final (for example in a final …","true if final","true if in a final block","optional event status","true if in the greatest clique (and not final)","true if in the greatest block clique","true if incompatible with a final block","datastore key","latest slot, none if now is before genesis timestamp","locked balance, for example balance due to a roll sell","max available gas","max available gas","network stats","next block draws","next endorsement draws","next slot","our node id","optional node ip","the operation itself","Operation datastore, optional","optional caller address","optional operation id","function parameter","the block parents","pool stats (operation count and endorsement count)","","","","","","","","","","","","","","","","","","","","","The serialized version of the content <code>base58</code> encoded","The signature of the operation","gas price","gas price","slot","slot","the slot the block is in","optional start slot","optional start slot","target address","target function","the thread the address belongs to","the thread it is","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","node version","","","","","","","","","","","","","","","","","","","","","block","Deserializer for <code>Block</code>","block header","Deserializer for <code>BlockHeader</code>","Serializer for <code>BlockHeader</code>","block id","Serializer for <code>Block</code>","Wrapped Block","wrapped header","","","","","","","","","","","","","","","size in bytes of the whole block","","","","","","","","true if given operation is included in the block","","","Example:","Example:","","","","","endorsements","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","block id fro <code>bs58</code> check","block id from bytes","","first bit of the hashed block id","returns the fitness of the block","gets the header fitness","","","signed header","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","block id into bytes","Creates a new <code>BlockSerializer</code>","Creates a new <code>BlockDeserializer</code>","Creates a new <code>BlockHeaderSerializer</code>","Creates a new <code>BlockHeaderDeserializerLW</code>","","","all operations hash","operations","parents","","Example:","Example:","","","","","slot","block id to bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutually compatible blocks in the graph","Basic deserializer for <code>Clique</code>","Basic serializer for <code>Clique</code>","the block ids of the blocks in that clique","","","","","","","","","","","Example","","Fitness used to compute finality Depends on descendants …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","True if it is the clique of higher fitness","Creates a <code>CliqueDeserializer</code>","Creates a <code>CliqueSerializer</code>","","Example","","","","","","","","","","","","","","the block has been processed and is valid","the block is discarded","discarded","in a block, the block being in …","the block hasn’t been processed by consensus yet","operation info","Status in which an operation can be (derived from the …","Status in which an operation can be","in pool","just a public key and a signature it has produced used for …","all the production stats for every known staker","the block waits for dependencies for further processing","the block waits for it’s slot for further processing","","","","","","","","","","","","","","","","","","","cycle number","","","","","","combine two operation search result","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","maps block id to index on the operation in the block and …","true if in pool","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","if that cycle is final","map address to produced valid block count and not valid …","the operation","public key","","","","","","signature","operation status","","","","","","","","","","","","","","","","","","","","","","","","","","Compact representation of key values of consensus …","Reward amount for a block creation","","","Merge the settings","","","DEFAULT VALUES USED TO INITIALIZE DIVERS CONFIGURATIONS …","","Threshold for fitness.","","TESTNET: time when the blockclique is ended.","","","Returns the argument unchanged.","Time in milliseconds when the blockclique started.","Calls <code>U::from(self)</code>.","Max total size of a block","Maximum operation validity period count","cycle duration in periods","Price of a roll on the network","","Time between the periods in the same thread.","Number of threads","","","","","","","Maximum async messages in a batch of the bootstrap of the …","Block reward is given for each block creation","Size of the random bytes array used for the bootstrap, …","Consensus static parameters (defined by protocol used) …","Maximum proof-of-stake deferred credits in a bootstrap …","Threshold for fitness.","Number of endorsement","TESTNET: time when the blockclique is ended.","Maximum executed ops per slot in a bootstrap batch","<code>KeyPair</code> to sign genesis blocks.","Time in milliseconds when the blockclique started.","Length of the handshake random signature","Proof of stake seed for the initial draw","Max size of the IP list","Cost to store one byte in the ledger","Cost for a base entry (address + balance (5 bytes …","Cost for a base entry datastore 10 bytes constant to avoid …","Maximum size batch of data in a part of the ledger","Limit on the number of peers we advertise to others.","Max number of hash in the message <code>AskForBlocks</code>","Maximum of GAS allowed for asynchronous messages execution …","Maximum data size in async message","Maximum capacity of the asynchronous messages pool","Maximum block size in bytes","Max async pool changes","Max number of blocks we provide/ take into account while …","Max number of child nodes","max bootstrapped cliques","max bootstrapped dependencies","Max size of the printed error","Max bytes in final states parts","Max message size for bootstrap","Max number of cycles in PoS bootstrap","Max number of address and random entries for PoS bootstrap","Maximum length of a datastore value","Maximum number of key/values in the datastore of a ledger …","Maximum length of a datastore key","Maximum length of a datastore value","Maximum size proof-of-stake deferred credits","max duplex buffer size","Max number of endorsements per message","Maximum size of executed ops changes","Maximum size of executed ops","Maximum length function name in call SC","Maximum of GAS allowed for a block","Maximum ledger changes count","Maximum ledger changes in a block","Maximum message length in bytes","Maximum number of operations per block","Max number of operations per message","Maximum number of key/values in the datastore of a …","Maximum length of an operation datastore key","Maximum length of an operation datastore value","Maximum size of parameters in call SC","Maximum production events in a block","Maximum size of proof-of-stake production stats","Maximum length of <code>rng_seed</code> in thread cycle","Maximum size of proof-of-stake rolls","network controller communication channel size","network event channel size","network node command channel size","network node event channel size","node send channel size","Maximum operation validity period count","cycle duration in periods","Pool controller channel size","number of cycle misses (strictly) above which stakers are …","PoS saved cycles: number of cycles saved in <code>PoSFinalState</code>","Protocol controller channel size","Protocol event channel size","Price of a roll in the network","Time between the periods in the same thread.","Number of threads","node version","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Datastore entry for Ledger &amp; <code>ExecuteSC</code> Operation A …","Deserializer for <code>Datastore</code> field in <code>LedgerEntry</code>","Serializer for <code>Datastore</code>","","","","","","Example","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>DatastoreDeserializer</code>","Creates a new <code>DatastoreSerializer</code>","Example","","","","","","","","","Endorsement ID size in bytes","an endorsement, as sent in the network","Deserializer for <code>Endorsement</code>","Lightweight Deserializer for <code>Endorsement</code>","endorsement id","Serializer for <code>Endorsement</code>","Lightweight Serializer for <code>Endorsement</code> When included in a …","Wrapped endorsement","","","","","","","","","","","","","","","","","","","","","","Example:","Example:","","","Hash of endorsed block. This is the parent in thread …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","endorsement id from <code>bs58</code> check","endorsement id from bytes","","","","Endorsement index inside the including block","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","endorsement id into bytes","Creates a new <code>EndorsementDeserializer</code>","Creates a new <code>EndorsementSerializerLW</code>","Creates a new <code>EndorsementDeserializerLW</code>","","Creates a new <code>EndorsementSerializer</code>","","Example:","","","Example:","Slot in which the endorsement can be included","endorsement id to bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","address parsing error","Ledger changes, Amount overflow","amount parse error","buffer error: {0}","checked operation error","Deserialization error: {0}","Error raised {0}","hashing error","invalid ledger change: {0}","invalid roll update: {0}","invalid version identifier: {0}","<code>MassaHash</code> error: {0}","<code>massa_signature</code> error: {0}","models error","models error","Wrong operation id size deduced on join","Outdated bootstrap cursor","period overflow error","Serialization error: {0}","Serialization error: {0}","thread overflow error","Time error {0}","Time overflow error","Wrong prefix for hash: expected {0}, got {1}","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","An error occurred during execution.","The response to a request for a read-only execution.","The result of a successful execution. TODO: specify result.","The result of the read-only execution.","","","","","","","","","","","The slot at which the read-only execution occurred.","","","","Returns the argument unchanged.","Returns the argument unchanged.","The gas cost for the execution","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The output events generated by the read-only execution.","The result of the read-only execution.","","","","","","","","","","","","","","A balance change that can be applied to an address","Basic deserializer for <code>LedgerChange</code>","Basic serializer for <code>LedgerChange</code>","Map an address to a <code>LedgerChange</code>","Basic deserializer for <code>LedgerChanges</code>","Basic serializer for <code>LedgerChanges</code>","a consensus ledger entry","Basic deserializer for <code>LedgerData</code>","Basic serializer for <code>LedgerData</code>","applies a <code>LedgerChange</code>","apply a <code>LedgerChange</code> for an entry Can fail in overflow or …","the balance in coins","Amount to add or subtract","whether to increment or decrements balance of delta","","","","","","","","","","","","","","","","","","","Applies another ledger change on top of self","chain with another <code>LedgerChange</code>","","","","","","","clone subset","","","","","","","","","Example:","Example","Example","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","addresses that are impacted by these ledger changes","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","returns true if the balance is zero","true if the change is 0","Creates a <code>LedgerDataDeserializer</code>","Creates a <code>LedgerChangeDeserializer</code>","Creates a <code>LedgerChangesSerializer</code>","Creates a <code>LedgerChangesDeserializer</code>","new <code>LedgerData</code> from an initial balance","Creates a <code>LedgerDataSerializer</code>","Creates a <code>LedgerChangeSerializer</code>","","","Example:","","Example","","merge another ledger changes into self, overwriting …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>NodeId</code> wraps a public key to uniquely identify a node.","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Calls an exported function from a stored smart contract","Execute a smart contract.","Size in bytes of the serialized operation ID prefix","Size in bytes of the serialized operation ID","the operation as sent in the network","Serializer for <code>Operation</code>","operation id","Deserializer for <code>OperationId</code>","Serializer for <code>OperationId</code>","Deserializer for <code>Vec&lt;OperationId&gt;</code>","Serializer for <code>Vec&lt;OperationId&gt;</code>","Left part of the operation id hash stored in a vector of …","Deserializer for <code>OperationPrefixId</code>","Set of operation id’s prefix","Deserializer for <code>OperationPrefixIds</code>","Serializer for <code>OperationPrefixIds</code>","Serializer for <code>Operation</code>","Type specific operation content","Serializer for <code>OperationType</code>","Serializer for <code>OperationType</code>","Deserializer for <code>Operations</code>","Serializer for <code>Operations</code>","the sender buys <code>roll_count</code> rolls. Roll price is defined in …","the sender sells <code>roll_count</code> rolls. Roll price is defined …","transfer coins from sender to recipient","signed operation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Example:","Example:","Example:","Example:","Example:","","","","","","Example:","","","","after <code>expire_period</code> slot the operation won’t be included …","the fee they have decided for this operation","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","get prefix of the operation id of size …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","op id from <code>bs58</code> check","op id from bytes","","Get the amount of coins used by the operation to pay for …","Get the gas price set by the operation","Get the max amount of gas used by the operation (<code>max_gas</code>)","","get the addresses that are involved in this operation from …","Gets the maximal amount of coins that may be spent by this …","get the addresses that are involved in this operation from …","Get the total fee paid by the creator","get the range of periods during which an operation is valid","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","op id into bytes","convert the <code>OperationId</code> into a <code>OperationPrefixId</code>","Creates a new <code>OperationSerializer</code>","Creates a <code>OperationDeserializer</code>","Creates a new <code>OperationTypeSerializer</code>","Creates a new <code>OperationTypeDeserializer</code>","Creates a new <code>OperationIdsSerializer</code>","Creates a new <code>OperationIdsDeserializer</code>","Creates a new <code>OperationIdsDeserializer</code>","Creates a new <code>OperationIdsSerializer</code>","Creates a new <code>OperationsSerializer</code>","Creates a new <code>OperationsDeserializer</code>","","Creates a new serializer for <code>OperationId</code>","Creates a new deserializer for <code>OperationId</code>","Creates a deserializer for <code>OperationPrefixId</code>","the type specific operation part","","","get a prefix from the <code>OperationId</code> by copying it","Example:","Example:","Example:","","Example:","","","","","","op id to bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","amount","Extra coins that are spent from the caller’s balance and …","Smart contract bytecode.","A key-value store associating a hash to arbitrary bytes","The price per unit of gas that the caller is willing to …","The price per unit of gas that the caller is willing to …","The maximum amount of gas that the execution of the …","The maximum amount of gas that the execution of the …","Parameter to pass to the target function","recipient address","roll count","roll count","Target smart contract address","Target function name. No function is called if empty.","Context of the event (not generated by the user)","By product of a byte code execution","block id if there was a block at that slot","","","","","most recent at the end","","","","","context generated by the execution context","json data string","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","index of the event in the slot","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","if the event is final","origin operation id","if the event was generated during a read only execution","","","when was it generated","","","","","","","","","","","","","<code>BuildHasherDefault</code> specialization for <code>HashMapper</code>","Trait allowing pre-allocations","A <code>Hasher</code> for <code>PreHashed</code> keys that is faster because it …","<code>HashMap</code> specialization for <code>PreHashed</code> keys This hashmap is …","<code>HashSet</code> specialization for <code>PreHashed</code> keys This hashset is …","A trait indicating that its carrier is already a hash with …","","","","finish the hashing process and return the truncated <code>u64</code> …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","pre-allocate with a given capacity","pre-allocate with a given capacity","pre-allocate with a given capacity","write the bytes of a <code>PreHashed</code> key into the <code>HashMapper</code> …","just a <code>u64</code> to keep track of the roll sells and buys during …","counts the roll for each address","roll sales and purchases","Deserializer for <code>RollUpdate</code>","Serializer for <code>RollUpdate</code>","maps addresses to roll updates","applies a <code>RollUpdate</code>, compensates and returns compensation","applies <code>RollUpdates</code> to self with compensations","","","","","","","","","","","","","chains with another <code>RollUpdates</code>, compensates and returns …","","","","","","","","","get the roll update for a subset of addresses","get roll counts for a subset of addresses.","compensate a roll update, return compensation count","","","","","Example:","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","the addresses impacted by the updates","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the <code>RollCounts</code> contains no elements.","true if the update has no effect","Returns the number of elements in the <code>RollCounts</code>.","Creates a new <code>RollUpdateSerializer</code>","Creates a new <code>RollUpdateDeserializer</code>","Makes a new, empty <code>RollCounts</code>.","roll purchases","roll sales","Example:","","","","","merge another roll updates into self, overwriting existing …","merge another roll counts into self, overwriting existing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>BitVec&lt;u8&gt;</code> Deserializer","<code>BitVec&lt;u8&gt;</code> Serializer","Deserialize min big endian","Deserializer for <code>IpAddr</code>","Serializer for <code>IpAddr</code>","min big endian integer base size","Serialize min big endian integer","Deserializer for <code>String</code> with generic deserializer for the …","Serializer for <code>String</code> with generic serializer for the size …","Basic <code>Vec&lt;u8&gt;</code> deserializer","Basic <code>Vec&lt;u8&gt;</code> serializer","array from slice","Compute the minimal big endian deserialization size","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a minimally sized big endian integer to Self …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a <code>StringSerializer</code>.","Creates a <code>StringDeserializer</code>.","Create a new <code>BitVec&lt;u8&gt;</code> Serializer","Create a new <code>BitVec&lt;u8&gt;</code> Deserializer","Creates a <code>IpAddrSerializer</code>","Creates a <code>IpAddrDeserializer</code>","Creates a new <code>VecU8Serializer</code>","Creates a new <code>VecU8Deserializer</code>","","","","","serializes with the minimal amount of big endian bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>u8</code> from slice","","","","","","","","","size of the slot key representation","a point in time where a block is expected","Basic <code>Slot</code> Deserializer","Basic serializer for <code>Slot</code>","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a slot from its fixed-size sortable binary …","","cycle associated to that slot","first bit of the slot, for seed purpose","Returns the next Slot","Returns the previous Slot","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if the slot is first in the cycle","check if the slot is last in the cycle","returns the maximal slot","returns the minimal slot","new slot from period and thread","Creates a <code>SlotSerializer</code>","Creates a <code>SlotDeserializer</code>","create the first slot of a given cycle","create the last slot of a given cycle","","period","","","Counts the number of slots since the one passed in …","thread","Returns a fixed-size sortable binary key","","","","","","","","","","","","","","","","","stats produced by consensus module","execution statistics","stats produced by network module","stats produced by pool module","active execution cursor slot","active node count","banned node count","","","","","","","","","number of actives cliques","","","","","","","end of the time span for stats","number of endorsement in the pool","number of final blocks in the time window","number of final blocks","number of final executed operations in the time window","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","in connections count","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","total known peers count","number of operations in the pool","out connections count","","","","","number of stale blocks in memory","start of the time span for stats","time window end","time window start","","","","","","","","","","","","","","","","","","","","","","Finished step, after all the information has been streamed","Ongoing step, as long as you are streaming","Started step, only when launching the streaming","Streaming step cursor","<code>StreamingStep</code> deserializer","<code>StreamingStep</code> serializer","","","","","","","","","","","Indicates if the current step if finished or not without …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>StreamingStep</code> serializer","Creates a new <code>StreamingStep</code> deserializer","","","","","","","","","","","","","","","Gets timestamp in milliseconds for given slot.","TODO DOC","Returns the thread and block slot index of the current …","Returns the thread and block period index of the latest …","Counts the number of slots in a slot range [a, b)","Turns an <code>MassaTime</code> range [start, end) with optional …","Application version, checked during handshakes","Serializer for <code>Version</code>","Serializer for <code>Version</code>","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","true if instance and major are the same","Creates a <code>VersionSerializer</code>","Creates a <code>VersionSerializer</code>","","","","","","","","","","","","","","","","","Used by signed structure","Wrapped structure T where U is the associated id","Trait that define a structure that can be wrapped.","Deserializer for Wrapped structure","Serializer for <code>Wrapped</code> structure","","","","","","","size in bytes of the whole block","","","true if given operation is included in the block","content","the content creator address","the content creator public key","","Deserialize the wrapped structure","","","This method is used deserialize data that has been …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","gets the header fitness","returns the fitness of the block","Get the amount of coins used by the operation to pay for …","Get the gas price set by the operation","Get the max amount of gas used by the operation (<code>max_gas</code>)","Get a reference to the underlying hash","get the addresses that are involved in this operation from …","Gets the maximal amount of coins that may be spent by this …","get the addresses that are involved in this operation from …","Get the total fee paid by the creator","get the range of periods during which an operation is valid","Id","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","New id from hash","Creates a new <code>WrappedDeserializer</code>","Creates a new <code>WrappedSerializer</code>","Creates a wrapped version of the object","Serialize the wrapped structure","","","This method is used to serialize a <code>Wrapped</code> structure and …","Content serialized","get full serialized size","signature","","","","","","","","","","","","check if self has been signed by public key","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,8,6,7,8,6,7,8,6,7,8,6,7,8,6,8,7,6,7,8,6,6,6,8,6,7,8,6,6,6,6,6,6,6,7,8,6,8,7,8,8,6,6,8,6,6,6,7,8,6,6,7,8,6,7,8,6,7,8,6,7,8,0,0,0,0,22,22,22,24,25,22,24,25,22,22,22,22,22,24,25,22,24,25,22,22,24,22,25,22,22,22,22,24,25,22,22,22,22,24,25,22,24,25,22,22,22,22,22,24,22,24,25,22,22,22,24,25,22,24,25,22,24,25,22,24,25,22,44,44,0,0,0,0,0,0,0,0,44,0,0,44,44,0,0,0,44,0,0,0,0,0,0,0,44,44,31,40,39,40,34,37,46,48,41,42,43,44,30,31,39,45,40,32,46,47,48,49,33,34,35,36,37,38,41,42,43,44,30,31,39,45,40,32,46,47,48,49,33,34,35,36,37,38,37,38,39,40,39,30,39,31,40,35,30,31,32,33,34,35,36,37,38,30,31,32,33,34,35,36,37,38,39,42,42,42,47,39,39,39,49,41,42,42,39,36,39,41,42,43,44,30,31,39,45,40,32,46,47,48,49,33,34,35,36,37,38,36,33,36,32,44,45,42,39,40,39,30,39,31,40,35,41,42,42,43,43,44,30,30,31,31,39,39,45,45,40,40,32,32,46,47,47,48,49,49,33,34,35,35,36,37,38,41,42,43,44,30,31,39,45,40,32,46,47,48,49,33,34,35,36,37,38,45,43,32,47,49,43,32,43,32,45,41,42,43,44,30,31,39,45,40,32,46,47,48,49,33,34,35,36,37,38,48,48,43,32,48,49,36,48,49,49,34,42,30,37,38,42,39,39,42,42,42,43,37,36,36,38,49,42,41,42,43,44,30,31,39,45,40,32,46,47,48,49,33,34,35,36,37,38,41,41,37,38,45,46,49,33,36,38,38,39,40,30,31,32,33,34,35,36,37,38,42,43,30,31,39,45,40,32,47,49,35,41,42,43,44,30,31,39,45,40,32,46,47,48,49,33,34,35,36,37,38,41,42,43,44,30,31,39,45,40,32,46,47,48,49,33,34,35,36,37,38,41,42,43,44,30,31,39,45,40,32,46,47,48,49,33,34,35,36,37,38,42,41,42,43,44,30,31,39,45,40,32,46,47,48,49,33,34,35,36,37,38,0,0,0,0,0,0,0,0,0,55,57,56,58,51,52,53,55,57,56,58,51,52,53,50,51,52,53,51,52,53,51,50,55,56,57,58,51,52,52,53,53,51,51,51,52,52,53,53,55,57,56,58,51,52,53,51,51,51,51,50,64,51,51,52,55,57,56,58,51,52,53,51,55,57,56,58,51,52,53,52,53,51,55,56,51,52,52,53,53,51,51,52,53,51,52,53,55,57,56,58,51,52,53,55,57,56,58,51,52,53,55,57,56,58,51,52,53,55,57,56,58,51,52,53,0,0,0,68,70,68,69,70,68,69,68,68,68,69,70,68,68,68,70,68,69,70,68,69,68,70,69,68,69,68,70,68,69,70,68,69,70,68,69,70,68,69,71,71,72,72,71,0,0,0,72,0,0,71,71,71,72,73,74,75,71,72,73,74,75,71,72,73,74,71,72,73,74,74,71,72,73,74,75,73,71,72,73,74,75,75,71,72,73,74,75,73,73,71,72,73,74,75,74,74,73,75,71,72,73,74,75,75,73,71,72,73,74,75,71,72,73,74,75,71,72,73,74,75,71,72,73,74,75,71,72,73,74,75,0,77,77,77,0,77,77,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,80,81,82,84,78,80,81,82,84,78,80,81,82,84,78,80,81,82,84,78,80,81,82,84,78,80,81,82,84,78,80,81,82,84,78,80,81,82,84,78,80,81,82,84,0,0,0,87,86,87,86,86,87,87,86,87,86,87,86,86,87,86,87,86,87,86,87,86,0,0,0,0,0,0,0,0,93,92,94,89,90,91,93,92,94,89,90,91,89,90,91,89,90,91,89,92,91,93,94,89,90,90,89,90,89,89,90,90,93,92,94,89,90,91,89,89,89,89,89,90,93,92,94,89,90,91,89,93,92,94,89,91,89,92,89,90,91,90,89,89,90,91,89,90,93,92,94,89,90,91,93,92,94,89,90,91,93,92,94,89,90,91,93,92,94,89,90,91,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,103,0,103,0,103,104,103,104,103,104,103,104,103,104,104,103,104,104,103,104,104,103,104,104,104,103,104,103,104,104,103,104,103,104,103,104,103,104,0,0,0,0,0,0,0,0,0,105,108,108,106,106,110,111,112,115,108,113,106,114,105,110,111,112,115,108,113,106,114,105,106,105,108,106,105,108,106,105,105,110,111,112,108,113,106,114,105,110,111,115,108,106,105,108,106,105,110,111,112,115,108,113,106,114,105,105,110,111,112,115,108,113,106,114,105,108,106,110,111,112,115,108,113,114,112,108,113,106,114,105,105,108,106,105,110,111,112,115,108,113,106,114,105,110,111,112,115,108,113,106,114,105,110,111,112,115,108,113,106,114,105,110,111,112,115,108,113,106,114,105,0,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,122,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,122,122,0,123,129,124,130,125,131,132,126,127,134,117,118,119,120,121,122,128,123,129,124,130,125,131,132,126,127,134,117,118,119,120,121,122,128,117,118,119,120,121,122,117,118,119,120,121,122,117,118,123,124,125,126,127,119,120,128,129,130,131,132,134,117,118,120,121,122,128,117,118,122,121,121,117,117,118,118,121,121,122,122,123,129,124,130,125,131,132,126,127,134,117,118,118,119,120,121,122,128,117,117,117,54,54,54,117,54,54,54,54,54,117,118,123,129,124,130,125,131,132,126,127,134,117,118,119,120,121,122,128,117,117,123,129,124,130,125,131,132,126,127,134,117,119,120,128,121,117,118,117,123,124,125,126,127,117,118,119,121,122,117,117,118,119,120,121,122,117,118,121,122,123,129,124,130,125,131,132,126,127,134,117,118,119,120,121,122,128,123,129,124,130,125,131,132,126,127,134,117,118,119,120,121,122,128,123,129,124,130,125,131,132,126,127,134,117,118,119,120,121,122,128,123,129,124,130,125,131,132,126,127,134,117,118,119,120,121,122,128,176,177,178,178,178,177,178,177,177,176,179,180,177,177,0,0,138,137,138,137,138,138,137,138,137,138,137,137,137,138,137,137,138,138,137,138,138,137,138,138,138,138,137,138,138,137,138,137,138,137,138,137,138,137,138,137,138,0,0,0,0,0,0,140,140,140,140,140,140,140,140,140,140,181,142,109,140,0,0,0,0,0,0,143,146,147,148,145,144,143,146,147,148,145,144,143,146,143,145,144,143,146,145,144,143,146,143,146,144,147,148,143,146,148,145,144,143,146,145,144,143,146,147,148,145,144,143,146,143,147,148,145,144,143,146,146,144,146,147,148,146,144,144,147,145,144,143,146,143,146,145,144,143,146,147,148,145,144,143,146,147,148,145,144,143,146,147,148,145,144,143,146,147,148,145,144,143,146,0,0,0,0,0,182,0,0,0,0,0,0,182,158,155,151,152,153,154,149,150,158,155,151,152,153,154,149,150,149,150,149,150,151,152,153,154,149,155,152,154,150,158,155,151,152,153,154,149,150,182,158,155,151,152,153,154,149,150,158,155,151,152,153,154,149,150,158,151,153,149,183,149,150,158,155,151,152,153,154,149,150,158,155,151,152,153,154,149,150,158,155,151,152,153,154,149,150,0,158,155,151,152,153,154,149,150,0,0,0,0,95,159,160,95,159,160,95,159,160,95,159,160,95,159,95,160,95,95,95,95,159,160,95,95,95,95,95,95,95,95,159,160,95,95,95,95,95,159,160,95,95,95,95,95,159,95,95,95,95,159,160,95,95,159,160,95,159,160,95,159,160,95,159,160,0,0,0,0,162,163,163,162,163,161,164,162,163,161,164,161,161,161,162,163,161,164,161,164,162,161,162,162,162,163,163,161,161,164,164,162,163,161,164,163,162,163,161,164,163,164,163,162,163,161,164,161,161,162,162,161,162,163,161,164,162,163,161,164,162,163,161,164,162,163,161,164,162,163,161,164,166,166,166,0,0,0,170,167,166,170,167,166,166,166,167,166,166,166,170,167,166,170,167,166,170,167,170,166,170,167,166,170,167,166,170,167,166,170,167,166,0,0,0,0,0,0,0,0,0,172,173,85,172,173,85,85,85,172,173,173,85,85,85,85,172,173,85,85,172,173,85,85,172,173,172,85,85,85,172,173,85,172,173,85,172,173,85,172,173,85,0,0,0,0,0,175,63,174,175,63,174,63,63,63,63,63,63,63,174,184,175,63,175,63,63,63,175,63,174,63,63,63,63,63,62,63,63,63,63,63,63,175,63,174,62,175,174,184,184,63,174,174,63,63,63,63,63,175,63,174,175,63,174,175,63,174,63,175,63,174],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,[1,1],[[]],0,0,[[],[[2,[1]]]],0,[[1,3],4],[[]],[[]],0,0,[1,2],0,[[]],[[],2],[[],2],[[],5],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[6,6],[7,7],[8,8],[[]],[[]],[[]],[[6,6],9],0,[[],7],[10,[[2,[6]]]],[7,[[13,[6,[0,[11,12]]]]]],[[],[[2,[8]]]],[[6,6],14],[[6,3],4],[[6,3],4],[[8,3],4],[[]],[[]],[[]],[15,[[2,[6,16]]]],[[],6],[17,6],[15,[[2,[6]]]],[[6,18],18],[6],[[]],[[]],[[]],[6],0,[[],7],0,0,[[6,6],[[19,[9]]]],[[6,20],2],[8,2],[6,21],[6],[[]],[[]],[[]],[[],21],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[22,22],[[19,[22]]]],[[22,23],[[19,[22]]]],[[22,23],[[19,[22]]]],[[22,22],[[19,[22]]]],[22,22],[24,24],[25,25],[[]],[[]],[[]],[[22,22],9],[[],22],[[],24],[[],[[2,[22]]]],[25,[[13,[22,[0,[11,12]]]]]],[[22,22],14],[[22,3],4],[[22,3],4],[[]],[[]],[[]],[[23,26],22],[23,22],[15,[[2,[22]]]],[[]],[[]],[[]],[22,14],[[],24],[[[27,[22]],[27,[22]]],25],[[22,22],[[19,[9]]]],[[22,22],22],[[22,23],22],[[22,22],22],[22,2],[[24,22,28],[[2,[29]]]],[[]],[[]],[[]],[22,23],[[],21],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[],22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,40],0,0,0,0,0,0,0,0,0,0,0,0,[[],36],0,[[],[[2,[41]]]],[[],[[2,[42]]]],[[],[[2,[43]]]],[[],[[2,[44]]]],[[],[[2,[30]]]],[[],[[2,[31]]]],[[],[[2,[39]]]],[[],[[2,[45]]]],[[],[[2,[40]]]],[[],[[2,[32]]]],[[],[[2,[46]]]],[[],[[2,[47]]]],[[],[[2,[48]]]],[[],[[2,[49]]]],[[],[[2,[33]]]],[[],[[2,[34]]]],[[],[[2,[35]]]],[[],[[2,[36]]]],[[],[[2,[37]]]],[[],[[2,[38]]]],0,0,0,0,[[44,44],14],[[45,45],14],0,0,0,0,0,0,0,0,0,[[41,3],4],[[42,3],4],[[42,3],4],[[43,3],4],[[43,3],4],[[44,3],4],[[30,3],4],[[30,3],4],[[31,3],4],[[31,3],4],[[39,3],4],[[39,3],4],[[45,3],4],[[45,3],4],[[40,3],4],[[40,3],4],[[32,3],4],[[32,3],4],[[46,3],4],[[47,3],4],[[47,3],4],[[48,3],4],[[49,3],4],[[49,3],4],[[33,3],4],[[34,3],4],[[35,3],4],[[35,3],4],[[36,3],4],[[37,3],4],[[38,3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[45],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[41,2],[42,2],[43,2],[44,2],[30,2],[31,2],[39,2],[45,2],[40,2],[32,2],[46,2],[47,2],[48,2],[49,2],[33,2],[34,2],[35,2],[36,2],[37,2],[38,2],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50,23],[51,51],[52,52],[53,53],[[]],[[]],[[]],[[51,51],9],[[50,54],14],[[],55],[[],56],[57,[[13,[52,[0,[11,12]]]]]],[58,[[13,[53,[0,[11,12]]]]]],[[],[[2,[51]]]],[[[19,[59]],60,61],[[13,[[63,[52,62]],[0,[11,12]]]]]],[[],[[2,[52]]]],[[],[[2,[53]]]],0,[[51,51],14],[[51,3],4],[[51,3],4],[[52,3],4],[[52,3],4],[[53,3],4],[[53,3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,[[2,[51,16]]]],[[],51],[15,[[2,[51]]]],[51,14],[50,23],[64,23],[51,65],[51],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[51],[[],55],[[18,26,26],57],[[],56],[[18,26],58],[65,51],[[52,[59,[52]],66],[[2,[[63,[52,62]],16]]]],0,0,0,[[51,51],[[19,[9]]]],[[55,52,28],[[2,[29]]]],[[56,53,28],[[2,[29]]]],[51,2],[52,2],[[67,17,28],[[2,[29]]]],[53,2],0,[51],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[68,68],[[]],[[],68],[[],69],[70,[[13,[68,[0,[11,12]]]]]],[[],[[2,[68]]]],0,[[68,3],4],[[]],[[]],[[]],[[]],[[]],[[]],0,[26,70],[[],69],[68,2],[[69,68,28],[[2,[29]]]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[71,71],[72,72],[73,73],[74,74],[[]],[[]],[[]],[[]],0,[[],[[2,[71]]]],[[],[[2,[72]]]],[[],[[2,[73]]]],[[],[[2,[74]]]],[[],[[2,[75]]]],[[73,73]],[[71,3],4],[[72,3],4],[[73,3],4],[[74,3],4],[[75,3],4],[[75,3],4],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,[71,2],[72,2],[73,2],[74,2],[75,2],0,0,[[]],[[]],[[]],[[]],[[],21],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[15,15],76],[77,77],[[]],0,[[],77],0,[[],[[2,[77]]]],0,[[77,3],4],[[77,3],4],[[]],0,[[]],0,0,0,0,[77,2],0,0,[[]],[[],21],[[],2],[[],2],[[],5],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[78,79],[80,19],[81,66],[82,83],[84,85],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[],86],[87,[[13,[[88,[[28,[18]],[28,[18]]]],[0,[11,12]]]]]],[[]],[[]],[[]],[[]],[[23,18,23],87],[[],86],[[86,88,28],[[2,[29]]]],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[89,89],[90,90],[91,91],[[]],[[]],[[]],[[89,89],9],[[],92],[[],91],[93,[[13,[90,[0,[11,12]]]]]],[94,[[13,[90,[0,[11,12]]]]]],[[],[[2,[89]]]],[[],[[2,[90]]]],0,[[89,89],14],[[90,90],14],[[89,3],4],[[89,3],4],[[90,3],4],[[90,3],4],[[]],[[]],[[]],[[]],[[]],[[]],[15,[[2,[89,16]]]],[[],89],[15,[[2,[89]]]],[89,65],[89],0,[[]],[[]],[[]],[[]],[[]],[[]],[89],[[18,26],93],[[],92],[[26,95,51],94],[65,89],[[],91],[[89,89],[[19,[9]]]],[[92,90,28],[[2,[29]]]],[89,2],[90,2],[[91,90,28],[[2,[29]]]],0,[89],[[]],[[]],[[]],[[],21],[[],21],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[16,16],[[]],[[16,3],4],[[16,3],4],[[]],[96,16],[[[98,[97]]],16],[15,16],[99,16],[100,16],[29,16],[[]],[101],[16,[[19,[102]]]],[[]],[[],21],[[],2],[[],2],[[],5],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[103,103],[104,104],[[]],[[]],[[],[[2,[103]]]],[[],[[2,[104]]]],0,[[103,3],4],[[104,3],4],[[104,3],4],[[]],[[]],0,[[]],[[]],0,0,[103,2],[104,2],[[]],[[]],[[],21],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[]],[[]],0,0,0,0,0,0,0,0,0,[[105,6,106],107],[[108,106],107],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[106,106],[[107,[16]]]],[[105,105],107],[108,108],[106,106],[105,105],[[]],[[]],[[]],[[105,109],105],[[],110],[[],111],[[],112],[[],108],[[],113],[[],106],[[],114],[[],105],[110,[[13,[108,[0,[11,12]]]]]],[111,[[13,[106,[0,[11,12]]]]]],[115,[[13,[105,[0,[11,12]]]]]],[[],[[2,[108]]]],[[],[[2,[106]]]],[[],[[2,[105]]]],[[108,3],4],[[106,3],4],[[105,3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[105,[[109,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[108,14],[106,14],[[],110],[[],111],[[],112],[23,115],[22,108],[[],113],[[],114],[[112,105,28],[[107,[29]]]],[108,2],[[113,108,28],[[107,[29]]]],[106,2],[[114,106,28],[[107,[29]]]],[105,2],[[105,109,105]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[116,116],[[]],[[116,116],9],[[],[[2,[116]]]],[[116,116],14],[[116,3],4],[[116,3],4],[[]],[15,[[2,[116]]]],[116],[[]],[[116,116],[[19,[9]]]],[116,2],[[]],[[],21],[[],2],[[],2],[[],5],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[117,117],[118,118],[119,119],[120,120],[121,121],[122,122],[[]],[[]],[[]],[[]],[[]],[[]],[[117,117],9],[[118,118],9],[[],123],[[],124],[[],125],[[],126],[[],127],[[],119],[[],120],[[],128],[129,[[13,[121,[0,[11,12]]]]]],[130,[[13,[122,[0,[11,12]]]]]],[131,[[13,[[28,[117]],[0,[11,12]]]]]],[132,[[13,[133,[0,[11,12]]]]]],[134,[[13,[[28,[54]],[0,[11,12]]]]]],[[],[[2,[117]]]],[[],[[2,[118]]]],[120,[[13,[117,[0,[11,12]]]]]],[[],[[2,[121]]]],[[],[[2,[122]]]],[128,[[13,[118,[0,[11,12]]]]]],[[117,117],14],[[118,118],14],[[122,122],14],0,0,[[117,3],4],[[117,3],4],[[118,3],4],[[118,3],4],[[121,3],4],[[121,3],4],[[122,3],4],[[122,3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],118],[[]],[[]],[[]],[[]],[[]],[[]],[15,[[2,[117,16]]]],[[],117],[15,[[2,[117]]]],[54,22],[54,22],[54,23],[117,65],[54,[[109,[6]]]],[[54,22],22],[54,[[2,[[109,[6]],16]]]],[54,22],[[54,23],[[135,[23]]]],[117],[118],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[117],[117,118],[[],123],[[23,136,26,23,18,23],129],[[],124],[[23,136,26,23,18,23],130],[[],125],[26,131],[26,132],[[],126],[[],127],[[26,23,136,26,23,18,23],134],[65,117],[[],119],[[],120],[[],128],0,[[117,117],[[19,[9]]]],[[118,118],[[19,[9]]]],[117,118],[[123,121,28],[[2,[29]]]],[[124,122,28],[[2,[29]]]],[[125,28,28],[[2,[29]]]],[[126,133,28],[[2,[29]]]],[[127,28,28],[[2,[29]]]],[117,2],[118,2],[[119,117,28],[[2,[29]]]],[121,2],[122,2],[117],[[]],[[]],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[137,137],[138,138],[[]],[[]],0,0,[[],[[2,[137]]]],[[],[[2,[138]]]],[[137,3],4],[[137,3],4],[[138,3],4],[[138,3],4],[[]],[[]],0,[[]],[[]],0,0,0,[137,2],[138,2],0,[[]],[[]],[[],21],[[],21],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[],[[140,[139]]]],[[[140,[139]]],23],[[]],[[]],[[],2],[[],2],[[],5],[[]],[141],[141,[[142,[139]]]],[141,[[109,[139]]]],[[[140,[139]]]],0,0,0,0,0,0,[[143,6,144],[[107,[145]]]],[[146,143],107],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[143,143],[[107,[[142,[6,145]]]]]],[145,145],[144,144],[143,143],[146,146],[[]],[[]],[[]],[[]],[[143,109],143],[[146,109],146],[144,145],[[],147],[[],148],[[],143],[[],146],[148,[[13,[144,[0,[11,12]]]]]],[[],[[2,[145]]]],[[],[[2,[144]]]],[[],[[2,[143]]]],[[],[[2,[146]]]],[[145,3],4],[[144,3],4],[[143,3],4],[[146,3],4],[[]],[[]],[[]],[[]],[[]],[[]],[143,[[109,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[146,14],[144,14],[146,141],[[],147],[[],148],[[],146],0,0,[[147,144,28],[[107,[29]]]],[145,2],[144,2],[143,2],[146,2],[[143,109,143]],[[146,109,146]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[],[[2,[16]]]],[[],141],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[149,149],[150,150],[[]],[[]],[[],151],[[],152],[[],153],[[],154],[[],149],[155,[[13,[21,[0,[11,12]]]]]],[152,[[13,[[156,[18]],[0,[11,12]]]]]],[154,[[13,[157,[0,[11,12]]]]]],[150,[[13,[[28,[18]],[0,[11,12]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[2,[16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],158],[[],155],[[],151],[[],152],[[],153],[[],154],[[],149],[[[27,[23]],[27,[23]]],150],[[158,21,28],[[2,[29]]]],[[151,156,28],[[2,[29]]]],[[153,157,28],[[2,[29]]]],[[149,28,28],[[2,[29]]]],[[],[[2,[[28,[18]],16]]]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],[[2,[18,16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[95,95],[159,159],[160,160],[[]],[[]],[[]],[[95,95],9],[[],159],[[],[[2,[95]]]],[160,[[13,[95,[0,[11,12]]]]]],[[95,95],14],[[95,3],4],[[95,3],4],[[]],[[]],[[]],[[],95],[15,[[2,[95]]]],[[95,23],23],[95,14],[[95,18],[[2,[95,16]]]],[[95,18],[[2,[95,16]]]],[95],[[]],[[]],[[]],[[95,23],14],[[95,23,18],14],[[],95],[[],95],[[23,18],95],[[],159],[[],160],[[23,23],[[2,[95,16]]]],[[23,23,18],[[2,[95,16]]]],[[95,95],[[19,[9]]]],0,[95,2],[[159,95,28],[[2,[29]]]],[[95,95,18],[[2,[23,16]]]],0,[95],[[]],[[]],[[]],[[],21],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[161,161],[[]],[[],[[2,[162]]]],[[],[[2,[163]]]],[[],[[2,[161]]]],[[],[[2,[164]]]],0,0,0,0,0,[[162,3],4],[[162,3],4],[[163,3],4],[[163,3],4],[[161,3],4],[[161,3],4],[[164,3],4],[[164,3],4],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],0,0,0,[162,2],[163,2],[161,2],[164,2],0,0,0,0,[[]],[[],21],[[],21],[[],21],[[],21],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[166,[165]]],[[166,[165]]]],[[]],[167,[[13,[166,[0,[11,12]]]]]],[[[166,[168]],166],14],[166,14],[[[166,[169]],3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[],170],[[],167],[[170,166,28],[[2,[29]]]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[18,79,79,95],[[2,[79,16]]]],[[18,79,79,79],95],[[18,79,79,171],[[2,[[19,[95]],16]]]],[[18,79,79,79],[[2,[[19,[95]],16]]]],[[95,95,18],[[2,[23,16]]]],[[18,79,79,[19,[79]],[19,[79]]],[[2,[16]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[85,85],[[]],[[],172],[[],173],[173,[[13,[85,[0,[11,12]]]]]],[[],[[2,[85]]]],[[85,85],14],[[85,3],4],[[85,3],4],[[]],[[]],[[]],[15,[[2,[85]]]],[[]],[[]],[[]],[[85,85],14],[[],172],[[],173],[[172,85,28],[[2,[29]]]],[85,2],[[]],[[],21],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[63,[52,51]]],23],[[[63,[165,165]]],[[63,[165,165]]]],[[]],[[[63,[52,51]],54],14],0,0,0,[[],174],[[[19,[59]],60,61],[[13,[[63,[62]],[0,[11,12]]]]]],[175,[[13,[63,[0,[11,12]]]]]],[[],[[2,[63]]]],[175,[[13,[[63,[62]],[0,[11,12]]]]]],[[[63,[168,168]],63],14],[[[63,[169,169]],3],4],[[63,3],4],[[]],[[]],[[]],[[[63,[53,51]]],23],[[[63,[52,51]]],23],[[[63,[121,117]]],22],[[[63,[121,117]]],22],[[[63,[121,117]]],23],[[],65],[[[63,[121,117]]],[[109,[6]]]],[[[63,[121,117]],22],22],[[[63,[121,117]]],[[2,[[109,[6]],16]]]],[[[63,[121,117]]],22],[[[63,[121,117]],23],[[135,[23]]]],0,[[]],[[]],[[]],[65],[[],175],[[],174],[[59,66],[[2,[[63,[62]],16]]]],[[67,17,28],[[2,[29]]]],[63,2],[[174,63,28],[[2,[29]]]],[[174,63,28],[[2,[29]]]],0,[63,141],0,[[]],[[],21],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],5],[[],5],[[],5],[63,[[2,[16]]]],[[]],[[]],[[]]],"p":[[3,"ActiveBlock"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"TypeId"],[3,"Address"],[3,"AddressDeserializer"],[3,"ExecutionAddressCycleInfo"],[4,"Ordering"],[8,"Deserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[15,"bool"],[15,"str"],[4,"ModelsError"],[3,"PublicKey"],[15,"u8"],[4,"Option"],[8,"Serializer"],[3,"String"],[3,"Amount"],[15,"u64"],[3,"AmountSerializer"],[3,"AmountDeserializer"],[15,"u32"],[4,"Bound"],[3,"Vec"],[4,"SerializeError"],[3,"LedgerInfo"],[3,"RollsInfo"],[3,"EndorsementInfo"],[3,"TimeInterval"],[3,"DatastoreEntryInput"],[3,"DatastoreEntryOutput"],[3,"EventFilter"],[3,"ReadOnlyBytecodeExecution"],[3,"ReadOnlyCall"],[3,"AddressInfo"],[3,"CompactAddressInfo"],[3,"OperationInput"],[3,"NodeStatus"],[3,"OperationInfo"],[4,"BlockGraphStatus"],[3,"IndexedSlot"],[3,"SlotAmount"],[3,"BlockInfo"],[3,"BlockInfoContent"],[3,"BlockSummary"],[6,"WrappedBlock"],[3,"BlockId"],[3,"Block"],[3,"BlockHeader"],[6,"WrappedOperation"],[3,"BlockSerializer"],[3,"BlockHeaderSerializer"],[3,"BlockDeserializer"],[3,"BlockHeaderDeserializer"],[8,"Serializer"],[3,"SignatureDeserializer"],[3,"PublicKeyDeserializer"],[8,"Id"],[3,"Wrapped"],[6,"WrappedHeader"],[3,"Hash"],[3,"KeyPair"],[3,"Signature"],[3,"Clique"],[3,"CliqueSerializer"],[3,"CliqueDeserializer"],[4,"OperationSearchResultBlockStatus"],[4,"OperationSearchResultStatus"],[3,"OperationSearchResult"],[3,"StakersCycleProductionStats"],[3,"PubkeySig"],[8,"Deserialize"],[3,"CompactConfig"],[3,"GENESIS_TIMESTAMP"],[3,"MassaTime"],[3,"END_TIMESTAMP"],[3,"GENESIS_KEY"],[3,"POS_MISS_RATE_DEACTIVATION_THRESHOLD"],[3,"Ratio"],[3,"VERSION"],[3,"Version"],[3,"DatastoreSerializer"],[3,"DatastoreDeserializer"],[3,"BTreeMap"],[3,"EndorsementId"],[3,"Endorsement"],[3,"EndorsementSerializer"],[3,"EndorsementSerializerLW"],[3,"EndorsementDeserializer"],[3,"EndorsementDeserializerLW"],[3,"Slot"],[4,"MassaSignatureError"],[3,"Error"],[4,"Err"],[4,"TimeError"],[4,"MassaHashError"],[3,"Demand"],[8,"Error"],[4,"ReadOnlyResult"],[3,"ExecuteReadOnlyResponse"],[3,"LedgerChanges"],[3,"LedgerChange"],[6,"ModelsResult"],[3,"LedgerData"],[6,"PreHashSet"],[3,"LedgerDataDeserializer"],[3,"LedgerChangeDeserializer"],[3,"LedgerChangesSerializer"],[3,"LedgerDataSerializer"],[3,"LedgerChangeSerializer"],[3,"LedgerChangesDeserializer"],[3,"NodeId"],[3,"OperationId"],[3,"OperationPrefixId"],[3,"OperationIdSerializer"],[3,"OperationIdDeserializer"],[3,"Operation"],[4,"OperationType"],[3,"OperationSerializer"],[3,"OperationTypeSerializer"],[3,"OperationIdsSerializer"],[3,"OperationPrefixIdsSerializer"],[3,"OperationsSerializer"],[3,"OperationPrefixIdDeserializer"],[3,"OperationDeserializer"],[3,"OperationTypeDeserializer"],[3,"OperationIdsDeserializer"],[3,"OperationPrefixIdsDeserializer"],[6,"OperationPrefixIds"],[3,"OperationsDeserializer"],[3,"RangeInclusive"],[15,"u16"],[3,"SCOutputEvent"],[3,"EventExecutionContext"],[8,"PreHashed"],[3,"HashMapper"],[15,"usize"],[6,"PreHashMap"],[3,"RollUpdates"],[3,"RollUpdate"],[3,"RollCompensation"],[3,"RollCounts"],[3,"RollUpdateSerializer"],[3,"RollUpdateDeserializer"],[3,"VecU8Serializer"],[3,"VecU8Deserializer"],[3,"BitVecSerializer"],[3,"BitVecDeserializer"],[3,"IpAddrSerializer"],[3,"IpAddrDeserializer"],[3,"StringDeserializer"],[3,"BitVec"],[4,"IpAddr"],[3,"StringSerializer"],[3,"SlotSerializer"],[3,"SlotDeserializer"],[3,"ConsensusStats"],[3,"ExecutionStats"],[3,"NetworkStats"],[3,"PoolStats"],[8,"Clone"],[4,"StreamingStep"],[3,"StreamingStepDeserializer"],[8,"PartialEq"],[8,"Debug"],[3,"StreamingStepSerializer"],[15,"i64"],[3,"VersionSerializer"],[3,"VersionDeserializer"],[3,"WrappedSerializer"],[3,"WrappedDeserializer"],[13,"Transaction"],[13,"CallSC"],[13,"ExecuteSC"],[13,"RollBuy"],[13,"RollSell"],[8,"CapacityAllocator"],[8,"DeserializeMinBEInt"],[8,"SerializeMinBEInt"],[8,"WrappedContent"]]},\
"massa_network_exports":{"doc":"Manages a connection with a node","t":[13,13,13,4,13,13,13,13,13,13,13,4,13,3,3,3,13,13,13,13,4,3,3,13,6,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,13,13,13,4,3,2,4,4,4,3,4,3,13,13,13,4,3,4,13,13,13,13,13,13,13,3,13,3,13,13,4,13,3,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,12,12,12,12,12,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,12,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,11,11,11,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12],"n":["ActiveConnectionMissing","AskForBlocks","AskForBlocks","AskForBlocksInfo","AskForOperations","AskForOperations","AskPeerList","AskedForBlocks","AskedPeerList","Banned","BannedPeerTryingToConnect","BlockInfoReply","Bootstrap","BootstrapPeers","BootstrapPeersDeserializer","BootstrapPeersSerializer","ChannelError","Close","CloseConnectionWithNoConnectionToClose","ConnectionClosed","ConnectionClosureReason","ConnectionCount","ConnectionId","ContainerInconsistencyError","Establisher","Failed","GeneralProtocolError","GetBootstrapPeers","GetPeers","GetStats","HandshakeError","HandshakeErrorType","HandshakeIdAlreadyExist","HandshakeInterruption","HandshakeInvalidSignature","HandshakeKey","HandshakeTimeout","HandshakeWrongMessage","Header","Header","IOError","IncompatibleVersion","Info","Info","InvalidIpError","Listener","MassaHashError","MassaSignatureError","MaxPeersConnectionReached","MissingBlock","MissingOperation","MissingPeersError","ModelsError","NetworkCommand","NetworkCommandSender","NetworkConfig","NetworkConnectionErrorType","NetworkError","NetworkEvent","NetworkEventReceiver","NetworkManagementCommand","NetworkManager","NewConnection","NodeBanByIds","NodeBanByIps","NodeCommand","NodeEvent","NodeEventType","NodeSignMessage","NodeUnbanByIds","NodeUnbanByIps","Normal","NotFound","Operations","Operations","Peer","PeerConnectionError","PeerInfo","PeerInfoNotFoundError","PeerListReceived","PeerType","PeerTypeNotFoundError","Peers","ReadHalf","ReceiveAskForOperations","ReceivedAskForBlocks","ReceivedAskForOperations","ReceivedBlockHeader","ReceivedBlockHeader","ReceivedBlockInfo","ReceivedEndorsements","ReceivedEndorsements","ReceivedOperationAnnouncements","ReceivedOperationAnnouncements","ReceivedOperations","ReceivedOperations","ReceivedPeerList","ReceivedReplyForBlocks","RemoveFromWhitelist","ReplyForBlocks","SelfConnection","SendBlockHeader","SendBlockHeader","SendBlockInfo","SendEndorsements","SendEndorsements","SendOperationAnnouncements","SendOperationAnnouncements","SendOperations","SendOperations","SendPeerList","SerdeError","SerializeError","Standard","TimeError","TokioRecvError","TokioTaskJoinError","TooManyConnectionAttempts","TooManyConnectionFailure","UnexpectedError","UnexpectedNodeCommandChannelClosure","UnexpectedWriterClosure","WhiteListed","Whitelist","WriteHalf","WrongSignature","active_in_connections","active_in_connections","active_nodes","active_out_connection_attempts","active_out_connection_attempts","active_out_connections","active_out_connections","advertised","announce_operations","ask_for_block_list","banned","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cleanup","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drain","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_usize","get_available_out_connection_attempts","get_bootstrap_peers","get_hash","get_hash","get_network_stats","get_peers","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_usize","ip","is_active","is_peer_ready","join_handle","last_alive","last_failure","manager_tx","new","new","new","node_ban_by_ids","node_ban_by_ips","node_sign_message","node_unban_by_ids","node_unban_ips","our_node_id","partial_cmp","partial_cmp","peer_info","peer_type","peers","provide","provide","remove_from_whitelist","send_ask_for_operations","send_block_header","send_block_info","send_endorsements","send_operations","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","settings","source","stop","throw_handshake_error","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_event","whitelist","batch","endorsements","header","info","list","msg","node","node","node","node","operations","response_tx","response_tx","to_node","to_node","wishlist","endorsements","header","info","list","node","node","node","node","node","node","operation_prefix_ids","operation_prefix_ids","operations","source_node_id","NetworkConfig","PeerTypeConnectionConfig","ask_peer_list_interval","ban_timeout","bind","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","connect_timeout","controller_channel_size","default","deserialize","deserialize","endorsement_count","event_channel_size","fmt","fmt","from","from","initial_peers_file","into","into","keypair_file","max_ask_blocks","max_banned_peers","max_bytes_read","max_bytes_write","max_datastore_value_length","max_endorsements_per_message","max_function_name_length","max_idle_peers","max_in_connection_overflow","max_in_connections","max_in_connections_per_ip","max_message_size","max_op_datastore_entry_count","max_op_datastore_key_length","max_op_datastore_value_length","max_operations_per_block","max_operations_per_message","max_out_attempts","max_parameters_size","max_peer_advertise_length","max_send_wait_network_event","max_send_wait_node_event","message_timeout","node_command_channel_size","node_event_channel_size","peer_list_send_timeout","peer_types_config","peers_file","peers_file_dump_interval","protocol_port","routable_ip","target_out_connections","thread_count","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","wakeup_interval"],"q":["massa_network_exportsmassa_network_exports::NetworkCommand","","","","","","","","","","","","","","","","massa_network_exports::NetworkEvent","","","","","","","","","","","","","","massa_network_exports::settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Active connection missing:<code>{0}</code>","Ask for info on a list of blocks.","Ask for a block to a node.","Ask for the info about a block.","Ask for a set of operations","Ask for operation","Ask peer list","Someone ask for block with given header hash.","Node we are connected to asked for advertised peers","Connection closed after node ban","A banned peer is trying to connect: {0}","A node replied with info about a block.","if the peer is in bootstrap servers list for now it is …","Peers that are transmitted during bootstrap","Deserializer for <code>BootstrapPeers</code>","Serializer for <code>BootstrapPeers</code>","An error occurred during channel communication: {0}","Close the node worker.","Try to close connection with no connection: {0}","connection to node was closed","Possible reasons for a connection closure","Connection count for a category","A unique connection id for a node","container inconsistency error: {0}","Connection establisher","Connection failed for some reason","Protocol err:{0}","get peers for bootstrap server","<code>(PeerInfo, Vec &lt;(NodeId, bool)&gt;) peer info + list</code> of …","gets network stats","handshake error:{0:?}","Handshake error type","Id already exist","Unexpected interruption","Invalid signature","if remote id is the same as ours","timeout","wrong handshake message","Ask header","Header","IO error : {0}","Incompatible version","The info about the block is required(list of operations …","The info about the block is required(list of operations …","The ip:<code>{0}</code> address is not valid","Connection listener","<code>MassaHash</code> error {0}","<code>massa_signature</code> error {0}","Max connected peers reached: {0}","missing block","missing operation","missing peers","models error: {0}","Commands that the worker can execute","Network command sender","","Incoming and outgoing connection with other peers error …","Network error","network event","network event receiver","Network management command","Network manager","new connection from node","Ban a list of peer by their node id","Ban a list of peer by their ip address","network command","Events node worker can emit. Events are a tuple linking a …","Event types that node worker can emit Append on receive …","sign message with our node keypair (associated to node id) …","Unban a list of peer by their node id","Unban a list of peer by their ip address","Connection was closed properly","Block not found","The actual operations are required.","The actual operations required.","Associate a peer info with nodes","Error during network connection: {0}","All information concerning a peer is here","Peer info not found for address: {0}","Outgoing connection returned a bootstrapable peer list: …","Peer categories. There is a defined number of slots for …","Peer info not found for address: {0}","peers","read half of the TCP stream","Receive a list of asked operations from <code>node</code>","Node we are connected asked for info on a list of blocks.","Receive a list of wanted operations","Node we are connected to sent block header","A block header was received","Info about a block was received","Receive a set of endorsement","received endorsements from node","Received an operation id batch announcing new operations","Receive a list of <code>OperationId</code>","Received full operations.","Receive previously asked Operation","Node we are connected to sent peer list","Node we are connected sent info on a list of blocks.","Remove from whitelist a list of <code>IpAddr</code>","Reply with info on a list of blocks.","Attempt too connect from you own IP","Send the header of a block to a node.","Send a header to a node.","Send info about the content of a block to a node.","Endorsements","Send endorsements to a node","Send a batch of operation ids","Send operation ids batch to a node","Send full Operations (send to a node that previously asked …","Send a batch of full operations","Send given peer list to node.","Serde error : {0}","serialize error: {0}","Just a peer","Time error {0}","error receiving oneshot response : {0}","A tokio task has crashed err:{0}","Too many connection attempt: {0}","Too many connection failure: {0}","Unexpected error","the network controller should not drop a node command …","the writer of a node should not drop its event sender …","Connection from these nodes are always accepted","Whitelist a list of <code>IpAddr</code>","Write half of the TCP stream","wrong signature","Current number of active in connections with that peer. Isn…","Number of currently live (TCP connection active, handshake …","corresponding nodes (true if the connection is outgoing, …","Current number of active out connection attempts with that …","Number of outgoing connections our node is currently …","Current number of active out connections with that peer. …","Number of currently live (TCP connection active, handshake …","Whether peer was promoted through another peer","Create a new call to the network, sending a announcement …","Send the order to ask for a block.","peer was banned","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cleans up the <code>PeerInfo</code> by normalizing the IP address and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","drains remaining events and returns them in a <code>VecDeque</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets available out connection attempts for given …","Send the order to get bootstrap peers.","","","get network stats","Send the order to get peers.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Peer ip address.","Returns true if there is at least one connection attempt / …","peer is ready to be retried, enough time has elapsed since …","network handle","Time in milliseconds when peer was last alive","Time in milliseconds of peer’s last failure","management commands","Creates a new <code>BootstrapPeersSerializer</code>","Creates a new <code>BootstrapPeersDeserializer</code>","New standard <code>PeerInfo</code> for <code>IpAddr</code>","ban node(s) by id(s)","ban node(s) by ip(s)","Sign a message using the node’s keypair","remove from banned node(s) by id(s)","remove from banned node(s) by ip(s)","our node id","","","peer info","The category the peer is in affects how it’s treated.","peers","","","remove ip from whitelist","Create a new call to the network, sending a <code>wishlist</code> of …","Send the order to send block header.","Send info about the contents of a block.","send endorsements to node id","send operations to node","","","","","","","","","","","network settings","","stop network","return handshake error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","wait network event","add ip to whitelist","batch of operation ids","endorsements","block id","block id","node to block ids","arbitrary message","to node id","to node id","to node id","to node id","operations","response channels","response channels","to node id","to node id","operation ids in the wish list","Endorsements","header","block","asked blocks","from node id","node id","node id","from node id","from node id","node id","operation prefix ids","operation prefix ids","operations","from node id","Network configuration","Connection configuration for a peer type Limit the current …","Every <code>ask_peer_list_interval</code> in milliseconds we ask every …","Time after which we forget a node","Where to listen for communications.","","","","","","","","","Time interval spent waiting for a response from a peer. In …","Controller channel size","","","","Endorsement count","Event channel size","","","Returns the argument unchanged.","Returns the argument unchanged.","Path to the file containing initial peers.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Path to the file containing our keypair","Max number ids in ask blocks message","Limit on the number of banned peers we remember.","Read limitation for a connection in bytes per seconds","Write limitation for a connection in bytes per seconds","Maximum length of a datastore value","Max endorsements per message","Maximum length function name in call SC","Limit on the number of idle peers we remember.","Max number of in connection overflowed managed by the …","max number of incoming connection","Limit on the number of in connections per ip.","Max message size","Maximum entry in an operation datastore","Maximum length of an operation datastore key","Maximum length of an operation datastore value","Max operations per block","Max operations per message in the network to avoid sending …","max number of on going outgoing connection attempt","Maximum size of parameters in call SC","Max peer advertise length","Max wait time for sending a Network event.","Max wait time for sending a Node event.","After <code>message_timeout</code> milliseconds we are no longer …","Node command channel size","Node event channel size","Timeout Duration when we send a <code>PeerList</code> in handshake","Configuration for <code>PeerType</code> connections","Path to the file containing known peers.","Peer database is dumped every <code>peers_file_dump_interval</code> in …","Protocol port","Our own IP if it is routable, else None.","target number of outgoing connections","Thread count","","","","","","","","","","","<code>Network_worker</code> will try to connect to available peers …"],"i":[4,9,33,0,9,33,9,28,10,15,36,0,19,0,0,0,4,9,36,28,0,0,0,4,0,15,4,33,33,33,4,0,35,35,35,35,35,35,12,13,4,35,12,13,4,0,4,4,36,4,4,4,4,0,0,0,0,0,0,0,0,0,28,33,33,0,0,0,33,33,33,15,13,12,13,0,4,0,36,35,0,36,0,0,28,10,10,10,28,28,10,28,10,28,10,28,10,10,33,9,36,9,33,33,9,33,9,33,9,33,9,4,4,19,4,4,4,36,36,36,4,4,19,33,0,4,8,22,16,8,22,8,22,8,1,1,8,27,61,21,23,9,10,11,12,33,13,28,34,14,15,4,35,36,1,16,17,18,19,8,22,27,61,21,23,9,10,11,12,33,13,28,34,14,15,4,35,36,1,16,17,18,19,8,22,8,9,10,11,12,13,14,15,1,16,17,18,19,8,9,10,11,12,13,14,15,1,16,17,18,19,8,14,19,21,12,14,19,22,23,12,13,14,15,16,17,18,19,8,27,14,15,18,19,14,15,18,19,9,10,11,12,33,13,28,34,14,14,15,4,4,35,36,36,16,17,18,19,19,8,22,27,61,21,23,9,10,11,12,33,13,28,34,14,15,4,4,4,4,4,4,4,4,4,4,4,35,36,1,16,17,18,19,8,22,19,22,1,14,19,1,1,14,19,27,61,21,23,9,10,11,12,33,13,28,34,14,15,4,35,36,1,16,17,18,19,8,22,19,8,8,8,61,8,8,61,21,23,8,1,1,1,1,1,17,14,19,16,8,17,4,36,1,1,1,1,1,1,21,12,13,14,15,16,17,18,19,8,0,4,61,0,9,10,11,12,13,14,15,1,16,17,18,19,8,14,4,36,19,27,61,21,23,9,10,11,12,33,13,28,34,14,15,4,35,36,1,16,17,18,19,8,22,27,61,21,23,9,10,11,12,33,13,28,34,14,15,4,35,36,1,16,17,18,19,8,22,27,61,21,23,9,10,11,12,33,13,28,34,14,15,4,35,36,1,16,17,18,19,8,22,27,61,21,23,9,10,11,12,33,13,28,34,14,15,4,35,36,1,16,17,18,19,8,22,27,1,65,66,67,68,69,70,68,67,66,71,71,70,72,65,73,73,74,75,76,77,76,77,78,79,80,74,79,80,78,75,0,0,64,64,64,64,47,64,47,64,47,64,47,64,64,47,64,47,64,64,64,47,64,47,64,64,47,64,64,64,64,64,64,64,64,64,64,47,64,64,64,64,64,64,64,47,64,64,64,64,64,64,64,64,64,64,64,64,64,47,64,64,47,64,47,64,47,64,47,64,47,64],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3],[[5,[4]]]],[[1,[7,[2,6]]],[[5,[4]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[1,1],[16,16],[17,17],[18,18],[19,19],[8,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[14,14],20],[[19,19],20],[[],21],[[],12],[[],14],[[],19],[[],22],[23,[[26,[18,[0,[24,25]]]]]],[[],[[5,[12]]]],[[],[[5,[13]]]],[[],[[5,[14]]]],[[],[[5,[15]]]],[[],[[5,[16]]]],[[],[[5,[17]]]],[[],[[5,[18]]]],[[],[[5,[19]]]],[[],[[5,[8]]]],[27,[[29,[28]]]],[[14,14],30],[[15,15],30],[[18,18],30],[[19,19],30],[[],30],[[],30],[[],30],[[],30],[[9,31],32],[[10,31],32],[[11,31],32],[[12,31],32],[[33,31],32],[[13,31],32],[[28,31],32],[[34,31],32],[[14,31],32],[[14,31],32],[[15,31],32],[[4,31],32],[[4,31],32],[[35,31],32],[[36,31],32],[[36,31],32],[[16,31],32],[[17,31],32],[[18,31],32],[[19,31],32],[[19,31],32],[[8,31],32],[[22,31],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37,4],[[]],[38,4],[39,4],[40,4],[41,4],[42,4],[43,4],[44,4],[36,4],[45,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46,19],[[22,47],46],[1,[[5,[18,4]]]],[[],48],[[],48],[1,[[5,[49,4]]]],[1,[[5,[17,4]]]],[14],[19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,46],0,[8,30],[[8,50,50],30],0,0,0,0,[[],21],[51,23],[[52,30],8],[[1,[6,[2]]],[[5,[4]]]],[[1,[6,[52]]],[[5,[4]]]],[[1,[6,[53]]],[[5,[54,4]]]],[[1,[6,[2]]],[[5,[4]]]],[[1,[6,[52]]],[[5,[4]]]],0,[[14,14],[[55,[20]]]],[[19,19],[[55,[20]]]],0,0,0,[56],[56],[[1,[6,[52]]],[[5,[4]]]],[[1,2,3],[[5,[4]]]],[[1,2,57],[[5,[4]]]],[[1,2,6],[[5,[4]]]],[[1,2,[6,[58]]],[[5,[4]]]],[[1,2,[6,[59]]],[[5,[4]]]],[[21,18,6],[[5,[38]]]],[12,5],[13,5],[14,5],[15,5],[16,5],[17,5],[18,5],[19,5],[8,5],0,[4,[[55,[60]]]],[[61,27],[[5,[4]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],62],[[],62],[[],62],[[],62],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[],63],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,[[5,[28,4]]]],[[1,[6,[52]]],[[5,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[64,64],[47,47],[[]],[[]],0,0,[[],47],[[],[[5,[64]]]],[[],[[5,[47]]]],0,0,[[64,31],32],[[47,31],32],[[]],[[]],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],63],[[],63],[[]],[[]],0],"p":[[3,"NetworkCommandSender"],[3,"NodeId"],[6,"OperationPrefixIds"],[4,"NetworkError"],[4,"Result"],[3,"Vec"],[3,"HashMap"],[3,"PeerInfo"],[4,"NodeCommand"],[4,"NodeEventType"],[3,"NodeEvent"],[4,"AskForBlocksInfo"],[4,"BlockInfoReply"],[3,"ConnectionId"],[4,"ConnectionClosureReason"],[3,"Peer"],[3,"Peers"],[3,"BootstrapPeers"],[4,"PeerType"],[4,"Ordering"],[3,"BootstrapPeersSerializer"],[3,"ConnectionCount"],[3,"BootstrapPeersDeserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[3,"NetworkEventReceiver"],[4,"NetworkEvent"],[3,"VecDeque"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"NetworkCommand"],[4,"NetworkManagementCommand"],[4,"HandshakeErrorType"],[4,"NetworkConnectionErrorType"],[3,"JoinError"],[4,"SerializeError"],[4,"ModelsError"],[4,"TimeError"],[4,"MassaSignatureError"],[4,"MassaHashError"],[3,"Error"],[3,"Error"],[3,"RecvError"],[15,"usize"],[3,"PeerTypeConnectionConfig"],[15,"u64"],[3,"NetworkStats"],[3,"MassaTime"],[15,"u32"],[4,"IpAddr"],[15,"u8"],[3,"PubkeySig"],[4,"Option"],[3,"Demand"],[6,"WrappedHeader"],[6,"WrappedEndorsement"],[6,"WrappedOperation"],[8,"Error"],[3,"NetworkManager"],[3,"String"],[3,"TypeId"],[3,"NetworkConfig"],[13,"SendOperationAnnouncements"],[13,"SendEndorsements"],[13,"SendBlockHeader"],[13,"SendBlockInfo"],[13,"AskForBlocks"],[13,"NodeSignMessage"],[13,"SendOperations"],[13,"GetStats"],[13,"AskForOperations"],[13,"ReceivedEndorsements"],[13,"ReceivedBlockHeader"],[13,"ReceivedBlockInfo"],[13,"AskedForBlocks"],[13,"ReceivedOperations"],[13,"ReceivedOperationAnnouncements"],[13,"ReceiveAskForOperations"]]},\
"massa_network_worker":{"doc":"Manages a connection with a node","t":[5],"n":["start_network_controller"],"q":["massa_network_worker"],"d":["Starts a new <code>NetworkWorker</code> in a spawned task"],"i":[0],"f":[[[1,2,3,[5,[4]],6],[[8,[7]]]]],"p":[[3,"NetworkConfig"],[6,"Establisher"],[15,"i64"],[3,"BootstrapPeers"],[4,"Option"],[3,"Version"],[4,"NetworkError"],[4,"Result"]]},\
"massa_node":{"doc":"Massa: The Decentralized and Scaled Blockchain","t":[3,3,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,5,5,5,12,11,12,11,11,12,12,5,12,0,5,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["Args","Managers","bootstrap_manager","borrow","borrow","borrow_mut","borrow_mut","clap","consensus_manager","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","execution_manager","factory_manager","from","from","from_clap","init","init","into","into","launch","load_wallet","main","network_manager","parse_args","password","pointer_metadata","pointer_metadata","pool_manager","protocol_manager","run","selector_manager","settings","stop","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","vzip","APISettings","BootstrapSettings","ConsensusSettings","ExecutionSettings","FactorySettings","LedgerSettings","LoggingSettings","NetworkSettings","PoolSettings","ProtocolSettings","SETTINGS","SelectionSettings","Settings","__private_field","api","ask_block_timeout","ask_peer_list_interval","asked_operations_pruning_period","ban_timeout","bind","bind","bind_private","bind_public","block_db_prune_interval","bootstrap","bootstrap_blacklist_file","bootstrap_list","bootstrap_whitelist_file","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache_duration","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","connect_timeout","connect_timeout","consensus","cursor_delay","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","disk_ledger_path","draw_lookahead_period_count","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","enable_clock_synchronization","execution","factory","final_history_length","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_keep_final_periods","from","from","from","from","from","from","from","from","from","from","from","from","from","future_block_processing_max_periods","init","init","init","init","init","init","init","init","init","init","init","init","init","initial_delay","initial_ledger_path","initial_peers_file","initial_rolls_path","into","into","into","into","into","into","into","into","into","into","into","into","into","ip_list_max_size","keypair_file","ledger","level","logging","max_arguments","max_banned_peers","max_bytes_read","max_bytes_read_write","max_bytes_write","max_dependency_blocks","max_discarded_blocks","max_draw_cache","max_endorsement_count","max_endorsements_propagation_time","max_final_events","max_future_processing_blocks","max_idle_peers","max_in_connection_overflow","max_in_connections_per_ip","max_item_return_count","max_item_return_count","max_known_blocks_size","max_known_endorsements_size","max_known_ops_size","max_node_known_blocks_size","max_node_known_endorsements_size","max_node_known_ops_size","max_node_wanted_blocks_size","max_operation_future_validity_start_periods","max_operations_per_message","max_operations_per_message","max_operations_propagation_time","max_ping","max_pool_size_per_thread","max_send_wait","max_send_wait","max_send_wait_network_event","max_send_wait_node_event","max_simultaneous_ask_blocks_per_node","max_simultaneous_bootstraps","message_timeout","network","openrpc_spec_path","operation_announcement_buffer_capacity","operation_announcement_interval","operation_batch_buffer_capacity","operation_batch_proc_period","peer_list_send_timeout","peer_types_config","peers_file","peers_file_dump_interval","per_ip_min_interval","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pool","protocol","protocol_port","read_error_timeout","read_timeout","readonly_queue_length","retry_delay","routable_ip","selector","staking_wallet_path","stats_time_window_duration","stats_timespan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wakeup_interval","write_error_timeout","write_timeout"],"q":["massa_node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_node::settingsd":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Load wallet, asking for passwords if necessary","","","","Wallet password","","","","","","","Build here the default node settings from the …","","","","","","","","","","","","","API configuration, read from a file configuration","Bootstrap configuration.","Consensus configuration Assumes …","","Factory settings","","","","Pool configuration, read from a file configuration","Protocol Configuration, read from toml user configuration …","","","","","","after <code>ask_block_timeout</code> milliseconds we try to ask a block …","","All operations asked are prune each …","","","","","","old blocks are pruned every <code>block_db_prune_interval</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","force keep at least this number of final periods in RAM …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If a block is <code>future_block_processing_max_periods</code> periods …","","","","","","","","","","","","","","Initial delay","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Maximum number of blocks allowed in <code>DependencyWaitingBlocks</code>…","Maximum number of blocks allowed in discarded blocks.","","","Time threshold after which operation are not propagated","","Maximum number of blocks allowed in <code>FutureIncomingBlocks</code>.","","","","","max number of items returned while querying","max known blocks of current nodes we keep in memory (by …","max known endorsements by our node that we kept in memory","max known operations current node kept in memory","max known blocks of foreign nodes we keep in memory (by …","max known endorsements of foreign nodes we keep in memory …","max known operations of foreign nodes we keep in memory …","max wanted blocks per node kept in memory","","","Maximum of operations sent in one message.","Time threshold after which operation are not propagated","","","max event send wait","Max wait time for sending a Network or Node event.","","","we ask for the same block …","","","","","Maximum number of operations in the announcement buffer. …","Interval at which operations are announced in batches.","Maximum number of batches in the memory buffer. Dismiss …","Start processing batches in the buffer each …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Staking wallet file","","stats time span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,15,15,6,15,6,6,15,15,6,15,6,15,6,15,6,15,15,15,6,6,15,6,15,6,0,0,0,15,6,6,15,6,15,15,0,15,0,0,15,6,15,6,15,6,6,6,6,15,6,0,0,0,0,0,0,0,0,0,0,0,0,0,33,30,32,25,32,25,25,26,29,29,31,30,26,26,26,33,21,22,23,24,25,26,27,28,29,30,31,32,33,21,22,23,24,25,26,27,28,29,30,31,32,26,21,22,23,24,25,26,27,28,29,30,31,32,21,22,23,24,25,26,27,28,29,30,31,32,25,26,30,22,33,33,21,22,23,24,25,26,27,28,29,30,31,32,33,21,22,23,24,25,26,27,28,29,30,31,32,33,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,24,29,33,21,22,23,24,25,26,27,28,29,30,31,32,26,30,30,24,21,22,23,24,25,26,27,28,29,30,31,32,31,33,21,22,23,24,25,26,27,28,29,30,31,32,31,33,21,22,23,24,25,26,27,28,29,30,31,32,27,24,25,23,33,21,22,23,24,25,26,27,28,29,30,31,32,26,25,30,21,30,29,25,25,26,25,31,31,23,28,32,22,31,25,25,25,28,31,32,32,32,32,32,32,32,28,25,32,32,26,28,31,32,25,25,32,26,25,30,29,32,32,32,32,25,25,25,25,26,33,21,22,23,24,25,26,27,28,29,30,31,32,30,30,25,26,26,22,26,25,30,27,22,31,21,22,23,24,25,26,27,28,29,30,31,32,33,21,22,23,24,25,26,27,28,29,30,31,32,33,21,22,23,24,25,26,27,28,29,30,31,32,33,21,22,23,24,25,26,27,28,29,30,31,32,33,21,22,23,24,25,26,27,28,29,30,31,32,33,21,22,23,24,25,26,27,28,29,30,31,32,33,21,22,23,24,25,26,27,28,29,30,31,32,33,21,22,23,24,25,26,27,28,29,30,31,32,25,26,26],"f":[0,0,0,[[]],[[]],[[]],[[]],[[],1],0,[2],[2],[2],[2],[[],[[4,[3]]]],[[],[[4,[3]]]],[2],[2],0,0,[[]],[[]],[5,6],[[],2],[[],2],[[]],[[]],[[[9,[[8,[7]]]]]],[[[11,[10]],12],[[13,[[9,[[8,[7]]]]]]]],[[],13],0,[[],[[4,[6]]]],0,[[]],[[]],0,0,[6,13],0,0,[[14,15,16,16]],[[],4],[[],4],[[],4],[[],4],[[],17],[[],17],[[[19,[18]]],[[19,[20,18]]]],[[],20],[[],20],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[2],[33,30],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[[],[[4,[3]]]],[[],[[4,[21]]]],[[],[[4,[3]]]],[[],[[4,[3]]]],[[],[[4,[22]]]],[[],[[4,[3]]]],[[],[[4,[23]]]],[[],[[4,[3]]]],[[],[[4,[24]]]],[[],[[4,[3]]]],[[],[[4,[25]]]],[[],[[4,[26]]]],[[],[[4,[3]]]],[[],[[4,[3]]]],[[],[[4,[27]]]],[[],[[4,[28]]]],[[],[[4,[3]]]],[[],[[4,[3]]]],[[],[[4,[29]]]],[[],[[4,[3]]]],[[],[[4,[30]]]],[[],[[4,[3]]]],[[],[[4,[31]]]],[[],[[4,[3]]]],[[],[[4,[32]]]],0,0,[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],0,0,0,0,[[21,34],35],[[22,34],35],[[23,34],35],[[24,34],35],[[25,34],35],[[26,34],35],[[27,34],35],[[28,34],35],[[29,34],35],[[30,34],35],[[31,34],35],[[32,34],35],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[[19,[18]]],[[19,[20,18]]]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0],"p":[[3,"App"],[15,"usize"],[3,"With"],[4,"Result"],[3,"ArgMatches"],[3,"Args"],[3,"Wallet"],[6,"RwLock"],[3,"Arc"],[3,"String"],[4,"Option"],[3,"Path"],[6,"Result"],[3,"ConsensusEventReceiver"],[3,"Managers"],[3,"StopHandle"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[3,"LoggingSettings"],[3,"ExecutionSettings"],[3,"SelectionSettings"],[3,"LedgerSettings"],[3,"NetworkSettings"],[3,"BootstrapSettings"],[3,"FactorySettings"],[3,"PoolSettings"],[3,"APISettings"],[3,"Settings"],[3,"ConsensusSettings"],[3,"ProtocolSettings"],[3,"SETTINGS"],[3,"Formatter"],[6,"Result"]]},\
"massa_pool_exports":{"doc":"Copyright (c) 2022 MASSA LABS info@massa.net Pool of …","t":[3,8,8,10,10,11,11,12,11,10,11,10,10,11,11,11,10,10,10,10,11,12,12,12,12,12,10,12,12,11,10,12,11,11,11,11,11],"n":["PoolConfig","PoolController","PoolManager","add_endorsements","add_operations","borrow","borrow_mut","channels_size","clone","clone_box","clone_into","contains_endorsements","contains_operations","deserialize","fmt","from","get_block_endorsements","get_block_operations","get_endorsement_count","get_operation_count","into","max_block_endorsement_count","max_block_gas","max_block_size","max_endorsements_pool_size_per_thread","max_operation_pool_size_per_thread","notify_final_cs_periods","operation_validity_periods","roll_price","serialize","stop","thread_count","to_owned","try_from","try_into","type_id","vzip"],"q":["massa_pool_exports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Pool configuration","Trait defining a pool controller","Pool manager trait","Asynchronously add endorsements to pool. Simply print a …","Asynchronously add operations to pool. Simply print a …","","","operations and endorsements communication channels size","","Returns a boxed clone of self. Useful to allow cloning …","","Check if the pool contains a list of endorsements. Returns …","Check if the pool contains a list of operations. Returns …","","","Returns the argument unchanged.","Get endorsements for a block.","Get operations for block creation.","Get the number of endorsements in the pool","Get the number of operations in the pool","Calls <code>U::from(self)</code>.","max number of endorsements per block","maximal gas per block","maximal total block operations size","max endorsement pool size per thread (in number of …","max operation pool size per thread (in number of …","Asynchronously notify of new consensus final periods. …","operation validity periods","cost (in coins) of a single roll","","Stops the worker","thread count","","","","",""],"i":[0,0,0,3,3,2,2,2,2,3,2,3,3,2,2,2,3,3,3,3,2,2,2,2,2,2,3,2,2,2,14,2,2,2,2,2,2],"f":[0,0,0,[1],[1],[[]],[[]],0,[2,2],[[],[[4,[3]]]],[[]],[[],[[6,[5]]]],[[],[[6,[5]]]],[[],[[7,[2]]]],[[2,8],9],[[]],[[10,11]],[11],[[],12],[[],12],[[]],0,0,0,0,0,[[]],0,0,[2,7],[[]],0,[[]],[[],7],[[],7],[[],13],[[]]],"p":[[3,"Storage"],[3,"PoolConfig"],[8,"PoolController"],[3,"Box"],[15,"bool"],[3,"Vec"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"BlockId"],[3,"Slot"],[15,"usize"],[3,"TypeId"],[8,"PoolManager"]]},\
"massa_pool_worker":{"doc":"Copyright (c) 2022 MASSA LABS info@massa.net Pool of …","t":[5],"n":["start_pool_controller"],"q":["massa_pool_worker"],"d":["Start pool manager and controller"],"i":[0],"f":[[[1,2,[4,[3]]]]],"p":[[3,"PoolConfig"],[3,"Storage"],[8,"ExecutionController"],[3,"Box"]]},\
"massa_pos_exports":{"doc":"Definition and exports of the PoS types and errors.","t":[13,13,3,3,3,3,13,13,3,3,3,13,13,3,3,3,3,3,4,6,3,3,3,3,13,3,3,8,8,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,11,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,10,11,10,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,12,10,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10],"n":["ChannelDown","ContainerInconsistency","CreditsSerializer","CycleInfo","CycleInfoDeserializer","CycleInfoSerializer","CycleUnavailable","CycleUnfinished","DeferredCredits","DeferredCreditsDeserializer","DeferredCreditsSerializer","InvalidRollDistribution","OverflowError","PoSChanges","PoSChangesDeserializer","PoSChangesSerializer","PoSConfig","PoSFinalState","PosError","PosResult","ProductionStats","ProductionStatsDeserializer","ProductionStatsSerializer","RollsDeserializer","RollsFileLoadingError","Selection","SelectorConfig","SelectorController","SelectorManager","address_deserializer","amount_deserializer","apply_changes","block_failure_count","block_success_count","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_size","clone","clone","clone","clone","clone","clone","clone","clone","clone_box","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","complete","compute_initial_draws","config","create_initial_cycle","credits_bootstrap_part_size","cycle","cycle_history","cycle_history_length","default","default","default","default","default","default","default","default","default","deferred_credit_length_deserializer","deferred_credits","deferred_credits","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","endorsement_count","endorsements","eq","eq","eq","equivalent","equivalent","equivalent","extend","extend","feed_cycle","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","genesis_address","get_address_active_rolls","get_address_selections","get_all_production_stats","get_cycle_history_part","get_cycle_index","get_deferred_credits_at","get_deferred_credits_part","get_producer","get_rolls_for","get_selection","initial_rolls","initial_seeds","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_satisfying","max_draw_cache","nested_extend","new","new","new","new","new","new","new","new","new","new","new","periods_per_cycle","periods_per_cycle","producer","production_stats","production_stats","provide","remove_zeros","rng_seed","roll_changes","roll_counts","seed_bits","selector","serialize","serialize","serialize","serialize","serialize","serialize","set_cycle_history_part","set_deferred_credits_part","slot_deserializer","stop","thread_count","thread_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_for_draws"],"q":["massa_pos_exportsd":["Communication channel was down: {0}","Container inconsistency: {0}","Serializer for <code>Credits</code>","State of a cycle for all threads","Deserializer for <code>CycleInfo</code>","Serializer for <code>CycleInfo</code>","<code>CycleUnavailable</code>: PoS cycle {0} is needed but is absent …","<code>CycleUnfinished</code>: PoS cycle {0} is needed but is not …","Structure containing all the PoS deferred credits …","Deserializer for <code>DeferredCredits</code>","Serializer for <code>DeferredCredits</code>","Invalid roll distribution: {0}","Overflow error: {0}","Recap of all PoS changes","<code>PoSChanges</code> Deserializer","<code>PoSChanges</code> Serializer","proof-of-stake final state configuration","Final state of PoS","Proof-of-Stake error","Proof-of-Stake result","Block production statistics","Deserializer for <code>ProductionStats</code>","Serializer for <code>ProductionStats</code>","Deserializer for rolls","Error while loading initial rolls file: {0}","Selections of endorsements and producer","Configuration of selector thread","interface that communicates with the selector worker thread","Selector manager used to stop the selector thread","address deserializer","amount deserializer","Technical specification of <code>apply_changes</code>:","Number of blocks missed","Number of successfully created blocks","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","communication channel length","","","","","","","","","Returns a boxed clone of self. Useful to allow cloning …","","","","","","","","","whether the cycle is complete (all slots final)","Sends the current draw inputs (initial or bootstrapped) to …","proof-of-stake configuration","Create the initial cycle based off the initial rolls.","maximum size of a deferred credits bootstrap part","cycle number","contiguous cycle history, back = newest","number of saved cycle","","","","","","","","","","deserializer","coins to be credited at the end of the slot","set deferred credits indexed by target slot (can be set to …","","","","","","","Number of endorsement","Chosen endorsements","","","","","","","Increment a production stat structure with another","Extends the current <code>PosChanges</code> with another one","Feed cycle to the selector","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","genesis address to force draw genesis creators","Retrieves the amount of rolls a given address has at a …","Return a list of slots where <code>address</code> has been chosen to …","Retrieves the productions statistics for all addresses on …","Gets a cycle of the Proof of Stake <code>cycle_history</code>. Used …","Gets the index of a cycle in history","Retrieves every deferred credit of the given slot","Gets a part of the Proof of Stake <code>deferred_credits</code>. Used …","Get Address of the selected block producer for a given slot","Retrieves the amount of rolls a given address has at the …","Get Selection computed for a slot:","initial rolls, used for negative cycle look back","initial seeds, used for negative cycle look back (cycles …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if changes are empty","Check if the production stats are above the required …","Maximum number of computed cycle’s draws we keep in cache","Extends the current <code>DeferredCredits</code> with another but …","Creates a new <code>CycleInfo</code> serializer","Creates a new <code>CycleInfo</code> deserializer","Creates a new <code>ProductionStats</code> serializer","Creates a new <code>ProductionStats</code> deserializer","Creates a new rolls deserializer","Creates a new <code>DeferredCredits</code> serializer","Creates a new <code>DeferredCredits</code> deserializer","Creates a new <code>Credits</code> serializer","Create a new <code>PoSChanges</code> Serializer","Create a new <code>PoSChanges</code> Deserializer","create a new <code>PoSFinalState</code>","periods per cycle","Number of periods per cycle","Chosen block producer","Per-address production statistics","updated production statistics","","Remove zero credits","random seed bits of all slots in the cycle so far","new roll counts for addresses (can be 0 to remove the …","number of rolls each staking address has","extra block seed bits added","selector controller","","","","","","","Sets a part of the Proof of Stake <code>cycle_history</code>. Used only …","Sets a part of the Proof of Stake <code>deferred_credits</code>. Used …","slot deserializer","Stop the selector thread Note that we do not take self by …","thread count","Number of running threads","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Waits for draws to reach at least a given cycle number. …"],"i":[11,11,0,0,0,0,11,11,0,0,0,11,11,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,1,1,1,9,9,15,20,16,24,27,17,29,18,19,30,1,6,7,8,9,10,11,2,12,15,20,16,24,27,17,29,18,19,30,1,6,7,8,9,10,11,2,12,12,6,7,8,9,10,11,2,12,13,6,7,8,9,10,11,2,12,8,1,1,1,6,8,1,6,15,16,17,18,19,8,9,10,2,1,1,2,20,24,27,29,30,12,12,7,7,8,9,7,8,9,9,2,13,6,7,8,9,10,11,11,2,12,15,20,16,24,27,17,29,18,19,30,1,6,7,8,9,10,11,2,12,12,1,13,1,1,1,1,1,13,1,13,1,1,15,20,16,24,27,17,29,18,19,30,1,6,7,8,9,10,11,2,12,2,9,12,10,15,20,16,24,27,17,29,18,19,30,1,6,12,7,8,2,11,10,8,2,8,2,1,15,16,17,18,19,12,1,1,1,50,6,12,6,7,8,9,10,11,2,12,11,15,20,16,24,27,17,29,18,19,30,1,6,7,8,9,10,11,2,12,15,20,16,24,27,17,29,18,19,30,1,6,7,8,9,10,11,2,12,15,20,16,24,27,17,29,18,19,30,1,6,7,8,9,10,11,2,12,15,20,16,24,27,17,29,18,19,30,1,6,7,8,9,10,11,2,12,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,3,4],5],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[2,2],[12,12],[[],[[14,[13]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,5],0,[1],0,0,0,0,[[],15],[[],16],[[],17],[[],18],[[],19],[[],8],[[],9],[[],10],[[],2],0,0,0,[20,[[23,[8,[0,[21,22]]]]]],[24,[[23,[[26,[25,9]],[0,[21,22]]]]]],[27,[[23,[28,[0,[21,22]]]]]],[29,[[23,[10,[0,[21,22]]]]]],[30,[[23,[2,[0,[21,22]]]]]],[[],[[31,[12]]]],0,0,[[7,7],4],[[8,8],4],[[9,9],4],[[],4],[[],4],[[],4],[[9,9]],[[2,2]],[[32,[33,[25,32]],34],5],[[6,35],36],[[7,35],36],[[8,35],36],[[9,35],36],[[10,35],36],[[11,35],36],[[11,35],36],[[2,35],36],[[12,35],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[1,25,32],[[37,[32]]]],[[25,3,3],5],[[1,32],[[37,[26]]]],[[1,[38,[32]]],[[31,[39]]]],[[1,32],[[37,[40]]]],[[1,3],[[26,[25,41]]]],[[1,[38,[3]]]],[3,[[5,[25]]]],[[1,25],32],[3,[[5,[7]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,4],[[9,42],4],0,[[10,10]],[[],15],[[32,32],20],[[],16],[32,24],[32,27],[[],17],[[43,32],29],[[],18],[[],19],[[43,32,32,32],30],[[6,44,45,[14,[13]]],[[31,[1,11]]]],0,0,0,0,0,[46],[10],0,0,0,0,0,[[15,8,28],[[31,[47]]]],[[16,26,28],[[31,[47]]]],[[17,10,28],[[31,[47]]]],[[18,26,28],[[31,[47]]]],[[19,2,28],[[31,[47]]]],[12,31],[[1,[37,[8]]],[[38,[32]]]],[[1,10],[[38,[3]]]],0,[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],48],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[],49],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,[[5,[32]]]]],"p":[[3,"PoSFinalState"],[3,"PoSChanges"],[3,"Slot"],[15,"bool"],[6,"PosResult"],[3,"PoSConfig"],[3,"Selection"],[3,"CycleInfo"],[3,"ProductionStats"],[3,"DeferredCredits"],[4,"PosError"],[3,"SelectorConfig"],[8,"SelectorController"],[3,"Box"],[3,"CycleInfoSerializer"],[3,"ProductionStatsSerializer"],[3,"DeferredCreditsSerializer"],[3,"CreditsSerializer"],[3,"PoSChangesSerializer"],[3,"CycleInfoDeserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[3,"ProductionStatsDeserializer"],[3,"Address"],[6,"PreHashMap"],[3,"RollsDeserializer"],[3,"Vec"],[3,"DeferredCreditsDeserializer"],[3,"PoSChangesDeserializer"],[4,"Result"],[15,"u64"],[3,"BTreeMap"],[3,"Hash"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"StreamingStep"],[4,"ModelsError"],[15,"usize"],[3,"Amount"],[3,"Ratio"],[15,"u8"],[15,"str"],[3,"PathBuf"],[3,"Demand"],[4,"SerializeError"],[3,"String"],[3,"TypeId"],[8,"SelectorManager"]]},\
"massa_pos_worker":{"doc":"","t":[5],"n":["start_selector_worker"],"q":["massa_pos_worker"],"d":["Start thread selector Launches a selector worker thread …"],"i":[0],"f":[[1,2]],"p":[[3,"SelectorConfig"],[6,"PosResult"]]},\
"massa_protocol_exports":{"doc":"protocol component exports","t":[13,13,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,3,4,4,3,4,3,13,13,13,13,13,13,13,13,13,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,12,12,12,12,11,11,11,11,11,11,11,12,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,5,5,5,11,11,11,11,11,11,5,5,5,5,5,5,5,5,11,11,11,11,12,11,11,12,5,11,11,11,11,11,11,11,11,11,5],"n":["ActiveConnectionMissing","AttackBlockDetected","BlocksResults","ChannelError","ContainerInconsistencyError","GeneralProtocolError","IOError","IntegratedBlock","InvalidBlock","InvalidIpError","MassaHashError","MissingPeersError","ModelsError","NetworkError","PeerConnectionError","PropagateEndorsements","PropagateOperations","ProtocolCommand","ProtocolCommandSender","ProtocolConfig","ProtocolError","ProtocolEvent","ProtocolEventReceiver","ProtocolManagementCommand","ProtocolManager","ReceivedBlock","ReceivedBlockHeader","SerdeError","TimeError","TokioRecvError","TokioSendError","TokioTaskJoinError","UnexpectedNodeCommandChannelClosure","UnexpectedWriterClosure","WishlistDelta","WrongSignature","ask_block_timeout","asked_operations_pruning_period","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","controller_channel_size","deserialize","drain","event_channel_size","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","genesis_timestamp","integrated_block","into","into","into","into","into","into","into","into","max_endorsements_propagation_time","max_known_blocks_size","max_known_endorsements_size","max_known_ops_size","max_node_known_blocks_size","max_node_known_endorsements_size","max_node_known_ops_size","max_node_wanted_blocks_size","max_operations_per_message","max_operations_propagation_time","max_send_wait","max_serialized_operations_size_per_block","max_simultaneous_ask_blocks_per_node","new","notify_block_attack","operation_announcement_buffer_capacity","operation_announcement_interval","operation_batch_buffer_capacity","operation_batch_proc_period","propagate_endorsements","propagate_operations","provide","send_wishlist_delta","serialize","source","stop","t0","tests","thread_count","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wait_event","block_id","new","remove","storage","block_id","block_id","block_id","header","header","slot","storage","mock_network_controller","tools","MockNetworkController","borrow","borrow_mut","close_connection","from","into","new","new_connection","send_ask_for_block","send_ask_for_operation","send_block_info","send_endorsements","send_header","send_operation_batch","send_operations","try_from","try_into","type_id","vzip","wait_command","NodeInfo","PROTOCOL_CONFIG","asked_list","assert_banned_nodes","assert_hash_asked_to_node","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_and_connect_nodes","create_block","create_block_with_endorsements","create_block_with_operations","create_endorsement","create_node","create_operation_with_expire_period","create_protocol_config","deref","fmt","from","from","id","into","into","keypair","send_and_propagate_block","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","wait_protocol_event"],"q":["massa_protocol_exports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_protocol_exports::ProtocolCommand","","","","massa_protocol_exports::ProtocolEvent","","","","","","","massa_protocol_exports::tests","","massa_protocol_exports::tests::mock_network_controller","","","","","","","","","","","","","","","","","","","","massa_protocol_exports::tests::tools","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Active connection missing:<code>{0}</code>","A block, or it’s header, amounted to an attempted attack.","block result: map block id to","An error occurred during channel communication: {0}","container inconsistency error: {0}","Protocol err:{0}","IO error : {0}","Notify block integration of a given block.","A message to tell the consensus that a block is invalid","The ip:<code>{0}</code> address is not valid","<code>massa_hash</code> error {0}","missing peers","models error: {0}","network error: {0}","Error during network connection:<code>{0:?}</code>","Propagate endorsements","Propagate operations (send batches) note: <code>Set&lt;OperationId&gt;</code> …","Commands that protocol worker can process","protocol command sender","Dynamic protocol configuration mix in static settings and …","protocol error","Possible types of events that can happen.","Protocol event receiver","protocol management commands","protocol manager used to stop the protocol","A block with a valid signature has been received.","A block header with a valid signature has been received.","Serde error : {0}","Time error {0}","error receiving one shot response : {0}","error sending protocol event: {0}","A tokio task has crashed err:{0}","the network controller should not drop a node command …","the writer of a node should not drop its event sender …","Wish list delta","wrong signature","after <code>ask_block_timeout</code> milliseconds we try to ask a block …","All operations asked are prune each …","","","","","","","","","","","","","","","","","","","","","Controller channel size","","drains remaining events and returns them in a <code>VecDeque</code> …","Event channel size","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Genesis timestamp","Sends the order to propagate the header of a block","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","max time we propagate endorsements","max known blocks of current nodes we keep in memory (by …","max known endorsements by our node that we kept in memory","max known operations current node kept in memory","max known blocks of foreign nodes we keep in memory (by …","max known endorsements of foreign nodes we keep in memory …","max known operations of foreign nodes we keep in memory …","max wanted blocks per node kept in memory","Maximum of operations sent in one message.","max time we propagate operations","Max wait time for sending a Network or Node event.","Maximum size in bytes of all serialized operations size in …","we ask for the same block …","new protocol manager","Notify to protocol an attack attempt.","Maximum number of operations in the announcement buffer. …","Interval at which operations are announced in batches.","Maximum number of batches in the memory buffer. Dismiss …","Start processing batches in the buffer each …","propagate endorsements to connected node","Propagate a batch of operation ids (from pool).","","update the block wish list","","","Stop the protocol controller","t0","TODO: Add only if test. Removed the configuration test …","running threads count","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Receives the next <code>ProtocolEvent</code> from connected Node. None …","block id","add to wish list","remove from wish list","block storage","block ID","block ID","its id","header","The header","block slot","storage instance containing the block and its dependencies …","mock network controller","test utilities","mock network controller","","","close connection","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","new mock network controller","new connection","ask for block","received ask for operation from node todo inconsistency …","Send info about block","send endorsements todo inconsistency with names","send header todo inconsistency with names","send operation ids todo inconsistency with names","send operations todo inconsistency with names","","","","","wait command","test utility structures keeps keypair and associated node …","protocol settings","retrieve what blocks where asked to which nodes","assert a list of node(s) has been banned","assert block id has been asked to node","","","","","","","create number of nodes and connect them with protocol","Creates a block for use in protocol, without paying …","create a block with no operation","create a block with no endorsement","Creates an endorsement for use in protocol tests, without …","create node info","Create an operation, from a specific sender, and with a …","create a <code>ProtocolConfig</code> with typical values","","","Returns the argument unchanged.","Returns the argument unchanged.","node id","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","key pair of the node","send a block and assert it has been propagate (or not)","","","","","","","","","","wait protocol event"],"i":[7,10,0,7,7,7,7,10,5,7,7,7,7,7,7,10,10,0,0,0,0,0,0,0,0,5,5,7,7,7,7,7,7,7,10,7,2,2,4,27,7,5,10,11,1,2,4,27,7,5,10,11,1,2,1,2,1,2,2,2,4,2,7,7,5,10,11,2,4,27,7,7,7,7,7,7,7,7,7,7,5,10,11,1,2,2,1,4,27,7,5,10,11,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,27,1,2,2,2,2,1,1,7,1,11,7,27,2,0,2,1,2,7,4,27,7,5,10,11,1,2,4,27,7,5,10,11,1,2,4,27,7,5,10,11,1,2,4,27,7,5,10,11,1,2,4,52,53,53,52,54,55,56,55,56,54,54,0,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,0,0,0,44,50,44,50,44,44,0,0,0,0,0,0,0,0,50,44,44,50,44,44,50,44,0,44,44,50,44,50,44,50,44,50,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],0,[[],[[3,[2]]]],[4,[[6,[5]]]],0,[[7,8],9],[[7,8],9],[[5,8],9],[[10,8],9],[[11,8],9],[[2,8],9],[[]],[[]],[12,7],[[]],[13,7],[14,7],[[[16,[[15,[5]]]]],7],[17,7],[18,7],[19,7],[20,7],[21,7],[[]],[[]],[[]],[[]],[[]],0,[[1,22,23],[[3,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[25,[[3,[24,7]]]],[26,[11]]],27],[[1,22],[[3,[7]]]],0,0,0,0,[[1,23],[[3,[7]]]],[[1,23],[[3,[7]]]],[28],[[1,[31,[22,[30,[29]]]],[32,[22]]],[[3,[7]]]],[11,3],[7,[[30,[33]]]],[[27,4],[[3,[24,7]]]],0,0,0,[[]],[[]],[[],34],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,[[3,[5,7]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[36,37]],[[]],[[]],[[]],[[36,37]],[[36,37,38]],[[36,37,[38,[39]]]],[[36,37,38]],[[36,37,[38,[40]]]],[[36,37,29]],[[36,37,[38,[39]]]],[[36,37,[38,[41]]]],[[],3],[[],3],[[],35],[[]],[[36,42],30],0,0,[36,[[43,[37,38]]]],[[[38,[37]],36]],[[22,37,36]],[[]],[[]],[[]],[[]],[44,44],[[]],[[45,36],[[38,[44]]]],[46,47],[[46,48,[38,[40]]],47],[[46,48,[38,[41]]],47],[[],40],[[],44],[[46,49],41],[[],2],[50,2],[[44,8],9],[[]],[[]],0,[[]],[[]],0,[[36,47,51,37,4,1,[38,[41]]]],[[]],[[],3],[[],3],[[],3],[[],3],[[],35],[[],35],[[]],[[]],[[4,42],[[30,[5]]]]],"p":[[3,"ProtocolCommandSender"],[3,"ProtocolConfig"],[4,"Result"],[3,"ProtocolEventReceiver"],[4,"ProtocolEvent"],[3,"VecDeque"],[4,"ProtocolError"],[3,"Formatter"],[6,"Result"],[4,"ProtocolCommand"],[4,"ProtocolManagementCommand"],[4,"ModelsError"],[3,"Error"],[4,"MassaHashError"],[3,"SendError"],[3,"Box"],[4,"TimeError"],[3,"RecvError"],[4,"NetworkError"],[3,"Error"],[3,"JoinError"],[3,"BlockId"],[3,"Storage"],[3,"NetworkEventReceiver"],[3,"JoinHandle"],[3,"Sender"],[3,"ProtocolManager"],[3,"Demand"],[6,"WrappedHeader"],[4,"Option"],[6,"PreHashMap"],[6,"PreHashSet"],[8,"Error"],[3,"String"],[3,"TypeId"],[3,"MockNetworkController"],[3,"NodeId"],[3,"Vec"],[3,"OperationId"],[6,"WrappedEndorsement"],[6,"WrappedOperation"],[3,"MassaTime"],[3,"HashMap"],[3,"NodeInfo"],[15,"usize"],[3,"KeyPair"],[6,"WrappedBlock"],[3,"Slot"],[15,"u64"],[3,"PROTOCOL_CONFIG"],[15,"bool"],[13,"IntegratedBlock"],[13,"WishlistDelta"],[13,"ReceivedBlock"],[13,"InvalidBlock"],[13,"ReceivedBlockHeader"]]},\
"massa_protocol_worker":{"doc":"Protocol component High level management of communications …","t":[0,2,0,3,3,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,5,11,11,11,11,11,11,11,11,6,3,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11],"n":["protocol_worker","start_protocol_controller","worker_operations_impl","ProtocolWorker","ProtocolWorkerChannels","borrow","borrow","borrow_mut","borrow_mut","controller_command_rx","controller_event_tx","controller_manager_rx","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","into","into","network_command_sender","network_event_receiver","new","run_loop","start_protocol_controller","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","OperationBatchBuffer","OperationBatchItem","borrow","borrow_mut","deref","deref_mut","drop","from","init","instant","into","node_id","operations_prefix_ids","try_from","try_into","type_id","vzip"],"q":["massa_protocol_worker","","","massa_protocol_worker::protocol_worker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","massa_protocol_worker::worker_operations_impl","","","","","","","","","","","","","","","",""],"d":["protocol worker Copyright (c) 2022 MASSA LABS …","","Contains the implementation of the life cycle of operations","protocol worker","channels used by the protocol worker","","","","","protocol command receiver","protocol event sender","protocol management command receiver","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","network command sender","network event receiver","Creates a new protocol worker.","Main protocol worker loop. Consumes self. It is mostly a …","start a new <code>ProtocolController</code> from a <code>ProtocolConfig</code>","","","","","","","","","Queue containing every <code>[OperationsBatchItem]</code> we want to …","Structure containing a Batch of <code>operation_ids</code> we would …","","","","","","Returns the argument unchanged.","","last updated at instant","Calls <code>U::from(self)</code>.","node id","operation prefix ids","","","",""],"i":[0,0,0,0,0,7,3,7,3,3,3,3,7,3,7,3,7,3,7,3,7,3,7,3,3,3,7,7,0,7,3,7,3,7,3,7,3,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,[1],[1],[1],[1],[1],[1],[[]],[[]],[[],1],[[],1],[[]],[[]],0,0,[[2,3,[5,[4]],6],7],[7,[[10,[8,9]]]],[[2,11,8,[5,[4]],6],[[10,[9]]]],[[],10],[[],10],[[],10],[[],10],[[],12],[[],12],[[]],[[]],0,0,[[]],[[]],[1],[1],[1],[[]],[[],1],0,[[]],0,0,[[],10],[[],10],[[],12],[[]]],"p":[[15,"usize"],[3,"ProtocolConfig"],[3,"ProtocolWorkerChannels"],[8,"PoolController"],[3,"Box"],[3,"Storage"],[3,"ProtocolWorker"],[3,"NetworkEventReceiver"],[4,"ProtocolError"],[4,"Result"],[3,"NetworkCommandSender"],[3,"TypeId"],[3,"OperationBatchItem"]]},\
"massa_sdk":{"doc":"Utilities for a massa client","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11],"n":["Client","RpcClient","add_staking_secret_keys","borrow","borrow","borrow_mut","borrow_mut","execute_read_only_bytecode","execute_read_only_call","from","from","from","from_url","get_addresses","get_block","get_datastore_entries","get_endorsements","get_filtered_sc_output_event","get_operations","get_staking_addresses","get_status","into","into","new","node_ban_by_id","node_ban_by_ip","node_remove_from_whitelist","node_sign_message","node_unban_by_id","node_unban_by_ip","node_whitelist","private","public","remove_staking_addresses","send_operations","stop_node","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["massa_sdk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Client","TODO ask @yvan-sraka","Add a vector of new secret keys for the node to use to …","","","","","execute read only bytecode","execute read only SC call","Returns the argument unchanged.","","Returns the argument unchanged.","Default constructor","Get info by addresses","Get information on a block given its <code>BlockId</code>","Get datastore entries","get info on endorsements by ids","Get events emitted by smart contracts with various filters","Returns operations information associated to a given list …","Return hash-set of staking addresses.","summary of the current state: time, last final blocks …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","creates a new client","Bans given node id(s) No confirmation to expect.","Bans given ip address(es) No confirmation to expect.","remove IPs from whitelist","Sign message with node’s key. Returns the public key …","Unban given node id(s) No confirmation to expect.","Unban given ip address(es) No confirmation to expect.","add ips to whitelist create peer if it was unknown","private component","public component","Remove a vector of addresses used to stake. No …","Adds operations to pool. Returns operations that were ok …","Gracefully stop the node.","","","","","","","",""],"i":[0,0,1,26,1,26,1,1,1,26,1,1,1,1,1,1,1,1,1,1,1,26,1,26,1,1,1,1,1,1,1,26,26,1,1,1,26,1,26,1,26,1,26,1],"f":[0,0,[[1,[3,[2]]],4],[[]],[[]],[[]],[[]],[[1,5],[[4,[6]]]],[[1,7],[[4,[6]]]],[[]],[8,1],[[]],[9,1],[[1,[3,[10]]],[[4,[[3,[11]]]]]],[[1,12],[[4,[13]]]],[[1,[3,[14]]],[[4,[[3,[15]]]]]],[[1,[3,[16]]],[[4,[[3,[17]]]]]],[[1,18],[[4,[[3,[19]]]]]],[[1,[3,[20]]],[[4,[[3,[21]]]]]],[1,[[4,[[22,[10]]]]]],[1,[[4,[23]]]],[[]],[[]],[[24,25,25],26],[[1,[3,[27]]],4],[[1,[3,[24]]],4],[[1,[3,[24]]],4],[[1,[3,[28]]],[[4,[29]]]],[[1,[3,[27]]],4],[[1,[3,[24]]],4],[[1,[3,[24]]],4],0,0,[[1,[3,[10]]],4],[[1,[3,[30]]],[[4,[[3,[20]]]]]],[1,4],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[]],[[]]],"p":[[3,"RpcClient"],[3,"String"],[3,"Vec"],[6,"RpcResult"],[3,"ReadOnlyBytecodeExecution"],[3,"ExecuteReadOnlyResponse"],[3,"ReadOnlyCall"],[3,"RpcChannel"],[15,"str"],[3,"Address"],[3,"AddressInfo"],[3,"BlockId"],[3,"BlockInfo"],[3,"DatastoreEntryInput"],[3,"DatastoreEntryOutput"],[3,"EndorsementId"],[3,"EndorsementInfo"],[3,"EventFilter"],[3,"SCOutputEvent"],[3,"OperationId"],[3,"OperationInfo"],[6,"PreHashSet"],[3,"NodeStatus"],[4,"IpAddr"],[15,"u16"],[3,"Client"],[3,"NodeId"],[15,"u8"],[3,"PubkeySig"],[3,"OperationInput"],[4,"Result"],[3,"TypeId"]]},\
"massa_serialization":{"doc":"","t":[3,8,13,13,3,3,4,8,13,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DeserializeError","Deserializer","GeneralError","NumberTooBig","OptionDeserializer","OptionSerializer","SerializeError","Serializer","StringTooBig","U16VarIntDeserializer","U16VarIntSerializer","U32VarIntDeserializer","U32VarIntSerializer","U64VarIntDeserializer","U64VarIntSerializer","add_context","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_char","from_error_kind","into","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","new","new","or","provide","provide","serialize","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["massa_serialization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Trait that define the deserialize method that must be …","General error {0}","Number {0} is too big to be serialized","","","","This trait must be implemented to serializes all data in …","String too big {0},","Deserializer for  <code>u16</code> in a varint form.","Serializer for  <code>u16</code> in a varint form.","Deserializer for  <code>u32</code> in a varint form.","Serializer for  <code>u32</code> in a varint form.","Deserializer for  <code>u64</code> in a varint form.","Serializer for  <code>u64</code> in a varint form.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deserialize a value <code>T</code> from a buffer of <code>u8</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a basic serializer for  <code>u16</code> in a varint form.","Create a basic deserializer for  <code>u16</code> in a varint form.","Create a basic serializer for  <code>u32</code> in a varint form.","Create a basic deserializer for  <code>u32</code> in a varint form.","Create a basic serializer for  <code>u64</code> in a varint form.","Create a basic deserializer for  <code>u64</code> in a varint form.","","","","Serialize a value <code>T</code> into a buffer of <code>u8</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,4,4,0,0,0,0,4,0,0,0,0,0,0,2,2,22,14,4,2,5,6,7,8,9,10,22,14,4,2,5,6,7,8,9,10,4,2,5,6,7,8,9,10,4,2,5,6,7,8,9,10,5,7,9,29,14,6,8,10,4,4,2,2,22,14,4,2,5,6,7,8,9,10,2,2,22,14,4,2,5,6,7,8,9,10,22,14,5,6,7,8,9,10,2,4,2,30,22,5,7,9,4,2,5,6,7,8,9,10,4,2,22,14,4,2,5,6,7,8,9,10,22,14,4,2,5,6,7,8,9,10,22,14,4,2,5,6,7,8,9,10],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],2],[[3,2],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,4],[2,2],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],7],[[],9],[[],[[13,[[0,[11,12]]]]]],[14,[[13,[15,[0,[11,12]]]]]],[6,[[13,[16,[0,[11,12]]]]]],[8,[[13,[17,[0,[11,12]]]]]],[10,[[13,[18,[0,[11,12]]]]]],[[4,19],20],[[4,19],20],[[2,19],20],[[2,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,2],[3,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],14],[[],5],[[[23,[16]],[23,[16]]],6],[[],7],[[[23,[17]],[23,[17]]],8],[[],9],[[[23,[18]],[23,[18]]],10],[[2,2],2],[24],[24],[25,[[26,[4]]]],[[22,15,25],[[26,[4]]]],[[5,16,25],[[26,[4]]]],[[7,17,25],[[26,[4]]]],[[9,18,25],[[26,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28]],"p":[[15,"str"],[3,"DeserializeError"],[4,"ErrorKind"],[4,"SerializeError"],[3,"U16VarIntSerializer"],[3,"U16VarIntDeserializer"],[3,"U32VarIntSerializer"],[3,"U32VarIntDeserializer"],[3,"U64VarIntSerializer"],[3,"U64VarIntDeserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[3,"OptionDeserializer"],[4,"Option"],[15,"u16"],[15,"u32"],[15,"u64"],[3,"Formatter"],[6,"Result"],[15,"char"],[3,"OptionSerializer"],[4,"Bound"],[3,"Demand"],[3,"Vec"],[4,"Result"],[3,"String"],[3,"TypeId"],[8,"Deserializer"],[8,"Serializer"]]},\
"massa_signature":{"doc":"Signature management","t":[3,4,17,13,3,3,17,17,3,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11],"n":["KeyPair","MassaSignatureError","PUBLIC_KEY_SIZE_BYTES","ParsingError","PublicKey","PublicKeyDeserializer","SECRET_KEY_BYTES_SIZE","SIGNATURE_SIZE_BYTES","Signature","SignatureDeserializer","SignatureError","WrongPrefix","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bs58_check","from_bs58_check","from_bs58_check","from_bytes","from_bytes","from_bytes","from_str","from_str","from_str","generate","get_public_key","hash","into","into","into","into","into","into","into_bytes","into_bytes","into_bytes","new","new","partial_cmp","provide","serialize","serialize","serialize","sign","to_bs58_check","to_bs58_check","to_bs58_check","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","verify_signature","verify_signature_batch","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["massa_signature","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>KeyPair</code> is used for signature and decryption","Error generated by massa-signature crate","Size of a public key","Parsing error: {0}","Public key used to check if a message was encoded by the …","Serializer for <code>Signature</code>","Size of a keypair","Size of a signature","Signature generated from a message and a <code>KeyPair</code>.","Serializer for <code>Signature</code>","Signature error : {0}","Wrong prefix for hash: expected {0}, got {1}","","","","","","","","","","","","","","","","","","","","","","","","<code>::serde::Deserialize</code> trait for <code>KeyPair</code> if the deserializer …","<code>::serde::Deserialize</code> trait for <code>PublicKey</code> if the …","","<code>::serde::Deserialize</code> trait for <code>Signature</code> if the …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Decode a <code>base58</code> encoded keypair","Deserialize a <code>PublicKey</code> using <code>bs58</code> encoding with checksum.","Deserialize a <code>Signature</code> using <code>bs58</code> encoding with checksum.","Convert a byte array of size <code>SECRET_KEY_BYTES_SIZE</code> to a …","Deserialize a <code>PublicKey</code> from bytes.","Deserialize a Signature from bytes.","","","","Generate a new <code>KeyPair</code>","Get the public key of the keypair","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the bytes representing the keypair","Serialize into bytes.","Serialize a Signature into bytes.","Creates a <code>SignatureDeserializer</code>","Creates a <code>SignatureDeserializer</code>","","","<code>::serde::Serialize</code> trait for <code>KeyPair</code> if the serializer is …","<code>::serde::Serialize</code> trait for <code>PublicKey</code> if the serializer …","<code>::serde::Serialize</code> trait for <code>Signature</code> if the serializer …","Returns the Signature produced by signing data bytes with …","Encode a keypair into his <code>base58</code> form","Serialize a <code>PublicKey</code> using <code>bs58</code> encoding with checksum.","Serialize a <code>Signature</code> using <code>bs58</code> encoding with checksum.","Return the bytes representing the keypair (should be a …","Serialize a <code>PublicKey</code> as bytes.","Serialize a Signature as bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if the <code>Signature</code> associated with data bytes was …","Verify a batch of signatures on a single core to gain …","","","","","",""],"i":[0,0,0,2,0,0,0,0,0,0,2,2,1,2,3,6,4,7,1,2,3,6,4,7,1,2,3,4,1,2,3,4,3,6,7,1,3,6,4,7,3,4,1,1,2,2,3,3,4,4,1,2,3,6,4,7,1,3,4,1,3,4,1,3,4,1,1,3,1,2,3,6,4,7,1,3,4,6,7,3,2,1,3,4,1,1,3,4,1,3,4,1,2,3,4,1,2,3,4,1,2,3,6,4,7,1,2,3,6,4,7,1,2,3,6,4,7,3,0,1,2,3,6,4,7],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[]],[[3,3],5],[[],6],[[],7],[8,[[9,[1]]]],[8,[[9,[3]]]],[6,[[12,[3,[0,[10,11]]]]]],[8,[[9,[4]]]],[7,[[12,[4,[0,[10,11]]]]]],[[3,3],13],[[4,4],13],[[1,14],15],[[1,14],15],[[2,14],15],[[2,14],15],[[3,14],15],[[3,14],15],[[4,14],15],[[4,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[16,[[9,[1,2]]]],[16,[[9,[3,2]]]],[16,[[9,[4,2]]]],[[],[[9,[1,2]]]],[[],[[9,[3,2]]]],[[],[[9,[4,2]]]],[16,[[9,[1]]]],[16,[[9,[3]]]],[16,[[9,[4]]]],[[],1],[1,3],[3],[[]],[[]],[[]],[[]],[[]],[[]],[1],[3],[4],[[],6],[[],7],[[3,3],[[17,[5]]]],[18],[[1,19],9],[[3,19],9],[[4,19],9],[[1,20],[[9,[4,2]]]],[1,21],[3,21],[4,21],[1],[3],[4],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[3,20,4],[[9,[2]]]],[[],[[9,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"KeyPair"],[4,"MassaSignatureError"],[3,"PublicKey"],[3,"Signature"],[4,"Ordering"],[3,"PublicKeyDeserializer"],[3,"SignatureDeserializer"],[8,"Deserializer"],[4,"Result"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Option"],[3,"Demand"],[8,"Serializer"],[3,"Hash"],[3,"String"],[3,"TypeId"]]},\
"massa_storage":{"doc":"Copyright (c) 2022 MASSA LABS info@massa.net","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Storage","borrow","borrow_mut","claim_block_refs","claim_endorsement_refs","claim_operation_refs","clone","clone_into","clone_without_refs","create_root","drop","drop_block_refs","drop_endorsement_refs","drop_operation_refs","extend","fmt","from","get_block_refs","get_endorsement_refs","get_op_refs","into","read_blocks","read_endorsements","read_operations","split_off","store_block","store_endorsements","store_operations","to_owned","try_from","try_into","type_id","vzip"],"q":["massa_storage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A storage system for objects (blocks, operations…), …","","","Claim block references. Returns the set of block refs that …","Claim endorsement references. Returns the set of operation …","Claim operation references. Returns the set of operation …","","","Clones the object to a new one that has no references","Creates a new <code>Storage</code> instance. Must be called only one …","cleanup on Storage instance drop","Drop block references","Drop local endorsement references. Ignores already-absent …","Drop local operation references. Ignores already-absent …","Efficiently extends the current Storage by consuming the …","","Returns the argument unchanged.","get the block reference ownership","get the endorsement reference ownership","get the operation reference ownership","Calls <code>U::from(self)</code>.","Gets a read reference to the blocks index","Gets a read reference to the endorsements index","Gets a read reference to the operations index","Efficiently splits off a subset of the reference ownership …","Store a block Note that this also claims a local reference …","Store endorsements Claims local references to the added …","Store operations Claims a local reference to the added …","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[[1,2],[[2,[3]]]],[[1,2],[[2,[4]]]],[[1,2],[[2,[5]]]],[1,1],[[]],[1,1],[[],1],[1],[[1,2]],[[1,2]],[[1,2]],[[1,1]],[[1,6],7],[[]],[1,2],[1,2],[1,2],[[]],[1,[[8,[0]]]],[1,[[8,[0]]]],[1,[[8,[0]]]],[[1,2,2,2],1],[[1,9]],[[1,[11,[10]]]],[[1,[11,[12]]]],[[]],[[],13],[[],13],[[],14],[[]]],"p":[[3,"Storage"],[6,"PreHashSet"],[3,"BlockId"],[3,"EndorsementId"],[3,"OperationId"],[3,"Formatter"],[6,"Result"],[6,"RwLockReadGuard"],[6,"WrappedBlock"],[6,"WrappedEndorsement"],[3,"Vec"],[6,"WrappedOperation"],[4,"Result"],[3,"TypeId"]]},\
"massa_time":{"doc":"Unsigned time management","t":[13,13,18,3,3,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CheckedOperationError","ConversionError","EPSILON","MassaTime","MassaTimeDeserializer","MassaTimeSerializer","TimeError","TimeOverflowError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_div_time","checked_div_u64","checked_mul","checked_rem_time","checked_rem_u64","checked_sub","clone","clone","clone_into","clone_into","cmp","days_hours_mins_secs","default","deserialize","deserialize","eq","estimate_instant","fmt","fmt","fmt","fmt","from","from","from","from","from","from_millis","from_str","hash","into","into","into","into","new","new","now","partial_cmp","provide","saturating_add","saturating_mul","saturating_sub","serialize","serialize","to_duration","to_millis","to_owned","to_owned","to_string","to_string","to_utc_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["massa_time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Checked operation error : {0}","Error converting","Smallest time interval","Time structure used everywhere. milliseconds since …","Deserializer for <code>MassaTime</code>","Serializer for <code>MassaTime</code>","Time related errors","Time overflow error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Conversion from <code>u64</code>, representing timestamp in …","Conversion from <code>u64</code>, representing timestamp in …","Conversion from <code>&amp;str</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a <code>MassaTimeSerializer</code>","Creates a <code>MassaTimeDeserializer</code>","Gets current compensated UNIX timestamp (resolution: …","","","","","","","","Conversion to <code>std::time::Duration</code>.","Conversion to <code>u64</code>, representing milliseconds.","","","","","","","","","","Conversion from <code>std::time::Duration</code>.","","","","","","","",""],"i":[2,2,1,0,0,0,0,2,6,7,2,1,6,7,2,1,1,1,1,1,1,1,1,2,1,2,1,1,1,6,7,1,1,1,2,2,1,1,6,7,2,1,1,1,1,1,6,7,2,1,6,7,1,1,2,1,1,1,6,1,1,1,2,1,2,1,1,6,7,2,1,1,6,7,2,1,6,7,2,1],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],[[3,[1,2]]]],[[1,1],[[3,[4,2]]]],[[1,4],[[3,[1,2]]]],[[1,4],[[3,[1,2]]]],[[1,1],[[3,[1,2]]]],[[1,4],[[3,[1,2]]]],[[1,1],[[3,[1,2]]]],[2,2],[1,1],[[]],[[]],[[1,1],5],[1,[[3,[2]]]],[[],6],[7,[[10,[1,[0,[8,9]]]]]],[[],[[3,[1]]]],[[1,1],11],[[1,12],[[3,[13,2]]]],[[2,14],15],[[2,14],15],[[1,14],15],[[1,14],15],[[]],[[]],[[]],[[]],[4,1],[4,1],[16,[[3,[1]]]],[1],[[]],[[]],[[]],[[]],[[],6],[[],7],[12,[[3,[1,2]]]],[[1,1],[[17,[5]]]],[18],[[1,1],1],[[1,4],1],[[1,1],1],[[6,1,19],[[3,[20]]]],[1,3],[1,21],[1,4],[[]],[[]],[[],22],[[],22],[1,22],[[],3],[[],3],[[],3],[[],3],[21,[[3,[1]]]],[[],3],[[],3],[[],3],[[],3],[[],23],[[],23],[[],23],[[],23]],"p":[[3,"MassaTime"],[4,"TimeError"],[4,"Result"],[15,"u64"],[4,"Ordering"],[3,"MassaTimeSerializer"],[3,"MassaTimeDeserializer"],[8,"ParseError"],[8,"ContextError"],[6,"IResult"],[15,"bool"],[15,"i64"],[3,"Instant"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Option"],[3,"Demand"],[3,"Vec"],[4,"SerializeError"],[3,"Duration"],[3,"String"],[3,"TypeId"]]},\
"massa_wallet":{"doc":"Standalone massa wallet Keypair management","t":[13,13,13,13,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["IOError","JSONError","MassaCipherError","MassaHashError","MissingKeyError","ModelsError","SerdeqsError","Wallet","WalletError","add_keypairs","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_operation","deserialize","find_associated_keypair","find_associated_public_key","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_full_wallet","get_wallet_address_list","into","into","keys","new","password","provide","remove_addresses","serialize","sign_message","source","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","wallet_path"],"q":["massa_wallet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["IO error: {0}","JSON error: {0}","<code>MassaCipher</code> error: {0}","<code>MassaHash</code> error: {0}","Missing key error: {0}","Models error: {0}","Serde Sq error: {0}","Contains the keypairs created in the wallet.","wallet error","Adds a list of keypairs to the wallet, returns their …","","","","","","","Signs an operation with the keypair corresponding to the …","","Finds the keypair associated with given address","Finds the public key associated with given address","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Export keys and addresses","Get all addresses in the wallet","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Keypairs and addresses","Generates a new wallet initialized with the provided file …","Password","","Removes wallet entries given a list of addresses. Missing …","","Sign arbitrary message with the associated keypair returns …","","","","","","","","","","","","","Path to the file containing the keypairs (encrypted)"],"i":[5,5,5,5,5,5,5,0,0,1,5,1,5,1,1,1,1,1,1,1,5,5,1,1,5,5,5,5,5,5,5,1,1,1,5,1,1,1,1,5,1,1,1,5,1,5,1,5,1,5,1,5,1,5,1,1],"f":[0,0,0,0,0,0,0,0,0,[[1,[3,[2]]],[[6,[[3,[4]],5]]]],[[]],[[]],[[]],[[]],[1,1],[[]],[[1,7,4],[[6,[8,5]]]],[[],[[6,[1]]]],[[1,4],[[9,[2]]]],[[1,4],[[9,[10]]]],[[5,11],12],[[5,11],12],[[1,11],12],[[1,11],12],[[]],[13,5],[14,5],[15,5],[16,5],[17,5],[18,5],[[]],[1,19],[1,[[20,[4]]]],[[]],[[]],0,[[21,22],[[6,[1,5]]]],0,[23],[[1,3],[[6,[5]]]],[1,6],[[1,4,[3,[24]]],[[9,[25]]]],[5,[[9,[26]]]],[[]],[[],22],[[],22],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[]],[[]],0],"p":[[3,"Wallet"],[3,"KeyPair"],[3,"Vec"],[3,"Address"],[4,"WalletError"],[4,"Result"],[3,"Operation"],[6,"WrappedOperation"],[4,"Option"],[3,"PublicKey"],[3,"Formatter"],[6,"Result"],[4,"CipherError"],[4,"MassaHashError"],[4,"ModelsError"],[4,"Error"],[3,"Error"],[3,"Error"],[6,"PreHashMap"],[6,"PreHashSet"],[3,"PathBuf"],[3,"String"],[3,"Demand"],[15,"u8"],[3,"PubkeySig"],[8,"Error"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
